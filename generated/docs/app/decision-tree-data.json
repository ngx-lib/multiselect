{
  "1347": {
    "id": "1347",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "3af0",
      "7f42",
      "882a"
    ]
  },
  "1387": {
    "id": "1387",
    "label": "until another Observable emits a value",
    "options": [
      "9135"
    ]
  },
  "1413": {
    "id": "1413",
    "label": "timer"
  },
  "1564": {
    "id": "1564",
    "label": "that emits values on a timer",
    "options": [
      "3057",
      "04b0"
    ]
  },
  "1753": {
    "id": "1753",
    "label": "skip"
  },
  "1843": {
    "id": "1843",
    "label": "when an error occurs",
    "options": [
      "1ecf",
      "73be"
    ]
  },
  "2020": {
    "id": "2020",
    "label": "using each source value only once",
    "options": [
      "d656"
    ]
  },
  "2038": {
    "id": "2038",
    "label": "when another Observable emits",
    "options": [
      "9800"
    ]
  },
  "2200": {
    "id": "2200",
    "label": "subscribeOn"
  },
  "2299": {
    "id": "2299",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "eba7",
      "f86d"
    ]
  },
  "2432": {
    "id": "2432",
    "label": "that routes values to observers",
    "options": [
      "5ca8"
    ]
  },
  "2562": {
    "id": "2562",
    "label": "immediately",
    "options": [
      "76cb"
    ]
  },
  "2894": {
    "id": "2894",
    "label": "windowCount"
  },
  "3057": {
    "id": "3057",
    "label": "regularly",
    "options": [
      "ddce"
    ]
  },
  "3397": {
    "id": "3397",
    "label": "timeoutWith"
  },
  "3488": {
    "id": "3488",
    "label": "pipe"
  },
  "3693": {
    "id": "3693",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "3ffa"
    ]
  },
  "4237": {
    "id": "4237",
    "label": "partition"
  },
  "4367": {
    "id": "4367",
    "label": "merge"
  },
  "4477": {
    "id": "4477",
    "label": "range"
  },
  "4590": {
    "id": "4590",
    "label": "until the Observable completes",
    "options": [
      "66de",
      "17e1"
    ]
  },
  "4956": {
    "id": "4956",
    "label": "bufferTime"
  },
  "5210": {
    "id": "5210",
    "label": "map"
  },
  "5450": {
    "id": "5450",
    "label": "combineLatest"
  },
  "5545": {
    "id": "5545",
    "label": "that never emits anything",
    "options": [
      "28b2"
    ]
  },
  "5910": {
    "id": "5910",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e97c"
    ]
  },
  "6157": {
    "id": "6157",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "1e99",
      "6ffc"
    ]
  },
  "6359": {
    "id": "6359",
    "label": "that match some previous value",
    "options": [
      "b5fe",
      "3a4c"
    ]
  },
  "6862": {
    "id": "6862",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "55fb"
    ]
  },
  "6892": {
    "id": "6892",
    "label": "altogether",
    "options": [
      "ae08"
    ]
  },
  "6943": {
    "id": "6943",
    "label": "concat"
  },
  "6992": {
    "id": "6992",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2894"
    ]
  },
  "7304": {
    "id": "7304",
    "label": "skipWhile"
  },
  "7430": {
    "id": "7430",
    "label": "retryWhen"
  },
  "7477": {
    "id": "7477",
    "label": "EMPTY"
  },
  "7984": {
    "id": "7984",
    "label": "immediately",
    "options": [
      "0982"
    ]
  },
  "8173": {
    "id": "8173",
    "label": "if they are at the start of the Observable",
    "options": [
      "9289",
      "4c6a",
      "13b2"
    ]
  },
  "8394": {
    "id": "8394",
    "label": "bufferWhen"
  },
  "8713": {
    "id": "8713",
    "label": "from"
  },
  "9135": {
    "id": "9135",
    "label": "skipUntil"
  },
  "9289": {
    "id": "9289",
    "label": "and only the first value",
    "options": [
      "c92e"
    ]
  },
  "9800": {
    "id": "9800",
    "label": "repeatWhen"
  },
  "9849": {
    "id": "9849",
    "label": "from a Promise or an event source",
    "options": [
      "8713"
    ]
  },
  "ce22": {
    "id": "ce22",
    "label": "mapTo"
  },
  "9e06": {
    "id": "9e06",
    "label": "to be a constant value",
    "options": [
      "ce22"
    ]
  },
  "7a5d": {
    "id": "7a5d",
    "label": "to be a value calculated through a formula",
    "options": [
      "5210"
    ]
  },
  "d756": {
    "id": "d756",
    "label": "I want to change each emitted value",
    "options": [
      "9e06",
      "7a5d"
    ]
  },
  "8e3d": {
    "id": "8e3d",
    "label": "pluck"
  },
  "04c8": {
    "id": "04c8",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "8e3d"
    ]
  },
  "88fd": {
    "id": "88fd",
    "label": "tap"
  },
  "b617": {
    "id": "b617",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "88fd"
    ]
  },
  "71f4": {
    "id": "71f4",
    "label": "filter"
  },
  "d214": {
    "id": "d214",
    "label": "based on custom logic",
    "options": [
      "71f4"
    ]
  },
  "c92e": {
    "id": "c92e",
    "label": "first"
  },
  "d421": {
    "id": "d421",
    "label": "take"
  },
  "4c6a": {
    "id": "4c6a",
    "label": "based on a given amount",
    "options": [
      "d421"
    ]
  },
  "9b08": {
    "id": "9b08",
    "label": "takeWhile"
  },
  "13b2": {
    "id": "13b2",
    "label": "based on custom logic",
    "options": [
      "9b08"
    ]
  },
  "9d99": {
    "id": "9d99",
    "label": "elementAt"
  },
  "efde": {
    "id": "efde",
    "label": "if they are exactly the n-th emission",
    "options": [
      "9d99"
    ]
  },
  "0df0": {
    "id": "0df0",
    "label": "last"
  },
  "4a18": {
    "id": "4a18",
    "label": "and only the last value",
    "options": [
      "0df0"
    ]
  },
  "92ea": {
    "id": "92ea",
    "label": "takeLast"
  },
  "5fc0": {
    "id": "5fc0",
    "label": "based on a given amount",
    "options": [
      "92ea"
    ]
  },
  "d9b0": {
    "id": "d9b0",
    "label": "if they are at the end of the Observable",
    "options": [
      "4a18",
      "5fc0"
    ]
  },
  "b94f": {
    "id": "b94f",
    "label": "takeUntil"
  },
  "1f47": {
    "id": "1f47",
    "label": "until another Observable emits a value",
    "options": [
      "b94f"
    ]
  },
  "82da": {
    "id": "82da",
    "label": "I want to allow some values to pass",
    "options": [
      "d214",
      "8173",
      "efde",
      "d9b0",
      "1f47"
    ]
  },
  "ae08": {
    "id": "ae08",
    "label": "ignoreElements"
  },
  "a841": {
    "id": "a841",
    "label": "based on a given amount",
    "options": [
      "1753"
    ]
  },
  "a7e4": {
    "id": "a7e4",
    "label": "based on custom logic",
    "options": [
      "7304"
    ]
  },
  "055b": {
    "id": "055b",
    "label": "from the start of the Observable",
    "options": [
      "a841",
      "a7e4"
    ]
  },
  "b4b4": {
    "id": "b4b4",
    "label": "skipLast"
  },
  "20b5": {
    "id": "20b5",
    "label": "from the end of the Observable",
    "options": [
      "b4b4"
    ]
  },
  "284d": {
    "id": "284d",
    "label": "distinctUntilChanged"
  },
  "01dc": {
    "id": "01dc",
    "label": "emitted just before the current value",
    "options": [
      "284d"
    ]
  },
  "9d6e": {
    "id": "9d6e",
    "label": "distinct"
  },
  "1b7a": {
    "id": "1b7a",
    "label": "emitted some time in the past",
    "options": [
      "9d6e"
    ]
  },
  "b5fe": {
    "id": "b5fe",
    "label": "according to value equality",
    "options": [
      "01dc",
      "1b7a"
    ]
  },
  "1dc0": {
    "id": "1dc0",
    "label": "distinctUntilKeyChanged"
  },
  "ecc0": {
    "id": "ecc0",
    "label": "emitted just before the current value",
    "options": [
      "1dc0"
    ]
  },
  "3a4c": {
    "id": "3a4c",
    "label": "according to a key or object property",
    "options": [
      "ecc0"
    ]
  },
  "9a05": {
    "id": "9a05",
    "label": "throttle"
  },
  "2b3e": {
    "id": "2b3e",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "9a05"
    ]
  },
  "7cb9": {
    "id": "7cb9",
    "label": "throttleTime"
  },
  "22b6": {
    "id": "22b6",
    "label": "where time windows are determined by a time duration",
    "options": [
      "7cb9"
    ]
  },
  "bfbb": {
    "id": "bfbb",
    "label": "by emitting the first value in each time window",
    "options": [
      "2b3e",
      "22b6"
    ]
  },
  "90cf": {
    "id": "90cf",
    "label": "audit"
  },
  "9b24": {
    "id": "9b24",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "90cf"
    ]
  },
  "a6c1": {
    "id": "a6c1",
    "label": "auditTime"
  },
  "978c": {
    "id": "978c",
    "label": "where time windows are determined by a time duration",
    "options": [
      "a6c1"
    ]
  },
  "ade8": {
    "id": "ade8",
    "label": "by emitting the last value in each time window",
    "options": [
      "9b24",
      "978c"
    ]
  },
  "19ec": {
    "id": "19ec",
    "label": "debounce"
  },
  "1e99": {
    "id": "1e99",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "19ec"
    ]
  },
  "2eeb": {
    "id": "2eeb",
    "label": "debounceTime"
  },
  "6ffc": {
    "id": "6ffc",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "2eeb"
    ]
  },
  "7cd7": {
    "id": "7cd7",
    "label": "that occur too frequently",
    "options": [
      "bfbb",
      "ade8",
      "6157"
    ]
  },
  "a4cf": {
    "id": "a4cf",
    "label": "I want to ignore values",
    "options": [
      "6892",
      "055b",
      "20b5",
      "1387",
      "6359",
      "7cd7"
    ]
  },
  "1c13": {
    "id": "1c13",
    "label": "reduce"
  },
  "f796": {
    "id": "f796",
    "label": "and only output the final computed value",
    "options": [
      "1c13"
    ]
  },
  "55fb": {
    "id": "55fb",
    "label": "scan"
  },
  "08d4": {
    "id": "08d4",
    "label": "mergeScan"
  },
  "b39b": {
    "id": "b39b",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "08d4"
    ]
  },
  "0936": {
    "id": "0936",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "f796",
      "6862",
      "b39b"
    ]
  },
  "ee26": {
    "id": "ee26",
    "label": "materialize"
  },
  "01b2": {
    "id": "01b2",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "ee26"
    ]
  },
  "1e27": {
    "id": "1e27",
    "label": "timeInterval"
  },
  "bca3": {
    "id": "bca3",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "1e27"
    ]
  },
  "83a0": {
    "id": "83a0",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "01b2",
      "bca3"
    ]
  },
  "5fa7": {
    "id": "5fa7",
    "label": "timeout"
  },
  "2a7f": {
    "id": "2a7f",
    "label": "I want to throw an error",
    "options": [
      "5fa7"
    ]
  },
  "88c7": {
    "id": "88c7",
    "label": "I want to switch to another Observable",
    "options": [
      "3397"
    ]
  },
  "a1d3": {
    "id": "a1d3",
    "label": "after a period of inactivity",
    "options": [
      "2a7f",
      "88c7"
    ]
  },
  "06c9": {
    "id": "06c9",
    "label": "single"
  },
  "12d5": {
    "id": "12d5",
    "label": "I want to ensure there is only one value",
    "options": [
      "06c9"
    ]
  },
  "e1c2": {
    "id": "e1c2",
    "label": "count"
  },
  "0d22": {
    "id": "0d22",
    "label": "I want to know how many values it emits",
    "options": [
      "e1c2"
    ]
  },
  "bc95": {
    "id": "bc95",
    "label": "startWith"
  },
  "0f43": {
    "id": "0f43",
    "label": "I want to prepend one value",
    "options": [
      "bc95"
    ]
  },
  "c8b2": {
    "id": "c8b2",
    "label": "delay"
  },
  "045c": {
    "id": "045c",
    "label": "based on a given amount of time",
    "options": [
      "c8b2"
    ]
  },
  "fb00": {
    "id": "fb00",
    "label": "delayWhen"
  },
  "b2cc": {
    "id": "b2cc",
    "label": "based on the emissions of another Observable",
    "options": [
      "fb00"
    ]
  },
  "fe74": {
    "id": "fe74",
    "label": "I want to delay the emissions",
    "options": [
      "045c",
      "b2cc"
    ]
  },
  "4dcc": {
    "id": "4dcc",
    "label": "toArray"
  },
  "66de": {
    "id": "66de",
    "label": "and convert to an array",
    "options": [
      "4dcc"
    ]
  },
  "4f6f": {
    "id": "4f6f",
    "label": "Observable",
    "method": "toPromise"
  },
  "17e1": {
    "id": "17e1",
    "label": "and convert to a Promise",
    "options": [
      "4f6f"
    ]
  },
  "ccfc": {
    "id": "ccfc",
    "label": "pairwise"
  },
  "4c1a": {
    "id": "4c1a",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "ccfc"
    ]
  },
  "8c97": {
    "id": "8c97",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "4237"
    ]
  },
  "6de4": {
    "id": "6de4",
    "label": "bufferCount"
  },
  "f4e9": {
    "id": "f4e9",
    "label": "I want to subscribe to each in order",
    "options": [
      "e2fe"
    ]
  },
  "fe61": {
    "id": "fe61",
    "label": "in batches of a particular size",
    "options": [
      "f4e9",
      "6992"
    ]
  },
  "60b3": {
    "id": "60b3",
    "label": "and emit the group as an array",
    "options": [
      "4956"
    ]
  },
  "f068": {
    "id": "f068",
    "label": "windowTime"
  },
  "413b": {
    "id": "413b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f068"
    ]
  },
  "cbf0": {
    "id": "cbf0",
    "label": "based on time",
    "options": [
      "60b3",
      "413b"
    ]
  },
  "9fad": {
    "id": "9fad",
    "label": "buffer"
  },
  "f366": {
    "id": "f366",
    "label": "and emit the group as an array",
    "options": [
      "9fad"
    ]
  },
  "5f91": {
    "id": "5f91",
    "label": "window"
  },
  "b236": {
    "id": "b236",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5f91"
    ]
  },
  "d9ea": {
    "id": "d9ea",
    "label": "until another Observable emits",
    "options": [
      "f366",
      "b236"
    ]
  },
  "acaf": {
    "id": "acaf",
    "label": "and emit the group as an array",
    "options": [
      "8394"
    ]
  },
  "e97c": {
    "id": "e97c",
    "label": "windowWhen"
  },
  "c0dc": {
    "id": "c0dc",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "acaf",
      "5910"
    ]
  },
  "223e": {
    "id": "223e",
    "label": "bufferToggle"
  },
  "ddb6": {
    "id": "ddb6",
    "label": "and emit the group as an array",
    "options": [
      "223e"
    ]
  },
  "c080": {
    "id": "c080",
    "label": "windowToggle"
  },
  "039c": {
    "id": "039c",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c080"
    ]
  },
  "947c": {
    "id": "947c",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "ddb6",
      "039c"
    ]
  },
  "25e1": {
    "id": "25e1",
    "label": "groupBy"
  },
  "c5bb": {
    "id": "c5bb",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "25e1"
    ]
  },
  "4c02": {
    "id": "4c02",
    "label": "I want to group the values",
    "options": [
      "4590",
      "4c1a",
      "8c97",
      "fe61",
      "cbf0",
      "d9ea",
      "c0dc",
      "947c",
      "c5bb"
    ]
  },
  "3ffa": {
    "id": "3ffa",
    "label": "mergeMapTo"
  },
  "f39c": {
    "id": "f39c",
    "label": "mergeMap"
  },
  "d3fe": {
    "id": "d3fe",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "f39c"
    ]
  },
  "9f15": {
    "id": "9f15",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "3693",
      "d3fe"
    ]
  },
  "e251": {
    "id": "e251",
    "label": "concatMapTo"
  },
  "495d": {
    "id": "495d",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e251"
    ]
  },
  "1faa": {
    "id": "1faa",
    "label": "concatMap"
  },
  "e80d": {
    "id": "e80d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "1faa"
    ]
  },
  "75bc": {
    "id": "75bc",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "495d",
      "e80d"
    ]
  },
  "a48c": {
    "id": "a48c",
    "label": "switchMapTo"
  },
  "d8dd": {
    "id": "d8dd",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "a48c"
    ]
  },
  "715f": {
    "id": "715f",
    "label": "switchMap"
  },
  "f271": {
    "id": "f271",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "715f"
    ]
  },
  "4ada": {
    "id": "4ada",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "d8dd",
      "f271"
    ]
  },
  "5e30": {
    "id": "5e30",
    "label": "exhaustMap"
  },
  "c9b1": {
    "id": "c9b1",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "5e30"
    ]
  },
  "731f": {
    "id": "731f",
    "label": "expand"
  },
  "a39a": {
    "id": "a39a",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "731f"
    ]
  },
  "6c63": {
    "id": "6c63",
    "label": "I want to start a new Observable for each value",
    "options": [
      "9f15",
      "75bc",
      "4ada",
      "c9b1",
      "a39a"
    ]
  },
  "67cf": {
    "id": "67cf",
    "label": "I want to perform custom operations",
    "options": [
      "3488"
    ]
  },
  "c1b5": {
    "id": "c1b5",
    "label": "share"
  },
  "4e35": {
    "id": "4e35",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "c1b5"
    ]
  },
  "ca34": {
    "id": "ca34",
    "label": "publish"
  },
  "fd89": {
    "id": "fd89",
    "label": "and start it manually or imperatively",
    "options": [
      "ca34"
    ]
  },
  "8e53": {
    "id": "8e53",
    "label": "using a conventional Subject",
    "options": [
      "4e35",
      "fd89"
    ]
  },
  "842c": {
    "id": "842c",
    "label": "publishBehavior"
  },
  "df2a": {
    "id": "df2a",
    "label": "using a BehaviorSubject",
    "options": [
      "842c"
    ]
  },
  "fdc0": {
    "id": "fdc0",
    "label": "publishReplay"
  },
  "8cc5": {
    "id": "8cc5",
    "label": "using a ReplaySubject",
    "options": [
      "fdc0"
    ]
  },
  "800a": {
    "id": "800a",
    "label": "publishLast"
  },
  "b1ee": {
    "id": "b1ee",
    "label": "using an AsyncSubject",
    "options": [
      "800a"
    ]
  },
  "76ac": {
    "id": "76ac",
    "label": "multicast"
  },
  "af18": {
    "id": "af18",
    "label": "using a specific subject implementation",
    "options": [
      "76ac"
    ]
  },
  "fb8e": {
    "id": "fb8e",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "8e53",
      "df2a",
      "8cc5",
      "b1ee",
      "af18"
    ]
  },
  "c01e": {
    "id": "c01e",
    "label": "catchError"
  },
  "1ecf": {
    "id": "1ecf",
    "label": "I want to start a new Observable",
    "options": [
      "c01e"
    ]
  },
  "0982": {
    "id": "0982",
    "label": "retry"
  },
  "d73f": {
    "id": "d73f",
    "label": "when another Observable emits",
    "options": [
      "7430"
    ]
  },
  "73be": {
    "id": "73be",
    "label": "I want to re-subscribe",
    "options": [
      "7984",
      "d73f"
    ]
  },
  "76cb": {
    "id": "76cb",
    "label": "repeat"
  },
  "35d7": {
    "id": "35d7",
    "label": "I want to re-subscribe",
    "options": [
      "2562",
      "2038"
    ]
  },
  "0ba6": {
    "id": "0ba6",
    "label": "I want to start a new Observable",
    "options": [
      "6943"
    ]
  },
  "555e": {
    "id": "555e",
    "label": "when it completes",
    "options": [
      "35d7",
      "0ba6"
    ]
  },
  "04ad": {
    "id": "04ad",
    "label": "finalize"
  },
  "f545": {
    "id": "f545",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "04ad"
    ]
  },
  "0375": {
    "id": "0375",
    "label": "that routes calls to subscribe",
    "options": [
      "2200"
    ]
  },
  "5ca8": {
    "id": "5ca8",
    "label": "observeOn"
  },
  "8ee7": {
    "id": "8ee7",
    "label": "I want to change the scheduler",
    "options": [
      "0375",
      "2432"
    ]
  },
  "3af0": {
    "id": "3af0",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "9849"
    ]
  },
  "7f42": {
    "id": "7f42",
    "label": "I want to output the values from either of them",
    "options": [
      "4367"
    ]
  },
  "b3bd": {
    "id": "b3bd",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "5450"
    ]
  },
  "91d3": {
    "id": "91d3",
    "label": "withLatestFrom"
  },
  "4d32": {
    "id": "4d32",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "91d3"
    ]
  },
  "d656": {
    "id": "d656",
    "label": "zip"
  },
  "882a": {
    "id": "882a",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "b3bd",
      "4d32",
      "2020"
    ]
  },
  "8d30": {
    "id": "8d30",
    "label": "I have one existing Observable, and",
    "options": [
      "d756",
      "04c8",
      "b617",
      "82da",
      "a4cf",
      "0936",
      "83a0",
      "a1d3",
      "12d5",
      "0d22",
      "0f43",
      "fe74",
      "4c02",
      "6c63",
      "67cf",
      "fb8e",
      "1843",
      "555e",
      "f545",
      "8ee7",
      "1347"
    ]
  },
  "bcfa": {
    "id": "bcfa",
    "label": "race"
  },
  "867f": {
    "id": "867f",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "bcfa"
    ]
  },
  "dbd2": {
    "id": "dbd2",
    "label": "forkJoin"
  },
  "c038": {
    "id": "c038",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "dbd2"
    ]
  },
  "8c49": {
    "id": "8c49",
    "label": "merge"
  },
  "e46a": {
    "id": "e46a",
    "label": "I want to output the values from either of them",
    "options": [
      "8c49"
    ]
  },
  "b8ca": {
    "id": "b8ca",
    "label": "combineLatest"
  },
  "eba7": {
    "id": "eba7",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "b8ca"
    ]
  },
  "d3cd": {
    "id": "d3cd",
    "label": "zip"
  },
  "f86d": {
    "id": "f86d",
    "label": "using each source value only once",
    "options": [
      "d3cd"
    ]
  },
  "e2fe": {
    "id": "e2fe",
    "label": "concat"
  },
  "320e": {
    "id": "320e",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "867f",
      "c038",
      "e46a",
      "2299",
      "f4e9"
    ]
  },
  "b4f5": {
    "id": "b4f5",
    "label": "Observable",
    "method": "create"
  },
  "14c7": {
    "id": "14c7",
    "label": "using custom logic",
    "options": [
      "b4f5"
    ]
  },
  "752a": {
    "id": "752a",
    "label": "generate"
  },
  "716e": {
    "id": "716e",
    "label": "using a state machine similar to a for loop",
    "options": [
      "752a"
    ]
  },
  "426b": {
    "id": "426b",
    "label": "throwError"
  },
  "c9e1": {
    "id": "c9e1",
    "label": "that throws an error",
    "options": [
      "426b"
    ]
  },
  "8bb6": {
    "id": "8bb6",
    "label": "that just completes, without emitting values",
    "options": [
      "7477"
    ]
  },
  "28b2": {
    "id": "28b2",
    "label": "NEVER"
  },
  "0eea": {
    "id": "0eea",
    "label": "fromEvent"
  },
  "b1a8": {
    "id": "b1a8",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "0eea"
    ]
  },
  "5d5d": {
    "id": "5d5d",
    "label": "fromEventPattern"
  },
  "5f2e": {
    "id": "5f2e",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "5d5d"
    ]
  },
  "dcf5": {
    "id": "dcf5",
    "label": "from an existing source of events",
    "options": [
      "b1a8",
      "5f2e"
    ]
  },
  "6ec1": {
    "id": "6ec1",
    "label": "from"
  },
  "094a": {
    "id": "094a",
    "label": "over the values in an array",
    "options": [
      "6ec1"
    ]
  },
  "e312": {
    "id": "e312",
    "label": "over values in a numeric range",
    "options": [
      "4477"
    ]
  },
  "d536": {
    "id": "d536",
    "label": "of"
  },
  "937a": {
    "id": "937a",
    "label": "over prefined values given as arguments",
    "options": [
      "d536"
    ]
  },
  "9efb": {
    "id": "9efb",
    "label": "that iterates",
    "options": [
      "094a",
      "e312",
      "937a"
    ]
  },
  "ddce": {
    "id": "ddce",
    "label": "interval"
  },
  "04b0": {
    "id": "04b0",
    "label": "with an optional initial delay",
    "options": [
      "1413"
    ]
  },
  "d4a2": {
    "id": "d4a2",
    "label": "defer"
  },
  "e0c4": {
    "id": "e0c4",
    "label": "which is built on demand when subscribed",
    "options": [
      "d4a2"
    ]
  },
  "4e97": {
    "id": "4e97",
    "label": "I want to create a new Observable",
    "options": [
      "14c7",
      "716e",
      "c9e1",
      "8bb6",
      "5545",
      "dcf5",
      "9849",
      "9efb",
      "1564",
      "e0c4"
    ]
  },
  "a12e": {
    "id": "a12e",
    "label": "bindCallback"
  },
  "1dca": {
    "id": "1dca",
    "label": "supporting a conventional callback API",
    "options": [
      "a12e"
    ]
  },
  "3e5e": {
    "id": "3e5e",
    "label": "bindNodeCallback"
  },
  "8f8a": {
    "id": "8f8a",
    "label": "supporting Node.js callback style API",
    "options": [
      "3e5e"
    ]
  },
  "0656": {
    "id": "0656",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "1dca",
      "8f8a"
    ]
  },
  "d2f6": {
    "id": "d2f6",
    "label": "I have no Observables yet, and",
    "options": [
      "4e97",
      "0656"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "8d30",
      "320e",
      "d2f6"
    ]
  }
}