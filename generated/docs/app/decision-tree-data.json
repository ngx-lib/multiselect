{
  "1065": {
    "id": "1065",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "eed1"
    ]
  },
  "1677": {
    "id": "1677",
    "label": "in batches of a particular size",
    "options": [
      "beac",
      "3439"
    ]
  },
  "2584": {
    "id": "2584",
    "label": "and emit the group as an array",
    "options": [
      "82f9"
    ]
  },
  "2839": {
    "id": "2839",
    "label": "based on a given amount of time",
    "options": [
      "5667"
    ]
  },
  "3439": {
    "id": "3439",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8bef"
    ]
  },
  "3476": {
    "id": "3476",
    "label": "from"
  },
  "3775": {
    "id": "3775",
    "label": "windowTime"
  },
  "4342": {
    "id": "4342",
    "label": "startWith"
  },
  "5292": {
    "id": "5292",
    "label": "and emit the group as an array",
    "options": [
      "228f"
    ]
  },
  "5388": {
    "id": "5388",
    "label": "skip"
  },
  "5447": {
    "id": "5447",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "d6d5"
    ]
  },
  "5578": {
    "id": "5578",
    "label": "publishReplay"
  },
  "5667": {
    "id": "5667",
    "label": "delay"
  },
  "5754": {
    "id": "5754",
    "label": "by emitting the first value in each time window",
    "options": [
      "dcd2",
      "b3fe"
    ]
  },
  "6161": {
    "id": "6161",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "e147"
    ]
  },
  "6346": {
    "id": "6346",
    "label": "until another Observable emits a value",
    "options": [
      "426d"
    ]
  },
  "6570": {
    "id": "6570",
    "label": "from"
  },
  "6614": {
    "id": "6614",
    "label": "I want to allow some values to pass",
    "options": [
      "574f",
      "4f7d",
      "b8f4",
      "1a74",
      "7477"
    ]
  },
  "6847": {
    "id": "6847",
    "label": "by emitting the last value in each time window",
    "options": [
      "6161",
      "edcf"
    ]
  },
  "6860": {
    "id": "6860",
    "label": "of"
  },
  "7477": {
    "id": "7477",
    "label": "until another Observable emits a value",
    "options": [
      "dd67"
    ]
  },
  "7849": {
    "id": "7849",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "5b82"
    ]
  },
  "8220": {
    "id": "8220",
    "label": "timer"
  },
  "8239": {
    "id": "8239",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "499f",
      "e7f2"
    ]
  },
  "8260": {
    "id": "8260",
    "label": "that routes values to observers",
    "options": [
      "cee1"
    ]
  },
  "8620": {
    "id": "8620",
    "label": "bufferWhen"
  },
  "8663": {
    "id": "8663",
    "label": "using each source value only once",
    "options": [
      "433c"
    ]
  },
  "9117": {
    "id": "9117",
    "label": "and start it manually or imperatively",
    "options": [
      "6aae"
    ]
  },
  "9326": {
    "id": "9326",
    "label": "merge"
  },
  "9966": {
    "id": "9966",
    "label": "over values in a numeric range",
    "options": [
      "3b80"
    ]
  },
  "73c6": {
    "id": "73c6",
    "label": "mapTo"
  },
  "3afa": {
    "id": "3afa",
    "label": "to be a constant value",
    "options": [
      "73c6"
    ]
  },
  "21c4": {
    "id": "21c4",
    "label": "map"
  },
  "f1cd": {
    "id": "f1cd",
    "label": "to be a value calculated through a formula",
    "options": [
      "21c4"
    ]
  },
  "c91d": {
    "id": "c91d",
    "label": "I want to change each emitted value",
    "options": [
      "3afa",
      "f1cd"
    ]
  },
  "3eff": {
    "id": "3eff",
    "label": "pluck"
  },
  "2c79": {
    "id": "2c79",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "3eff"
    ]
  },
  "5b59": {
    "id": "5b59",
    "label": "tap"
  },
  "9c1c": {
    "id": "9c1c",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "5b59"
    ]
  },
  "5adf": {
    "id": "5adf",
    "label": "filter"
  },
  "574f": {
    "id": "574f",
    "label": "based on custom logic",
    "options": [
      "5adf"
    ]
  },
  "79dc": {
    "id": "79dc",
    "label": "first"
  },
  "94b2": {
    "id": "94b2",
    "label": "and only the first value",
    "options": [
      "79dc"
    ]
  },
  "2e4a": {
    "id": "2e4a",
    "label": "take"
  },
  "405e": {
    "id": "405e",
    "label": "based on a given amount",
    "options": [
      "2e4a"
    ]
  },
  "d216": {
    "id": "d216",
    "label": "takeWhile"
  },
  "64ba": {
    "id": "64ba",
    "label": "based on custom logic",
    "options": [
      "d216"
    ]
  },
  "4f7d": {
    "id": "4f7d",
    "label": "if they are at the start of the Observable",
    "options": [
      "94b2",
      "405e",
      "64ba"
    ]
  },
  "b920": {
    "id": "b920",
    "label": "elementAt"
  },
  "b8f4": {
    "id": "b8f4",
    "label": "if they are exactly the n-th emission",
    "options": [
      "b920"
    ]
  },
  "5d75": {
    "id": "5d75",
    "label": "last"
  },
  "1b4d": {
    "id": "1b4d",
    "label": "and only the last value",
    "options": [
      "5d75"
    ]
  },
  "bb57": {
    "id": "bb57",
    "label": "takeLast"
  },
  "d655": {
    "id": "d655",
    "label": "based on a given amount",
    "options": [
      "bb57"
    ]
  },
  "1a74": {
    "id": "1a74",
    "label": "if they are at the end of the Observable",
    "options": [
      "1b4d",
      "d655"
    ]
  },
  "dd67": {
    "id": "dd67",
    "label": "takeUntil"
  },
  "112b": {
    "id": "112b",
    "label": "ignoreElements"
  },
  "8b89": {
    "id": "8b89",
    "label": "altogether",
    "options": [
      "112b"
    ]
  },
  "a82a": {
    "id": "a82a",
    "label": "based on a given amount",
    "options": [
      "5388"
    ]
  },
  "0e63": {
    "id": "0e63",
    "label": "skipWhile"
  },
  "76c1": {
    "id": "76c1",
    "label": "based on custom logic",
    "options": [
      "0e63"
    ]
  },
  "3fcd": {
    "id": "3fcd",
    "label": "from the start of the Observable",
    "options": [
      "a82a",
      "76c1"
    ]
  },
  "94e2": {
    "id": "94e2",
    "label": "skipLast"
  },
  "128f": {
    "id": "128f",
    "label": "from the end of the Observable",
    "options": [
      "94e2"
    ]
  },
  "426d": {
    "id": "426d",
    "label": "skipUntil"
  },
  "acf6": {
    "id": "acf6",
    "label": "distinctUntilChanged"
  },
  "68a4": {
    "id": "68a4",
    "label": "emitted just before the current value",
    "options": [
      "acf6"
    ]
  },
  "7cfc": {
    "id": "7cfc",
    "label": "distinct"
  },
  "fba7": {
    "id": "fba7",
    "label": "emitted some time in the past",
    "options": [
      "7cfc"
    ]
  },
  "f255": {
    "id": "f255",
    "label": "according to value equality",
    "options": [
      "68a4",
      "fba7"
    ]
  },
  "837e": {
    "id": "837e",
    "label": "distinctUntilKeyChanged"
  },
  "1ba5": {
    "id": "1ba5",
    "label": "emitted just before the current value",
    "options": [
      "837e"
    ]
  },
  "11dc": {
    "id": "11dc",
    "label": "according to a key or object property",
    "options": [
      "1ba5"
    ]
  },
  "e124": {
    "id": "e124",
    "label": "that match some previous value",
    "options": [
      "f255",
      "11dc"
    ]
  },
  "3b0f": {
    "id": "3b0f",
    "label": "throttle"
  },
  "dcd2": {
    "id": "dcd2",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "3b0f"
    ]
  },
  "dd66": {
    "id": "dd66",
    "label": "throttleTime"
  },
  "b3fe": {
    "id": "b3fe",
    "label": "where time windows are determined by a time duration",
    "options": [
      "dd66"
    ]
  },
  "e147": {
    "id": "e147",
    "label": "audit"
  },
  "f9df": {
    "id": "f9df",
    "label": "auditTime"
  },
  "edcf": {
    "id": "edcf",
    "label": "where time windows are determined by a time duration",
    "options": [
      "f9df"
    ]
  },
  "5cd8": {
    "id": "5cd8",
    "label": "debounce"
  },
  "8c4c": {
    "id": "8c4c",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "5cd8"
    ]
  },
  "938f": {
    "id": "938f",
    "label": "debounceTime"
  },
  "60d0": {
    "id": "60d0",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "938f"
    ]
  },
  "6b90": {
    "id": "6b90",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "8c4c",
      "60d0"
    ]
  },
  "240a": {
    "id": "240a",
    "label": "that occur too frequently",
    "options": [
      "5754",
      "6847",
      "6b90"
    ]
  },
  "929d": {
    "id": "929d",
    "label": "I want to ignore values",
    "options": [
      "8b89",
      "3fcd",
      "128f",
      "6346",
      "e124",
      "240a"
    ]
  },
  "b96a": {
    "id": "b96a",
    "label": "reduce"
  },
  "19ad": {
    "id": "19ad",
    "label": "and only output the final computed value",
    "options": [
      "b96a"
    ]
  },
  "5b82": {
    "id": "5b82",
    "label": "scan"
  },
  "e15d": {
    "id": "e15d",
    "label": "mergeScan"
  },
  "c5ad": {
    "id": "c5ad",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "e15d"
    ]
  },
  "687a": {
    "id": "687a",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "19ad",
      "7849",
      "c5ad"
    ]
  },
  "3ea8": {
    "id": "3ea8",
    "label": "materialize"
  },
  "657d": {
    "id": "657d",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "3ea8"
    ]
  },
  "5e40": {
    "id": "5e40",
    "label": "timeInterval"
  },
  "ae2f": {
    "id": "ae2f",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "5e40"
    ]
  },
  "c9d8": {
    "id": "c9d8",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "657d",
      "ae2f"
    ]
  },
  "e03c": {
    "id": "e03c",
    "label": "timeout"
  },
  "46b2": {
    "id": "46b2",
    "label": "I want to throw an error",
    "options": [
      "e03c"
    ]
  },
  "ecda": {
    "id": "ecda",
    "label": "timeoutWith"
  },
  "90bf": {
    "id": "90bf",
    "label": "I want to switch to another Observable",
    "options": [
      "ecda"
    ]
  },
  "0733": {
    "id": "0733",
    "label": "after a period of inactivity",
    "options": [
      "46b2",
      "90bf"
    ]
  },
  "1de7": {
    "id": "1de7",
    "label": "single"
  },
  "e45a": {
    "id": "e45a",
    "label": "I want to ensure there is only one value",
    "options": [
      "1de7"
    ]
  },
  "797f": {
    "id": "797f",
    "label": "count"
  },
  "f31c": {
    "id": "f31c",
    "label": "I want to know how many values it emits",
    "options": [
      "797f"
    ]
  },
  "d9bb": {
    "id": "d9bb",
    "label": "I want to prepend one value",
    "options": [
      "4342"
    ]
  },
  "cd0a": {
    "id": "cd0a",
    "label": "delayWhen"
  },
  "a3e6": {
    "id": "a3e6",
    "label": "based on the emissions of another Observable",
    "options": [
      "cd0a"
    ]
  },
  "f670": {
    "id": "f670",
    "label": "I want to delay the emissions",
    "options": [
      "2839",
      "a3e6"
    ]
  },
  "4e30": {
    "id": "4e30",
    "label": "toArray"
  },
  "1efc": {
    "id": "1efc",
    "label": "and convert to an array",
    "options": [
      "4e30"
    ]
  },
  "f048": {
    "id": "f048",
    "label": "Observable",
    "method": "toPromise"
  },
  "f020": {
    "id": "f020",
    "label": "and convert to a Promise",
    "options": [
      "f048"
    ]
  },
  "8dcb": {
    "id": "8dcb",
    "label": "until the Observable completes",
    "options": [
      "1efc",
      "f020"
    ]
  },
  "06a9": {
    "id": "06a9",
    "label": "pairwise"
  },
  "7be3": {
    "id": "7be3",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "06a9"
    ]
  },
  "eed1": {
    "id": "eed1",
    "label": "partition"
  },
  "7d2f": {
    "id": "7d2f",
    "label": "bufferCount"
  },
  "beac": {
    "id": "beac",
    "label": "and emit the group as an array",
    "options": [
      "7d2f"
    ]
  },
  "8bef": {
    "id": "8bef",
    "label": "windowCount"
  },
  "228f": {
    "id": "228f",
    "label": "bufferTime"
  },
  "0d79": {
    "id": "0d79",
    "label": "and emit the group as a nested Observable",
    "options": [
      "3775"
    ]
  },
  "ed47": {
    "id": "ed47",
    "label": "based on time",
    "options": [
      "5292",
      "0d79"
    ]
  },
  "c4f6": {
    "id": "c4f6",
    "label": "buffer"
  },
  "ff2f": {
    "id": "ff2f",
    "label": "and emit the group as an array",
    "options": [
      "c4f6"
    ]
  },
  "e426": {
    "id": "e426",
    "label": "window"
  },
  "b92b": {
    "id": "b92b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e426"
    ]
  },
  "f3d1": {
    "id": "f3d1",
    "label": "until another Observable emits",
    "options": [
      "ff2f",
      "b92b"
    ]
  },
  "499f": {
    "id": "499f",
    "label": "and emit the group as an array",
    "options": [
      "8620"
    ]
  },
  "472b": {
    "id": "472b",
    "label": "windowWhen"
  },
  "e7f2": {
    "id": "e7f2",
    "label": "and emit the group as a nested Observable",
    "options": [
      "472b"
    ]
  },
  "82f9": {
    "id": "82f9",
    "label": "bufferToggle"
  },
  "e3e1": {
    "id": "e3e1",
    "label": "windowToggle"
  },
  "f279": {
    "id": "f279",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e3e1"
    ]
  },
  "12aa": {
    "id": "12aa",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "2584",
      "f279"
    ]
  },
  "5c18": {
    "id": "5c18",
    "label": "groupBy"
  },
  "09dd": {
    "id": "09dd",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "5c18"
    ]
  },
  "7f6d": {
    "id": "7f6d",
    "label": "I want to group the values",
    "options": [
      "8dcb",
      "7be3",
      "1065",
      "1677",
      "ed47",
      "f3d1",
      "8239",
      "12aa",
      "09dd"
    ]
  },
  "82b8": {
    "id": "82b8",
    "label": "mergeMapTo"
  },
  "5a32": {
    "id": "5a32",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "82b8"
    ]
  },
  "e6e1": {
    "id": "e6e1",
    "label": "mergeMap"
  },
  "eff0": {
    "id": "eff0",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "e6e1"
    ]
  },
  "6b67": {
    "id": "6b67",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "5a32",
      "eff0"
    ]
  },
  "bc38": {
    "id": "bc38",
    "label": "concatMapTo"
  },
  "4dc9": {
    "id": "4dc9",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "bc38"
    ]
  },
  "7b4b": {
    "id": "7b4b",
    "label": "concatMap"
  },
  "0aed": {
    "id": "0aed",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7b4b"
    ]
  },
  "7cc9": {
    "id": "7cc9",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "4dc9",
      "0aed"
    ]
  },
  "c033": {
    "id": "c033",
    "label": "switchMapTo"
  },
  "c49f": {
    "id": "c49f",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "c033"
    ]
  },
  "d6d5": {
    "id": "d6d5",
    "label": "switchMap"
  },
  "24ca": {
    "id": "24ca",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "c49f",
      "5447"
    ]
  },
  "5aff": {
    "id": "5aff",
    "label": "exhaustMap"
  },
  "b1aa": {
    "id": "b1aa",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "5aff"
    ]
  },
  "ada5": {
    "id": "ada5",
    "label": "expand"
  },
  "fb6c": {
    "id": "fb6c",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "ada5"
    ]
  },
  "20ca": {
    "id": "20ca",
    "label": "I want to start a new Observable for each value",
    "options": [
      "6b67",
      "7cc9",
      "24ca",
      "b1aa",
      "fb6c"
    ]
  },
  "79ef": {
    "id": "79ef",
    "label": "pipe"
  },
  "a242": {
    "id": "a242",
    "label": "I want to perform custom operations",
    "options": [
      "79ef"
    ]
  },
  "e8a7": {
    "id": "e8a7",
    "label": "share"
  },
  "fbb0": {
    "id": "fbb0",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "e8a7"
    ]
  },
  "6aae": {
    "id": "6aae",
    "label": "publish"
  },
  "c4d0": {
    "id": "c4d0",
    "label": "using a conventional Subject",
    "options": [
      "fbb0",
      "9117"
    ]
  },
  "d1f2": {
    "id": "d1f2",
    "label": "publishBehavior"
  },
  "ce74": {
    "id": "ce74",
    "label": "using a BehaviorSubject",
    "options": [
      "d1f2"
    ]
  },
  "96ce": {
    "id": "96ce",
    "label": "using a ReplaySubject",
    "options": [
      "5578"
    ]
  },
  "f9f2": {
    "id": "f9f2",
    "label": "publishLast"
  },
  "28f1": {
    "id": "28f1",
    "label": "using an AsyncSubject",
    "options": [
      "f9f2"
    ]
  },
  "fe7a": {
    "id": "fe7a",
    "label": "multicast"
  },
  "d043": {
    "id": "d043",
    "label": "using a specific subject implementation",
    "options": [
      "fe7a"
    ]
  },
  "6fb6": {
    "id": "6fb6",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "c4d0",
      "ce74",
      "96ce",
      "28f1",
      "d043"
    ]
  },
  "670b": {
    "id": "670b",
    "label": "catchError"
  },
  "fab5": {
    "id": "fab5",
    "label": "I want to start a new Observable",
    "options": [
      "670b"
    ]
  },
  "e353": {
    "id": "e353",
    "label": "retry"
  },
  "ecd0": {
    "id": "ecd0",
    "label": "immediately",
    "options": [
      "e353"
    ]
  },
  "6df1": {
    "id": "6df1",
    "label": "retryWhen"
  },
  "b33b": {
    "id": "b33b",
    "label": "when another Observable emits",
    "options": [
      "6df1"
    ]
  },
  "c833": {
    "id": "c833",
    "label": "I want to re-subscribe",
    "options": [
      "ecd0",
      "b33b"
    ]
  },
  "5ecb": {
    "id": "5ecb",
    "label": "when an error occurs",
    "options": [
      "fab5",
      "c833"
    ]
  },
  "c984": {
    "id": "c984",
    "label": "repeat"
  },
  "21ea": {
    "id": "21ea",
    "label": "immediately",
    "options": [
      "c984"
    ]
  },
  "b5d4": {
    "id": "b5d4",
    "label": "repeatWhen"
  },
  "3a1d": {
    "id": "3a1d",
    "label": "when another Observable emits",
    "options": [
      "b5d4"
    ]
  },
  "5b57": {
    "id": "5b57",
    "label": "I want to re-subscribe",
    "options": [
      "21ea",
      "3a1d"
    ]
  },
  "cdc8": {
    "id": "cdc8",
    "label": "concat"
  },
  "845a": {
    "id": "845a",
    "label": "I want to start a new Observable",
    "options": [
      "cdc8"
    ]
  },
  "f37b": {
    "id": "f37b",
    "label": "when it completes",
    "options": [
      "5b57",
      "845a"
    ]
  },
  "c52f": {
    "id": "c52f",
    "label": "finalize"
  },
  "f241": {
    "id": "f241",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "c52f"
    ]
  },
  "a085": {
    "id": "a085",
    "label": "subscribeOn"
  },
  "7b9c": {
    "id": "7b9c",
    "label": "that routes calls to subscribe",
    "options": [
      "a085"
    ]
  },
  "cee1": {
    "id": "cee1",
    "label": "observeOn"
  },
  "3b00": {
    "id": "3b00",
    "label": "I want to change the scheduler",
    "options": [
      "7b9c",
      "8260"
    ]
  },
  "b85a": {
    "id": "b85a",
    "label": "race"
  },
  "14c5": {
    "id": "14c5",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "b85a"
    ]
  },
  "bbb9": {
    "id": "bbb9",
    "label": "I want to output the values from either of them",
    "options": [
      "9326"
    ]
  },
  "d851": {
    "id": "d851",
    "label": "combineLatest"
  },
  "09a6": {
    "id": "09a6",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "d851"
    ]
  },
  "980e": {
    "id": "980e",
    "label": "withLatestFrom"
  },
  "370b": {
    "id": "370b",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "980e"
    ]
  },
  "433c": {
    "id": "433c",
    "label": "zip"
  },
  "c927": {
    "id": "c927",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "09a6",
      "370b",
      "8663"
    ]
  },
  "2e6a": {
    "id": "2e6a",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "14c5",
      "bbb9",
      "c927"
    ]
  },
  "e1e8": {
    "id": "e1e8",
    "label": "I have one existing Observable, and",
    "options": [
      "c91d",
      "2c79",
      "9c1c",
      "6614",
      "929d",
      "687a",
      "c9d8",
      "0733",
      "e45a",
      "f31c",
      "d9bb",
      "f670",
      "7f6d",
      "20ca",
      "a242",
      "6fb6",
      "5ecb",
      "f37b",
      "f241",
      "3b00",
      "2e6a"
    ]
  },
  "ca27": {
    "id": "ca27",
    "label": "race"
  },
  "ce53": {
    "id": "ce53",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "ca27"
    ]
  },
  "9f5b": {
    "id": "9f5b",
    "label": "forkJoin"
  },
  "32ec": {
    "id": "32ec",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "9f5b"
    ]
  },
  "a962": {
    "id": "a962",
    "label": "merge"
  },
  "9c5d": {
    "id": "9c5d",
    "label": "I want to output the values from either of them",
    "options": [
      "a962"
    ]
  },
  "db19": {
    "id": "db19",
    "label": "combineLatest"
  },
  "3a7a": {
    "id": "3a7a",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "db19"
    ]
  },
  "075c": {
    "id": "075c",
    "label": "zip"
  },
  "9d55": {
    "id": "9d55",
    "label": "using each source value only once",
    "options": [
      "075c"
    ]
  },
  "0d80": {
    "id": "0d80",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "3a7a",
      "9d55"
    ]
  },
  "5b8d": {
    "id": "5b8d",
    "label": "concat"
  },
  "00b4": {
    "id": "00b4",
    "label": "I want to subscribe to each in order",
    "options": [
      "5b8d"
    ]
  },
  "871b": {
    "id": "871b",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "ce53",
      "32ec",
      "9c5d",
      "0d80",
      "00b4"
    ]
  },
  "a2c2": {
    "id": "a2c2",
    "label": "Observable",
    "method": "create"
  },
  "df60": {
    "id": "df60",
    "label": "using custom logic",
    "options": [
      "a2c2"
    ]
  },
  "4f49": {
    "id": "4f49",
    "label": "generate"
  },
  "af1e": {
    "id": "af1e",
    "label": "using a state machine similar to a for loop",
    "options": [
      "4f49"
    ]
  },
  "fc13": {
    "id": "fc13",
    "label": "throwError"
  },
  "269e": {
    "id": "269e",
    "label": "that throws an error",
    "options": [
      "fc13"
    ]
  },
  "39ab": {
    "id": "39ab",
    "label": "EMPTY"
  },
  "8c9e": {
    "id": "8c9e",
    "label": "that just completes, without emitting values",
    "options": [
      "39ab"
    ]
  },
  "c40a": {
    "id": "c40a",
    "label": "NEVER"
  },
  "1ed8": {
    "id": "1ed8",
    "label": "that never emits anything",
    "options": [
      "c40a"
    ]
  },
  "83b1": {
    "id": "83b1",
    "label": "fromEvent"
  },
  "aef7": {
    "id": "aef7",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "83b1"
    ]
  },
  "a943": {
    "id": "a943",
    "label": "fromEventPattern"
  },
  "f962": {
    "id": "f962",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "a943"
    ]
  },
  "b487": {
    "id": "b487",
    "label": "from an existing source of events",
    "options": [
      "aef7",
      "f962"
    ]
  },
  "45c7": {
    "id": "45c7",
    "label": "from a Promise or an event source",
    "options": [
      "3476"
    ]
  },
  "e46f": {
    "id": "e46f",
    "label": "over the values in an array",
    "options": [
      "6570"
    ]
  },
  "3b80": {
    "id": "3b80",
    "label": "range"
  },
  "e44d": {
    "id": "e44d",
    "label": "over prefined values given as arguments",
    "options": [
      "6860"
    ]
  },
  "c2e8": {
    "id": "c2e8",
    "label": "that iterates",
    "options": [
      "e46f",
      "9966",
      "e44d"
    ]
  },
  "048e": {
    "id": "048e",
    "label": "interval"
  },
  "18a6": {
    "id": "18a6",
    "label": "regularly",
    "options": [
      "048e"
    ]
  },
  "bdd0": {
    "id": "bdd0",
    "label": "with an optional initial delay",
    "options": [
      "8220"
    ]
  },
  "adcd": {
    "id": "adcd",
    "label": "that emits values on a timer",
    "options": [
      "18a6",
      "bdd0"
    ]
  },
  "ff37": {
    "id": "ff37",
    "label": "defer"
  },
  "a00f": {
    "id": "a00f",
    "label": "which is built on demand when subscribed",
    "options": [
      "ff37"
    ]
  },
  "db7e": {
    "id": "db7e",
    "label": "I want to create a new Observable",
    "options": [
      "df60",
      "af1e",
      "269e",
      "8c9e",
      "1ed8",
      "b487",
      "45c7",
      "c2e8",
      "adcd",
      "a00f"
    ]
  },
  "f331": {
    "id": "f331",
    "label": "bindCallback"
  },
  "7ef4": {
    "id": "7ef4",
    "label": "supporting a conventional callback API",
    "options": [
      "f331"
    ]
  },
  "31b9": {
    "id": "31b9",
    "label": "bindNodeCallback"
  },
  "416e": {
    "id": "416e",
    "label": "supporting Node.js callback style API",
    "options": [
      "31b9"
    ]
  },
  "7ce4": {
    "id": "7ce4",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "7ef4",
      "416e"
    ]
  },
  "b15e": {
    "id": "b15e",
    "label": "I have no Observables yet, and",
    "options": [
      "db7e",
      "7ce4"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "e1e8",
      "871b",
      "b15e"
    ]
  }
}