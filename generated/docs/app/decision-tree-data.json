{
  "1213": {
    "id": "1213",
    "label": "and emit the group as an array",
    "options": [
      "8f37"
    ]
  },
  "1229": {
    "id": "1229",
    "label": "repeat"
  },
  "1800": {
    "id": "1800",
    "label": "map"
  },
  "1834": {
    "id": "1834",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "d317"
    ]
  },
  "2119": {
    "id": "2119",
    "label": "bufferCount"
  },
  "2131": {
    "id": "2131",
    "label": "materialize"
  },
  "2368": {
    "id": "2368",
    "label": "share"
  },
  "2497": {
    "id": "2497",
    "label": "single"
  },
  "2516": {
    "id": "2516",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "b9e6"
    ]
  },
  "2678": {
    "id": "2678",
    "label": "throttle"
  },
  "2859": {
    "id": "2859",
    "label": "and emit the group as an array",
    "options": [
      "2119"
    ]
  },
  "3190": {
    "id": "3190",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "b3fe"
    ]
  },
  "3584": {
    "id": "3584",
    "label": "multicast"
  },
  "3858": {
    "id": "3858",
    "label": "toArray"
  },
  "4227": {
    "id": "4227",
    "label": "publishReplay"
  },
  "4304": {
    "id": "4304",
    "label": "publishLast"
  },
  "4417": {
    "id": "4417",
    "label": "I want to throw an error",
    "options": [
      "af4c"
    ]
  },
  "4581": {
    "id": "4581",
    "label": "supporting Node.js callback style API",
    "options": [
      "8ae3"
    ]
  },
  "4709": {
    "id": "4709",
    "label": "when an error occurs",
    "options": [
      "7250",
      "ee31"
    ]
  },
  "4813": {
    "id": "4813",
    "label": "fromEventPattern"
  },
  "5236": {
    "id": "5236",
    "label": "delayWhen"
  },
  "5651": {
    "id": "5651",
    "label": "takeWhile"
  },
  "5680": {
    "id": "5680",
    "label": "combineLatest"
  },
  "6021": {
    "id": "6021",
    "label": "mergeMap"
  },
  "6025": {
    "id": "6025",
    "label": "I want to re-subscribe",
    "options": [
      "0f42",
      "d1c7"
    ]
  },
  "6099": {
    "id": "6099",
    "label": "from the start of the Observable",
    "options": [
      "2da7",
      "2b4b"
    ]
  },
  "6124": {
    "id": "6124",
    "label": "in batches of a particular size",
    "options": [
      "2859",
      "392d"
    ]
  },
  "6216": {
    "id": "6216",
    "label": "I want to group the values",
    "options": [
      "a866",
      "057b",
      "d7db",
      "6124",
      "de47",
      "72a9",
      "b35f",
      "b953",
      "ebc1"
    ]
  },
  "6689": {
    "id": "6689",
    "label": "groupBy"
  },
  "6970": {
    "id": "6970",
    "label": "and start it manually or imperatively",
    "options": [
      "a67f"
    ]
  },
  "7225": {
    "id": "7225",
    "label": "using a ReplaySubject",
    "options": [
      "4227"
    ]
  },
  "7250": {
    "id": "7250",
    "label": "I want to start a new Observable",
    "options": [
      "1eb9"
    ]
  },
  "7315": {
    "id": "7315",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "471a"
    ]
  },
  "7343": {
    "id": "7343",
    "label": "where time windows are determined by a time duration",
    "options": [
      "cd1b"
    ]
  },
  "7456": {
    "id": "7456",
    "label": "combineLatest"
  },
  "7480": {
    "id": "7480",
    "label": "according to a key or object property",
    "options": [
      "19b2"
    ]
  },
  "7554": {
    "id": "7554",
    "label": "generate"
  },
  "7793": {
    "id": "7793",
    "label": "subscribeOn"
  },
  "8314": {
    "id": "8314",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "0cc4",
      "e10b",
      "4b63"
    ]
  },
  "8385": {
    "id": "8385",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "5680"
    ]
  },
  "8550": {
    "id": "8550",
    "label": "using an AsyncSubject",
    "options": [
      "4304"
    ]
  },
  "8621": {
    "id": "8621",
    "label": "I want to create a new Observable",
    "options": [
      "ef3c",
      "e4ca",
      "1f7d",
      "0777",
      "dfdf",
      "05eb",
      "101b",
      "114b",
      "69eb",
      "19c1"
    ]
  },
  "8838": {
    "id": "8838",
    "label": "from"
  },
  "8966": {
    "id": "8966",
    "label": "merge"
  },
  "8990": {
    "id": "8990",
    "label": "exhaustMap"
  },
  "9129": {
    "id": "9129",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b887"
    ]
  },
  "9258": {
    "id": "9258",
    "label": "where time windows are determined by a time duration",
    "options": [
      "e8ed"
    ]
  },
  "9300": {
    "id": "9300",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "04c6",
      "f19b"
    ]
  },
  "9777": {
    "id": "9777",
    "label": "mergeScan"
  },
  "9831": {
    "id": "9831",
    "label": "skipUntil"
  },
  "8e2d": {
    "id": "8e2d",
    "label": "mapTo"
  },
  "c617": {
    "id": "c617",
    "label": "to be a constant value",
    "options": [
      "8e2d"
    ]
  },
  "beb2": {
    "id": "beb2",
    "label": "to be a value calculated through a formula",
    "options": [
      "1800"
    ]
  },
  "10b9": {
    "id": "10b9",
    "label": "I want to change each emitted value",
    "options": [
      "c617",
      "beb2"
    ]
  },
  "d317": {
    "id": "d317",
    "label": "pluck"
  },
  "e07d": {
    "id": "e07d",
    "label": "tap"
  },
  "d602": {
    "id": "d602",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "e07d"
    ]
  },
  "a3a9": {
    "id": "a3a9",
    "label": "filter"
  },
  "25ce": {
    "id": "25ce",
    "label": "based on custom logic",
    "options": [
      "a3a9"
    ]
  },
  "1b72": {
    "id": "1b72",
    "label": "first"
  },
  "e01d": {
    "id": "e01d",
    "label": "and only the first value",
    "options": [
      "1b72"
    ]
  },
  "eeae": {
    "id": "eeae",
    "label": "take"
  },
  "3bc6": {
    "id": "3bc6",
    "label": "based on a given amount",
    "options": [
      "eeae"
    ]
  },
  "fddf": {
    "id": "fddf",
    "label": "based on custom logic",
    "options": [
      "5651"
    ]
  },
  "09a2": {
    "id": "09a2",
    "label": "if they are at the start of the Observable",
    "options": [
      "e01d",
      "3bc6",
      "fddf"
    ]
  },
  "1c49": {
    "id": "1c49",
    "label": "elementAt"
  },
  "30ba": {
    "id": "30ba",
    "label": "if they are exactly the n-th emission",
    "options": [
      "1c49"
    ]
  },
  "f6c5": {
    "id": "f6c5",
    "label": "last"
  },
  "448e": {
    "id": "448e",
    "label": "and only the last value",
    "options": [
      "f6c5"
    ]
  },
  "e8c9": {
    "id": "e8c9",
    "label": "takeLast"
  },
  "44e0": {
    "id": "44e0",
    "label": "based on a given amount",
    "options": [
      "e8c9"
    ]
  },
  "63bb": {
    "id": "63bb",
    "label": "if they are at the end of the Observable",
    "options": [
      "448e",
      "44e0"
    ]
  },
  "9fb1": {
    "id": "9fb1",
    "label": "takeUntil"
  },
  "40ec": {
    "id": "40ec",
    "label": "until another Observable emits a value",
    "options": [
      "9fb1"
    ]
  },
  "890f": {
    "id": "890f",
    "label": "I want to allow some values to pass",
    "options": [
      "25ce",
      "09a2",
      "30ba",
      "63bb",
      "40ec"
    ]
  },
  "b888": {
    "id": "b888",
    "label": "ignoreElements"
  },
  "36da": {
    "id": "36da",
    "label": "altogether",
    "options": [
      "b888"
    ]
  },
  "640a": {
    "id": "640a",
    "label": "skip"
  },
  "2da7": {
    "id": "2da7",
    "label": "based on a given amount",
    "options": [
      "640a"
    ]
  },
  "e98b": {
    "id": "e98b",
    "label": "skipWhile"
  },
  "2b4b": {
    "id": "2b4b",
    "label": "based on custom logic",
    "options": [
      "e98b"
    ]
  },
  "bc84": {
    "id": "bc84",
    "label": "skipLast"
  },
  "e133": {
    "id": "e133",
    "label": "from the end of the Observable",
    "options": [
      "bc84"
    ]
  },
  "9b48": {
    "id": "9b48",
    "label": "until another Observable emits a value",
    "options": [
      "9831"
    ]
  },
  "04ad": {
    "id": "04ad",
    "label": "distinctUntilChanged"
  },
  "dc9f": {
    "id": "dc9f",
    "label": "emitted just before the current value",
    "options": [
      "04ad"
    ]
  },
  "d79d": {
    "id": "d79d",
    "label": "distinct"
  },
  "5fb1": {
    "id": "5fb1",
    "label": "emitted some time in the past",
    "options": [
      "d79d"
    ]
  },
  "1eab": {
    "id": "1eab",
    "label": "according to value equality",
    "options": [
      "dc9f",
      "5fb1"
    ]
  },
  "82d9": {
    "id": "82d9",
    "label": "distinctUntilKeyChanged"
  },
  "19b2": {
    "id": "19b2",
    "label": "emitted just before the current value",
    "options": [
      "82d9"
    ]
  },
  "b87f": {
    "id": "b87f",
    "label": "that match some previous value",
    "options": [
      "1eab",
      "7480"
    ]
  },
  "de09": {
    "id": "de09",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "2678"
    ]
  },
  "e8ed": {
    "id": "e8ed",
    "label": "throttleTime"
  },
  "25a2": {
    "id": "25a2",
    "label": "by emitting the first value in each time window",
    "options": [
      "de09",
      "9258"
    ]
  },
  "c7ed": {
    "id": "c7ed",
    "label": "audit"
  },
  "bf8c": {
    "id": "bf8c",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "c7ed"
    ]
  },
  "cd1b": {
    "id": "cd1b",
    "label": "auditTime"
  },
  "7c8a": {
    "id": "7c8a",
    "label": "by emitting the last value in each time window",
    "options": [
      "bf8c",
      "7343"
    ]
  },
  "43e2": {
    "id": "43e2",
    "label": "debounce"
  },
  "5e70": {
    "id": "5e70",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "43e2"
    ]
  },
  "471a": {
    "id": "471a",
    "label": "debounceTime"
  },
  "fe19": {
    "id": "fe19",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "5e70",
      "7315"
    ]
  },
  "f97e": {
    "id": "f97e",
    "label": "that occur too frequently",
    "options": [
      "25a2",
      "7c8a",
      "fe19"
    ]
  },
  "0ef4": {
    "id": "0ef4",
    "label": "I want to ignore values",
    "options": [
      "36da",
      "6099",
      "e133",
      "9b48",
      "b87f",
      "f97e"
    ]
  },
  "a9cf": {
    "id": "a9cf",
    "label": "reduce"
  },
  "50f4": {
    "id": "50f4",
    "label": "and only output the final computed value",
    "options": [
      "a9cf"
    ]
  },
  "b9e6": {
    "id": "b9e6",
    "label": "scan"
  },
  "fc6f": {
    "id": "fc6f",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "9777"
    ]
  },
  "5c45": {
    "id": "5c45",
    "label": "NEVER"
  },
  "04c6": {
    "id": "04c6",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "2131"
    ]
  },
  "251b": {
    "id": "251b",
    "label": "timeInterval"
  },
  "f19b": {
    "id": "f19b",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "251b"
    ]
  },
  "af4c": {
    "id": "af4c",
    "label": "timeout"
  },
  "db2e": {
    "id": "db2e",
    "label": "timeoutWith"
  },
  "07ae": {
    "id": "07ae",
    "label": "I want to switch to another Observable",
    "options": [
      "db2e"
    ]
  },
  "767a": {
    "id": "767a",
    "label": "after a period of inactivity",
    "options": [
      "4417",
      "07ae"
    ]
  },
  "9d7c": {
    "id": "9d7c",
    "label": "I want to ensure there is only one value",
    "options": [
      "2497"
    ]
  },
  "a45a": {
    "id": "a45a",
    "label": "count"
  },
  "c620": {
    "id": "c620",
    "label": "I want to know how many values it emits",
    "options": [
      "a45a"
    ]
  },
  "0341": {
    "id": "0341",
    "label": "startWith"
  },
  "8f53": {
    "id": "8f53",
    "label": "I want to prepend one value",
    "options": [
      "0341"
    ]
  },
  "238a": {
    "id": "238a",
    "label": "delay"
  },
  "d997": {
    "id": "d997",
    "label": "based on a given amount of time",
    "options": [
      "238a"
    ]
  },
  "d877": {
    "id": "d877",
    "label": "based on the emissions of another Observable",
    "options": [
      "5236"
    ]
  },
  "d0dc": {
    "id": "d0dc",
    "label": "I want to delay the emissions",
    "options": [
      "d997",
      "d877"
    ]
  },
  "0894": {
    "id": "0894",
    "label": "and convert to an array",
    "options": [
      "3858"
    ]
  },
  "821e": {
    "id": "821e",
    "label": "Observable",
    "method": "toPromise"
  },
  "7b7b": {
    "id": "7b7b",
    "label": "and convert to a Promise",
    "options": [
      "821e"
    ]
  },
  "a866": {
    "id": "a866",
    "label": "until the Observable completes",
    "options": [
      "0894",
      "7b7b"
    ]
  },
  "a378": {
    "id": "a378",
    "label": "pairwise"
  },
  "057b": {
    "id": "057b",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "a378"
    ]
  },
  "7e3c": {
    "id": "7e3c",
    "label": "partition"
  },
  "d7db": {
    "id": "d7db",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "7e3c"
    ]
  },
  "8d19": {
    "id": "8d19",
    "label": "windowCount"
  },
  "392d": {
    "id": "392d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8d19"
    ]
  },
  "61a8": {
    "id": "61a8",
    "label": "bufferTime"
  },
  "8a6f": {
    "id": "8a6f",
    "label": "and emit the group as an array",
    "options": [
      "61a8"
    ]
  },
  "5e28": {
    "id": "5e28",
    "label": "windowTime"
  },
  "23af": {
    "id": "23af",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5e28"
    ]
  },
  "de47": {
    "id": "de47",
    "label": "based on time",
    "options": [
      "8a6f",
      "23af"
    ]
  },
  "3a9c": {
    "id": "3a9c",
    "label": "buffer"
  },
  "7e1c": {
    "id": "7e1c",
    "label": "and emit the group as an array",
    "options": [
      "3a9c"
    ]
  },
  "b887": {
    "id": "b887",
    "label": "window"
  },
  "72a9": {
    "id": "72a9",
    "label": "until another Observable emits",
    "options": [
      "7e1c",
      "9129"
    ]
  },
  "8f37": {
    "id": "8f37",
    "label": "bufferWhen"
  },
  "4c6d": {
    "id": "4c6d",
    "label": "windowWhen"
  },
  "69b8": {
    "id": "69b8",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4c6d"
    ]
  },
  "b35f": {
    "id": "b35f",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "1213",
      "69b8"
    ]
  },
  "0fa1": {
    "id": "0fa1",
    "label": "bufferToggle"
  },
  "afff": {
    "id": "afff",
    "label": "and emit the group as an array",
    "options": [
      "0fa1"
    ]
  },
  "a032": {
    "id": "a032",
    "label": "windowToggle"
  },
  "0f0a": {
    "id": "0f0a",
    "label": "and emit the group as a nested Observable",
    "options": [
      "a032"
    ]
  },
  "b953": {
    "id": "b953",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "afff",
      "0f0a"
    ]
  },
  "ebc1": {
    "id": "ebc1",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "6689"
    ]
  },
  "a598": {
    "id": "a598",
    "label": "mergeMapTo"
  },
  "337d": {
    "id": "337d",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "a598"
    ]
  },
  "a87c": {
    "id": "a87c",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "6021"
    ]
  },
  "cb15": {
    "id": "cb15",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "337d",
      "a87c"
    ]
  },
  "82d7": {
    "id": "82d7",
    "label": "concatMapTo"
  },
  "edbb": {
    "id": "edbb",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "82d7"
    ]
  },
  "c0dd": {
    "id": "c0dd",
    "label": "concatMap"
  },
  "045a": {
    "id": "045a",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c0dd"
    ]
  },
  "93dc": {
    "id": "93dc",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "edbb",
      "045a"
    ]
  },
  "6d6e": {
    "id": "6d6e",
    "label": "switchMapTo"
  },
  "69ab": {
    "id": "69ab",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6d6e"
    ]
  },
  "ed0d": {
    "id": "ed0d",
    "label": "switchMap"
  },
  "de8e": {
    "id": "de8e",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "ed0d"
    ]
  },
  "231a": {
    "id": "231a",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "69ab",
      "de8e"
    ]
  },
  "c1f1": {
    "id": "c1f1",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "8990"
    ]
  },
  "9b3f": {
    "id": "9b3f",
    "label": "expand"
  },
  "85fd": {
    "id": "85fd",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "9b3f"
    ]
  },
  "52d3": {
    "id": "52d3",
    "label": "I want to start a new Observable for each value",
    "options": [
      "cb15",
      "93dc",
      "231a",
      "c1f1",
      "85fd"
    ]
  },
  "66bc": {
    "id": "66bc",
    "label": "pipe"
  },
  "a6a6": {
    "id": "a6a6",
    "label": "I want to perform custom operations",
    "options": [
      "66bc"
    ]
  },
  "f8a0": {
    "id": "f8a0",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "2368"
    ]
  },
  "a67f": {
    "id": "a67f",
    "label": "publish"
  },
  "8d47": {
    "id": "8d47",
    "label": "using a conventional Subject",
    "options": [
      "f8a0",
      "6970"
    ]
  },
  "b10f": {
    "id": "b10f",
    "label": "publishBehavior"
  },
  "437f": {
    "id": "437f",
    "label": "using a BehaviorSubject",
    "options": [
      "b10f"
    ]
  },
  "614e": {
    "id": "614e",
    "label": "using a specific subject implementation",
    "options": [
      "3584"
    ]
  },
  "7b4f": {
    "id": "7b4f",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "8d47",
      "437f",
      "7225",
      "8550",
      "614e"
    ]
  },
  "1eb9": {
    "id": "1eb9",
    "label": "catchError"
  },
  "2b9e": {
    "id": "2b9e",
    "label": "retry"
  },
  "7e6e": {
    "id": "7e6e",
    "label": "immediately",
    "options": [
      "2b9e"
    ]
  },
  "76aa": {
    "id": "76aa",
    "label": "retryWhen"
  },
  "50b2": {
    "id": "50b2",
    "label": "when another Observable emits",
    "options": [
      "76aa"
    ]
  },
  "ee31": {
    "id": "ee31",
    "label": "I want to re-subscribe",
    "options": [
      "7e6e",
      "50b2"
    ]
  },
  "0f42": {
    "id": "0f42",
    "label": "immediately",
    "options": [
      "1229"
    ]
  },
  "c8de": {
    "id": "c8de",
    "label": "repeatWhen"
  },
  "d1c7": {
    "id": "d1c7",
    "label": "when another Observable emits",
    "options": [
      "c8de"
    ]
  },
  "ff48": {
    "id": "ff48",
    "label": "concat"
  },
  "c2c7": {
    "id": "c2c7",
    "label": "I want to start a new Observable",
    "options": [
      "ff48"
    ]
  },
  "100c": {
    "id": "100c",
    "label": "when it completes",
    "options": [
      "6025",
      "c2c7"
    ]
  },
  "b3fe": {
    "id": "b3fe",
    "label": "finalize"
  },
  "112e": {
    "id": "112e",
    "label": "that routes calls to subscribe",
    "options": [
      "7793"
    ]
  },
  "d852": {
    "id": "d852",
    "label": "observeOn"
  },
  "f1b3": {
    "id": "f1b3",
    "label": "that routes values to observers",
    "options": [
      "d852"
    ]
  },
  "633f": {
    "id": "633f",
    "label": "I want to change the scheduler",
    "options": [
      "112e",
      "f1b3"
    ]
  },
  "a05b": {
    "id": "a05b",
    "label": "race"
  },
  "0cc4": {
    "id": "0cc4",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "a05b"
    ]
  },
  "d2f3": {
    "id": "d2f3",
    "label": "merge"
  },
  "e10b": {
    "id": "e10b",
    "label": "I want to output the values from either of them",
    "options": [
      "d2f3"
    ]
  },
  "b623": {
    "id": "b623",
    "label": "withLatestFrom"
  },
  "3ec2": {
    "id": "3ec2",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "b623"
    ]
  },
  "1bcc": {
    "id": "1bcc",
    "label": "zip"
  },
  "a853": {
    "id": "a853",
    "label": "using each source value only once",
    "options": [
      "1bcc"
    ]
  },
  "4b63": {
    "id": "4b63",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "8385",
      "3ec2",
      "a853"
    ]
  },
  "ddf9": {
    "id": "ddf9",
    "label": "I have one existing Observable, and",
    "options": [
      "10b9",
      "1834",
      "d602",
      "890f",
      "0ef4",
      "5c45",
      "9300",
      "767a",
      "9d7c",
      "c620",
      "8f53",
      "d0dc",
      "6216",
      "52d3",
      "a6a6",
      "7b4f",
      "4709",
      "100c",
      "3190",
      "633f",
      "8314"
    ]
  },
  "fe11": {
    "id": "fe11",
    "label": "race"
  },
  "2df6": {
    "id": "2df6",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "fe11"
    ]
  },
  "cd45": {
    "id": "cd45",
    "label": "forkJoin"
  },
  "962b": {
    "id": "962b",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "cd45"
    ]
  },
  "440a": {
    "id": "440a",
    "label": "I want to output the values from either of them",
    "options": [
      "8966"
    ]
  },
  "1b40": {
    "id": "1b40",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "7456"
    ]
  },
  "ff90": {
    "id": "ff90",
    "label": "zip"
  },
  "72fe": {
    "id": "72fe",
    "label": "using each source value only once",
    "options": [
      "ff90"
    ]
  },
  "eecf": {
    "id": "eecf",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "1b40",
      "72fe"
    ]
  },
  "1ca9": {
    "id": "1ca9",
    "label": "concat"
  },
  "5c61": {
    "id": "5c61",
    "label": "I want to subscribe to each in order",
    "options": [
      "1ca9"
    ]
  },
  "bb55": {
    "id": "bb55",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "2df6",
      "962b",
      "440a",
      "eecf",
      "5c61"
    ]
  },
  "b979": {
    "id": "b979",
    "label": "Observable",
    "method": "create"
  },
  "ef3c": {
    "id": "ef3c",
    "label": "using custom logic",
    "options": [
      "b979"
    ]
  },
  "e4ca": {
    "id": "e4ca",
    "label": "using a state machine similar to a for loop",
    "options": [
      "7554"
    ]
  },
  "0167": {
    "id": "0167",
    "label": "throwError"
  },
  "1f7d": {
    "id": "1f7d",
    "label": "that throws an error",
    "options": [
      "0167"
    ]
  },
  "259b": {
    "id": "259b",
    "label": "EMPTY"
  },
  "0777": {
    "id": "0777",
    "label": "that just completes, without emitting values",
    "options": [
      "259b"
    ]
  },
  "dfdf": {
    "id": "dfdf",
    "label": "that never emits anything",
    "options": [
      "5c45"
    ]
  },
  "ad00": {
    "id": "ad00",
    "label": "fromEvent"
  },
  "add4": {
    "id": "add4",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "ad00"
    ]
  },
  "4a99": {
    "id": "4a99",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "4813"
    ]
  },
  "05eb": {
    "id": "05eb",
    "label": "from an existing source of events",
    "options": [
      "add4",
      "4a99"
    ]
  },
  "101b": {
    "id": "101b",
    "label": "from a Promise or an event source",
    "options": [
      "8838"
    ]
  },
  "8fd9": {
    "id": "8fd9",
    "label": "from"
  },
  "717d": {
    "id": "717d",
    "label": "over the values in an array",
    "options": [
      "8fd9"
    ]
  },
  "ced9": {
    "id": "ced9",
    "label": "range"
  },
  "0927": {
    "id": "0927",
    "label": "over values in a numeric range",
    "options": [
      "ced9"
    ]
  },
  "87ff": {
    "id": "87ff",
    "label": "of"
  },
  "5fda": {
    "id": "5fda",
    "label": "over prefined values given as arguments",
    "options": [
      "87ff"
    ]
  },
  "114b": {
    "id": "114b",
    "label": "that iterates",
    "options": [
      "717d",
      "0927",
      "5fda"
    ]
  },
  "9b0a": {
    "id": "9b0a",
    "label": "interval"
  },
  "5b1a": {
    "id": "5b1a",
    "label": "regularly",
    "options": [
      "9b0a"
    ]
  },
  "d873": {
    "id": "d873",
    "label": "timer"
  },
  "def7": {
    "id": "def7",
    "label": "with an optional initial delay",
    "options": [
      "d873"
    ]
  },
  "69eb": {
    "id": "69eb",
    "label": "that emits values on a timer",
    "options": [
      "5b1a",
      "def7"
    ]
  },
  "fd19": {
    "id": "fd19",
    "label": "defer"
  },
  "19c1": {
    "id": "19c1",
    "label": "which is built on demand when subscribed",
    "options": [
      "fd19"
    ]
  },
  "6b5f": {
    "id": "6b5f",
    "label": "bindCallback"
  },
  "b298": {
    "id": "b298",
    "label": "supporting a conventional callback API",
    "options": [
      "6b5f"
    ]
  },
  "8ae3": {
    "id": "8ae3",
    "label": "bindNodeCallback"
  },
  "e67b": {
    "id": "e67b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "b298",
      "4581"
    ]
  },
  "b18f": {
    "id": "b18f",
    "label": "I have no Observables yet, and",
    "options": [
      "8621",
      "e67b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "ddf9",
      "bb55",
      "b18f"
    ]
  }
}