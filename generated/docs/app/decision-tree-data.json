{
  "1067": {
    "id": "1067",
    "label": "race"
  },
  "1284": {
    "id": "1284",
    "label": "based on the emissions of another Observable",
    "options": [
      "9a66"
    ]
  },
  "1357": {
    "id": "1357",
    "label": "merge"
  },
  "1683": {
    "id": "1683",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "b29d"
    ]
  },
  "1728": {
    "id": "1728",
    "label": "concat"
  },
  "2026": {
    "id": "2026",
    "label": "delay"
  },
  "2534": {
    "id": "2534",
    "label": "I want to allow some values to pass",
    "options": [
      "587d",
      "3d64",
      "ec02",
      "5445",
      "0bc1"
    ]
  },
  "2561": {
    "id": "2561",
    "label": "I want to output the values from either of them",
    "options": [
      "1357"
    ]
  },
  "2781": {
    "id": "2781",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "5c70"
    ]
  },
  "2934": {
    "id": "2934",
    "label": "immediately",
    "options": [
      "c477"
    ]
  },
  "3953": {
    "id": "3953",
    "label": "using a BehaviorSubject",
    "options": [
      "6aab"
    ]
  },
  "4006": {
    "id": "4006",
    "label": "using each source value only once",
    "options": [
      "7e97"
    ]
  },
  "4232": {
    "id": "4232",
    "label": "supporting a conventional callback API",
    "options": [
      "e4db"
    ]
  },
  "5420": {
    "id": "5420",
    "label": "I want to ignore values",
    "options": [
      "febd",
      "c9c3",
      "3da7",
      "99d0",
      "322d",
      "493b"
    ]
  },
  "5421": {
    "id": "5421",
    "label": "windowCount"
  },
  "5445": {
    "id": "5445",
    "label": "if they are at the end of the Observable",
    "options": [
      "d9ad",
      "e3ef"
    ]
  },
  "6082": {
    "id": "6082",
    "label": "defer"
  },
  "6286": {
    "id": "6286",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "1683",
      "b4fe"
    ]
  },
  "6339": {
    "id": "6339",
    "label": "to be a value calculated through a formula",
    "options": [
      "15bd"
    ]
  },
  "7673": {
    "id": "7673",
    "label": "fromEvent"
  },
  "8180": {
    "id": "8180",
    "label": "in batches of a particular size",
    "options": [
      "6b40",
      "85ff"
    ]
  },
  "8792": {
    "id": "8792",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "fa5c",
      "e10d"
    ]
  },
  "8817": {
    "id": "8817",
    "label": "startWith"
  },
  "9140": {
    "id": "9140",
    "label": "debounce"
  },
  "fb4f": {
    "id": "fb4f",
    "label": "mapTo"
  },
  "03fe": {
    "id": "03fe",
    "label": "to be a constant value",
    "options": [
      "fb4f"
    ]
  },
  "15bd": {
    "id": "15bd",
    "label": "map"
  },
  "be34": {
    "id": "be34",
    "label": "I want to change each emitted value",
    "options": [
      "03fe",
      "6339"
    ]
  },
  "91b6": {
    "id": "91b6",
    "label": "pluck"
  },
  "0c4d": {
    "id": "0c4d",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "91b6"
    ]
  },
  "bf08": {
    "id": "bf08",
    "label": "tap"
  },
  "d25d": {
    "id": "d25d",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "bf08"
    ]
  },
  "d262": {
    "id": "d262",
    "label": "filter"
  },
  "587d": {
    "id": "587d",
    "label": "based on custom logic",
    "options": [
      "d262"
    ]
  },
  "6fcb": {
    "id": "6fcb",
    "label": "first"
  },
  "7a65": {
    "id": "7a65",
    "label": "and only the first value",
    "options": [
      "6fcb"
    ]
  },
  "cb0a": {
    "id": "cb0a",
    "label": "take"
  },
  "a079": {
    "id": "a079",
    "label": "based on a given amount",
    "options": [
      "cb0a"
    ]
  },
  "f7db": {
    "id": "f7db",
    "label": "takeWhile"
  },
  "c935": {
    "id": "c935",
    "label": "based on custom logic",
    "options": [
      "f7db"
    ]
  },
  "3d64": {
    "id": "3d64",
    "label": "if they are at the start of the Observable",
    "options": [
      "7a65",
      "a079",
      "c935"
    ]
  },
  "2cfc": {
    "id": "2cfc",
    "label": "elementAt"
  },
  "ec02": {
    "id": "ec02",
    "label": "if they are exactly the n-th emission",
    "options": [
      "2cfc"
    ]
  },
  "be61": {
    "id": "be61",
    "label": "last"
  },
  "d9ad": {
    "id": "d9ad",
    "label": "and only the last value",
    "options": [
      "be61"
    ]
  },
  "d429": {
    "id": "d429",
    "label": "takeLast"
  },
  "e3ef": {
    "id": "e3ef",
    "label": "based on a given amount",
    "options": [
      "d429"
    ]
  },
  "c629": {
    "id": "c629",
    "label": "takeUntil"
  },
  "0bc1": {
    "id": "0bc1",
    "label": "until another Observable emits a value",
    "options": [
      "c629"
    ]
  },
  "0858": {
    "id": "0858",
    "label": "ignoreElements"
  },
  "febd": {
    "id": "febd",
    "label": "altogether",
    "options": [
      "0858"
    ]
  },
  "38bb": {
    "id": "38bb",
    "label": "using each source value only once",
    "options": [
      "b935"
    ]
  },
  "c340": {
    "id": "c340",
    "label": "based on a given amount",
    "options": [
      "38bb"
    ]
  },
  "66ba": {
    "id": "66ba",
    "label": "skipWhile"
  },
  "4e5d": {
    "id": "4e5d",
    "label": "based on custom logic",
    "options": [
      "66ba"
    ]
  },
  "c9c3": {
    "id": "c9c3",
    "label": "from the start of the Observable",
    "options": [
      "c340",
      "4e5d"
    ]
  },
  "b1f3": {
    "id": "b1f3",
    "label": "skipLast"
  },
  "3da7": {
    "id": "3da7",
    "label": "from the end of the Observable",
    "options": [
      "b1f3"
    ]
  },
  "5c24": {
    "id": "5c24",
    "label": "skipUntil"
  },
  "99d0": {
    "id": "99d0",
    "label": "until another Observable emits a value",
    "options": [
      "5c24"
    ]
  },
  "5fbe": {
    "id": "5fbe",
    "label": "distinctUntilChanged"
  },
  "78f6": {
    "id": "78f6",
    "label": "emitted just before the current value",
    "options": [
      "5fbe"
    ]
  },
  "6d5a": {
    "id": "6d5a",
    "label": "distinct"
  },
  "b7eb": {
    "id": "b7eb",
    "label": "emitted some time in the past",
    "options": [
      "6d5a"
    ]
  },
  "664f": {
    "id": "664f",
    "label": "according to value equality",
    "options": [
      "78f6",
      "b7eb"
    ]
  },
  "324a": {
    "id": "324a",
    "label": "distinctUntilKeyChanged"
  },
  "9c7e": {
    "id": "9c7e",
    "label": "emitted just before the current value",
    "options": [
      "324a"
    ]
  },
  "3e8e": {
    "id": "3e8e",
    "label": "according to a key or object property",
    "options": [
      "9c7e"
    ]
  },
  "322d": {
    "id": "322d",
    "label": "that match some previous value",
    "options": [
      "664f",
      "3e8e"
    ]
  },
  "a6fd": {
    "id": "a6fd",
    "label": "throttle"
  },
  "72c6": {
    "id": "72c6",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "a6fd"
    ]
  },
  "7ba1": {
    "id": "7ba1",
    "label": "throttleTime"
  },
  "49af": {
    "id": "49af",
    "label": "where time windows are determined by a time duration",
    "options": [
      "7ba1"
    ]
  },
  "4a9b": {
    "id": "4a9b",
    "label": "by emitting the first value in each time window",
    "options": [
      "72c6",
      "49af"
    ]
  },
  "5c70": {
    "id": "5c70",
    "label": "audit"
  },
  "057e": {
    "id": "057e",
    "label": "auditTime"
  },
  "e8ad": {
    "id": "e8ad",
    "label": "where time windows are determined by a time duration",
    "options": [
      "057e"
    ]
  },
  "df8d": {
    "id": "df8d",
    "label": "by emitting the last value in each time window",
    "options": [
      "2781",
      "e8ad"
    ]
  },
  "fa5c": {
    "id": "fa5c",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "9140"
    ]
  },
  "16bd": {
    "id": "16bd",
    "label": "debounceTime"
  },
  "e10d": {
    "id": "e10d",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "16bd"
    ]
  },
  "493b": {
    "id": "493b",
    "label": "that occur too frequently",
    "options": [
      "4a9b",
      "df8d",
      "8792"
    ]
  },
  "2f07": {
    "id": "2f07",
    "label": "reduce"
  },
  "88ea": {
    "id": "88ea",
    "label": "and only output the final computed value",
    "options": [
      "2f07"
    ]
  },
  "48af": {
    "id": "48af",
    "label": "scan"
  },
  "a4af": {
    "id": "a4af",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "48af"
    ]
  },
  "8c5a": {
    "id": "8c5a",
    "label": "mergeScan"
  },
  "c460": {
    "id": "c460",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "8c5a"
    ]
  },
  "22fd": {
    "id": "22fd",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "88ea",
      "a4af",
      "c460"
    ]
  },
  "a405": {
    "id": "a405",
    "label": "materialize"
  },
  "31d1": {
    "id": "31d1",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "a405"
    ]
  },
  "ba65": {
    "id": "ba65",
    "label": "timeInterval"
  },
  "227e": {
    "id": "227e",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "ba65"
    ]
  },
  "37ea": {
    "id": "37ea",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "31d1",
      "227e"
    ]
  },
  "8fb9": {
    "id": "8fb9",
    "label": "timeout"
  },
  "fd85": {
    "id": "fd85",
    "label": "I want to throw an error",
    "options": [
      "8fb9"
    ]
  },
  "838a": {
    "id": "838a",
    "label": "timeoutWith"
  },
  "7a6f": {
    "id": "7a6f",
    "label": "I want to switch to another Observable",
    "options": [
      "838a"
    ]
  },
  "7fd8": {
    "id": "7fd8",
    "label": "after a period of inactivity",
    "options": [
      "fd85",
      "7a6f"
    ]
  },
  "f177": {
    "id": "f177",
    "label": "single"
  },
  "e29f": {
    "id": "e29f",
    "label": "I want to ensure there is only one value",
    "options": [
      "f177"
    ]
  },
  "d3e7": {
    "id": "d3e7",
    "label": "count"
  },
  "c99a": {
    "id": "c99a",
    "label": "I want to know how many values it emits",
    "options": [
      "d3e7"
    ]
  },
  "9a6f": {
    "id": "9a6f",
    "label": "I want to prepend one value",
    "options": [
      "8817"
    ]
  },
  "906d": {
    "id": "906d",
    "label": "based on a given amount of time",
    "options": [
      "2026"
    ]
  },
  "9a66": {
    "id": "9a66",
    "label": "delayWhen"
  },
  "b91e": {
    "id": "b91e",
    "label": "I want to delay the emissions",
    "options": [
      "906d",
      "1284"
    ]
  },
  "1d29": {
    "id": "1d29",
    "label": "toArray"
  },
  "f786": {
    "id": "f786",
    "label": "and convert to an array",
    "options": [
      "1d29"
    ]
  },
  "3cc6": {
    "id": "3cc6",
    "label": "Observable",
    "method": "toPromise"
  },
  "dc6e": {
    "id": "dc6e",
    "label": "and convert to a Promise",
    "options": [
      "3cc6"
    ]
  },
  "3f1b": {
    "id": "3f1b",
    "label": "until the Observable completes",
    "options": [
      "f786",
      "dc6e"
    ]
  },
  "419f": {
    "id": "419f",
    "label": "pairwise"
  },
  "87db": {
    "id": "87db",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "419f"
    ]
  },
  "07c5": {
    "id": "07c5",
    "label": "partition"
  },
  "cbee": {
    "id": "cbee",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "07c5"
    ]
  },
  "4f8f": {
    "id": "4f8f",
    "label": "bufferCount"
  },
  "6b40": {
    "id": "6b40",
    "label": "and emit the group as an array",
    "options": [
      "4f8f"
    ]
  },
  "85ff": {
    "id": "85ff",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5421"
    ]
  },
  "10b9": {
    "id": "10b9",
    "label": "bufferTime"
  },
  "39d1": {
    "id": "39d1",
    "label": "and emit the group as an array",
    "options": [
      "10b9"
    ]
  },
  "472d": {
    "id": "472d",
    "label": "windowTime"
  },
  "4de4": {
    "id": "4de4",
    "label": "and emit the group as a nested Observable",
    "options": [
      "472d"
    ]
  },
  "9ed5": {
    "id": "9ed5",
    "label": "based on time",
    "options": [
      "39d1",
      "4de4"
    ]
  },
  "4db8": {
    "id": "4db8",
    "label": "buffer"
  },
  "c28a": {
    "id": "c28a",
    "label": "and emit the group as an array",
    "options": [
      "4db8"
    ]
  },
  "096e": {
    "id": "096e",
    "label": "window"
  },
  "7bf6": {
    "id": "7bf6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "096e"
    ]
  },
  "26ce": {
    "id": "26ce",
    "label": "until another Observable emits",
    "options": [
      "c28a",
      "7bf6"
    ]
  },
  "31f8": {
    "id": "31f8",
    "label": "bufferWhen"
  },
  "1c9f": {
    "id": "1c9f",
    "label": "and emit the group as an array",
    "options": [
      "31f8"
    ]
  },
  "fc28": {
    "id": "fc28",
    "label": "windowWhen"
  },
  "d1ed": {
    "id": "d1ed",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fc28"
    ]
  },
  "b80e": {
    "id": "b80e",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "1c9f",
      "d1ed"
    ]
  },
  "7b00": {
    "id": "7b00",
    "label": "bufferToggle"
  },
  "0ced": {
    "id": "0ced",
    "label": "and emit the group as an array",
    "options": [
      "7b00"
    ]
  },
  "d56c": {
    "id": "d56c",
    "label": "windowToggle"
  },
  "288e": {
    "id": "288e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d56c"
    ]
  },
  "fd43": {
    "id": "fd43",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "0ced",
      "288e"
    ]
  },
  "1f8b": {
    "id": "1f8b",
    "label": "groupBy"
  },
  "ef10": {
    "id": "ef10",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "1f8b"
    ]
  },
  "aa6a": {
    "id": "aa6a",
    "label": "I want to group the values",
    "options": [
      "3f1b",
      "87db",
      "cbee",
      "8180",
      "9ed5",
      "26ce",
      "b80e",
      "fd43",
      "ef10"
    ]
  },
  "b29d": {
    "id": "b29d",
    "label": "mergeMapTo"
  },
  "b821": {
    "id": "b821",
    "label": "mergeMap"
  },
  "b4fe": {
    "id": "b4fe",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b821"
    ]
  },
  "1b46": {
    "id": "1b46",
    "label": "concatMapTo"
  },
  "a8df": {
    "id": "a8df",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "1b46"
    ]
  },
  "a57d": {
    "id": "a57d",
    "label": "concatMap"
  },
  "3a27": {
    "id": "3a27",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "a57d"
    ]
  },
  "bc50": {
    "id": "bc50",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "a8df",
      "3a27"
    ]
  },
  "c7d5": {
    "id": "c7d5",
    "label": "switchMapTo"
  },
  "0eea": {
    "id": "0eea",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "c7d5"
    ]
  },
  "d2f0": {
    "id": "d2f0",
    "label": "switchMap"
  },
  "9e86": {
    "id": "9e86",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "d2f0"
    ]
  },
  "10f4": {
    "id": "10f4",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "0eea",
      "9e86"
    ]
  },
  "c952": {
    "id": "c952",
    "label": "exhaustMap"
  },
  "0057": {
    "id": "0057",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "c952"
    ]
  },
  "0ea4": {
    "id": "0ea4",
    "label": "expand"
  },
  "2eaa": {
    "id": "2eaa",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "0ea4"
    ]
  },
  "8ca3": {
    "id": "8ca3",
    "label": "I want to start a new Observable for each value",
    "options": [
      "6286",
      "bc50",
      "10f4",
      "0057",
      "2eaa"
    ]
  },
  "40ed": {
    "id": "40ed",
    "label": "pipe"
  },
  "fae0": {
    "id": "fae0",
    "label": "I want to perform custom operations",
    "options": [
      "40ed"
    ]
  },
  "934c": {
    "id": "934c",
    "label": "share"
  },
  "43f7": {
    "id": "43f7",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "934c"
    ]
  },
  "fbd1": {
    "id": "fbd1",
    "label": "publish"
  },
  "a207": {
    "id": "a207",
    "label": "and start it manually or imperatively",
    "options": [
      "fbd1"
    ]
  },
  "7ee0": {
    "id": "7ee0",
    "label": "using a conventional Subject",
    "options": [
      "43f7",
      "a207"
    ]
  },
  "6aab": {
    "id": "6aab",
    "label": "publishBehavior"
  },
  "e867": {
    "id": "e867",
    "label": "publishReplay"
  },
  "e64b": {
    "id": "e64b",
    "label": "using a ReplaySubject",
    "options": [
      "e867"
    ]
  },
  "0991": {
    "id": "0991",
    "label": "publishLast"
  },
  "a632": {
    "id": "a632",
    "label": "using an AsyncSubject",
    "options": [
      "0991"
    ]
  },
  "94d3": {
    "id": "94d3",
    "label": "multicast"
  },
  "fb75": {
    "id": "fb75",
    "label": "using a specific subject implementation",
    "options": [
      "94d3"
    ]
  },
  "bfe7": {
    "id": "bfe7",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "7ee0",
      "3953",
      "e64b",
      "a632",
      "fb75"
    ]
  },
  "8aa8": {
    "id": "8aa8",
    "label": "catchError"
  },
  "0ee0": {
    "id": "0ee0",
    "label": "I want to start a new Observable",
    "options": [
      "8aa8"
    ]
  },
  "2cf0": {
    "id": "2cf0",
    "label": "retry"
  },
  "589d": {
    "id": "589d",
    "label": "immediately",
    "options": [
      "2cf0"
    ]
  },
  "9e70": {
    "id": "9e70",
    "label": "retryWhen"
  },
  "8d04": {
    "id": "8d04",
    "label": "when another Observable emits",
    "options": [
      "9e70"
    ]
  },
  "318e": {
    "id": "318e",
    "label": "I want to re-subscribe",
    "options": [
      "589d",
      "8d04"
    ]
  },
  "21c6": {
    "id": "21c6",
    "label": "when an error occurs",
    "options": [
      "0ee0",
      "318e"
    ]
  },
  "c477": {
    "id": "c477",
    "label": "repeat"
  },
  "cd95": {
    "id": "cd95",
    "label": "repeatWhen"
  },
  "99d7": {
    "id": "99d7",
    "label": "when another Observable emits",
    "options": [
      "cd95"
    ]
  },
  "0dcf": {
    "id": "0dcf",
    "label": "I want to re-subscribe",
    "options": [
      "2934",
      "99d7"
    ]
  },
  "5cf3": {
    "id": "5cf3",
    "label": "I want to start a new Observable",
    "options": [
      "1728"
    ]
  },
  "de29": {
    "id": "de29",
    "label": "when it completes",
    "options": [
      "0dcf",
      "5cf3"
    ]
  },
  "d7d4": {
    "id": "d7d4",
    "label": "finalize"
  },
  "49b4": {
    "id": "49b4",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "d7d4"
    ]
  },
  "b9c5": {
    "id": "b9c5",
    "label": "subscribeOn"
  },
  "d0f9": {
    "id": "d0f9",
    "label": "that routes calls to subscribe",
    "options": [
      "b9c5"
    ]
  },
  "1c60": {
    "id": "1c60",
    "label": "observeOn"
  },
  "bb4c": {
    "id": "bb4c",
    "label": "that routes values to observers",
    "options": [
      "1c60"
    ]
  },
  "a5bf": {
    "id": "a5bf",
    "label": "I want to change the scheduler",
    "options": [
      "d0f9",
      "bb4c"
    ]
  },
  "0334": {
    "id": "0334",
    "label": "race"
  },
  "cd5c": {
    "id": "cd5c",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "0334"
    ]
  },
  "f14a": {
    "id": "f14a",
    "label": "merge"
  },
  "ae02": {
    "id": "ae02",
    "label": "I want to output the values from either of them",
    "options": [
      "f14a"
    ]
  },
  "72e8": {
    "id": "72e8",
    "label": "combineLatest"
  },
  "3eaf": {
    "id": "3eaf",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "72e8"
    ]
  },
  "cd1f": {
    "id": "cd1f",
    "label": "withLatestFrom"
  },
  "7fed": {
    "id": "7fed",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "cd1f"
    ]
  },
  "b935": {
    "id": "b935",
    "label": "zip"
  },
  "bf69": {
    "id": "bf69",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "3eaf",
      "7fed",
      "38bb"
    ]
  },
  "7aa1": {
    "id": "7aa1",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "cd5c",
      "ae02",
      "bf69"
    ]
  },
  "a150": {
    "id": "a150",
    "label": "I have one existing Observable, and",
    "options": [
      "be34",
      "0c4d",
      "d25d",
      "2534",
      "5420",
      "22fd",
      "37ea",
      "7fd8",
      "e29f",
      "c99a",
      "9a6f",
      "b91e",
      "aa6a",
      "8ca3",
      "fae0",
      "bfe7",
      "21c6",
      "de29",
      "49b4",
      "a5bf",
      "7aa1"
    ]
  },
  "8d08": {
    "id": "8d08",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "1067"
    ]
  },
  "498d": {
    "id": "498d",
    "label": "forkJoin"
  },
  "1bc4": {
    "id": "1bc4",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "498d"
    ]
  },
  "4f19": {
    "id": "4f19",
    "label": "combineLatest"
  },
  "a779": {
    "id": "a779",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "4f19"
    ]
  },
  "7e97": {
    "id": "7e97",
    "label": "zip"
  },
  "a89c": {
    "id": "a89c",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "a779",
      "4006"
    ]
  },
  "9b33": {
    "id": "9b33",
    "label": "concat"
  },
  "900a": {
    "id": "900a",
    "label": "I want to subscribe to each in order",
    "options": [
      "9b33"
    ]
  },
  "c91f": {
    "id": "c91f",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "8d08",
      "1bc4",
      "2561",
      "a89c",
      "900a"
    ]
  },
  "87a2": {
    "id": "87a2",
    "label": "Observable",
    "method": "create"
  },
  "b078": {
    "id": "b078",
    "label": "using custom logic",
    "options": [
      "87a2"
    ]
  },
  "231f": {
    "id": "231f",
    "label": "generate"
  },
  "d722": {
    "id": "d722",
    "label": "using a state machine similar to a for loop",
    "options": [
      "231f"
    ]
  },
  "78bb": {
    "id": "78bb",
    "label": "throwError"
  },
  "03ed": {
    "id": "03ed",
    "label": "that throws an error",
    "options": [
      "78bb"
    ]
  },
  "59e8": {
    "id": "59e8",
    "label": "EMPTY"
  },
  "e0bb": {
    "id": "e0bb",
    "label": "that just completes, without emitting values",
    "options": [
      "59e8"
    ]
  },
  "b1b0": {
    "id": "b1b0",
    "label": "NEVER"
  },
  "5c42": {
    "id": "5c42",
    "label": "that never emits anything",
    "options": [
      "b1b0"
    ]
  },
  "1b5f": {
    "id": "1b5f",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "7673"
    ]
  },
  "c0fc": {
    "id": "c0fc",
    "label": "fromEventPattern"
  },
  "0447": {
    "id": "0447",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "c0fc"
    ]
  },
  "f92b": {
    "id": "f92b",
    "label": "from an existing source of events",
    "options": [
      "1b5f",
      "0447"
    ]
  },
  "263f": {
    "id": "263f",
    "label": "from"
  },
  "e2ff": {
    "id": "e2ff",
    "label": "from a Promise or an event source",
    "options": [
      "263f"
    ]
  },
  "6a2e": {
    "id": "6a2e",
    "label": "from"
  },
  "906b": {
    "id": "906b",
    "label": "over the values in an array",
    "options": [
      "6a2e"
    ]
  },
  "0ec2": {
    "id": "0ec2",
    "label": "range"
  },
  "601c": {
    "id": "601c",
    "label": "over values in a numeric range",
    "options": [
      "0ec2"
    ]
  },
  "0477": {
    "id": "0477",
    "label": "of"
  },
  "b9a3": {
    "id": "b9a3",
    "label": "over prefined values given as arguments",
    "options": [
      "0477"
    ]
  },
  "08e1": {
    "id": "08e1",
    "label": "that iterates",
    "options": [
      "906b",
      "601c",
      "b9a3"
    ]
  },
  "8c40": {
    "id": "8c40",
    "label": "interval"
  },
  "70d1": {
    "id": "70d1",
    "label": "regularly",
    "options": [
      "8c40"
    ]
  },
  "7be8": {
    "id": "7be8",
    "label": "timer"
  },
  "e10c": {
    "id": "e10c",
    "label": "with an optional initial delay",
    "options": [
      "7be8"
    ]
  },
  "0395": {
    "id": "0395",
    "label": "that emits values on a timer",
    "options": [
      "70d1",
      "e10c"
    ]
  },
  "fd3a": {
    "id": "fd3a",
    "label": "which is built on demand when subscribed",
    "options": [
      "6082"
    ]
  },
  "8e57": {
    "id": "8e57",
    "label": "I want to create a new Observable",
    "options": [
      "b078",
      "d722",
      "03ed",
      "e0bb",
      "5c42",
      "f92b",
      "e2ff",
      "08e1",
      "0395",
      "fd3a"
    ]
  },
  "e4db": {
    "id": "e4db",
    "label": "bindCallback"
  },
  "dee1": {
    "id": "dee1",
    "label": "bindNodeCallback"
  },
  "1ba4": {
    "id": "1ba4",
    "label": "supporting Node.js callback style API",
    "options": [
      "dee1"
    ]
  },
  "680b": {
    "id": "680b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "4232",
      "1ba4"
    ]
  },
  "d02f": {
    "id": "d02f",
    "label": "I have no Observables yet, and",
    "options": [
      "8e57",
      "680b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "a150",
      "c91f",
      "d02f"
    ]
  }
}