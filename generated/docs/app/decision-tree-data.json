{
  "1295": {
    "id": "1295",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "efb9"
    ]
  },
  "1316": {
    "id": "1316",
    "label": "map"
  },
  "1386": {
    "id": "1386",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "c6e1"
    ]
  },
  "1977": {
    "id": "1977",
    "label": "using an AsyncSubject",
    "options": [
      "d74a"
    ]
  },
  "2097": {
    "id": "2097",
    "label": "I want to re-subscribe",
    "options": [
      "afe6",
      "7a4e"
    ]
  },
  "2276": {
    "id": "2276",
    "label": "when it completes",
    "options": [
      "2097",
      "3ac6"
    ]
  },
  "3237": {
    "id": "3237",
    "label": "and only the last value",
    "options": [
      "94e0"
    ]
  },
  "3606": {
    "id": "3606",
    "label": "windowCount"
  },
  "3967": {
    "id": "3967",
    "label": "windowTime"
  },
  "4052": {
    "id": "4052",
    "label": "I want to throw an error",
    "options": [
      "a883"
    ]
  },
  "4079": {
    "id": "4079",
    "label": "after a period of inactivity",
    "options": [
      "4052",
      "bbd2"
    ]
  },
  "4316": {
    "id": "4316",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "8621"
    ]
  },
  "4319": {
    "id": "4319",
    "label": "bufferWhen"
  },
  "4734": {
    "id": "4734",
    "label": "emitted some time in the past",
    "options": [
      "6785"
    ]
  },
  "5631": {
    "id": "5631",
    "label": "startWith"
  },
  "5685": {
    "id": "5685",
    "label": "switchMap"
  },
  "6335": {
    "id": "6335",
    "label": "by emitting the last value in each time window",
    "options": [
      "1295",
      "0572"
    ]
  },
  "6563": {
    "id": "6563",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "bca8"
    ]
  },
  "6565": {
    "id": "6565",
    "label": "finalize"
  },
  "6785": {
    "id": "6785",
    "label": "distinct"
  },
  "6869": {
    "id": "6869",
    "label": "if they are exactly the n-th emission",
    "options": [
      "159f"
    ]
  },
  "6928": {
    "id": "6928",
    "label": "mapTo"
  },
  "7185": {
    "id": "7185",
    "label": "using a conventional Subject",
    "options": [
      "4316",
      "9e0e"
    ]
  },
  "8621": {
    "id": "8621",
    "label": "share"
  },
  "8675": {
    "id": "8675",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "7c64"
    ]
  },
  "8793": {
    "id": "8793",
    "label": "and emit the group as an array",
    "options": [
      "38a1"
    ]
  },
  "9131": {
    "id": "9131",
    "label": "zip"
  },
  "9149": {
    "id": "9149",
    "label": "combineLatest"
  },
  "9219": {
    "id": "9219",
    "label": "by emitting the first value in each time window",
    "options": [
      "9265",
      "97eb"
    ]
  },
  "9265": {
    "id": "9265",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "7c40"
    ]
  },
  "9598": {
    "id": "9598",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "2c32"
    ]
  },
  "6f7c": {
    "id": "6f7c",
    "label": "to be a constant value",
    "options": [
      "6928"
    ]
  },
  "928a": {
    "id": "928a",
    "label": "to be a value calculated through a formula",
    "options": [
      "1316"
    ]
  },
  "b942": {
    "id": "b942",
    "label": "I want to change each emitted value",
    "options": [
      "6f7c",
      "928a"
    ]
  },
  "2c32": {
    "id": "2c32",
    "label": "pluck"
  },
  "997a": {
    "id": "997a",
    "label": "tap"
  },
  "115f": {
    "id": "115f",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "997a"
    ]
  },
  "de45": {
    "id": "de45",
    "label": "filter"
  },
  "b291": {
    "id": "b291",
    "label": "based on custom logic",
    "options": [
      "de45"
    ]
  },
  "d679": {
    "id": "d679",
    "label": "first"
  },
  "0744": {
    "id": "0744",
    "label": "and only the first value",
    "options": [
      "d679"
    ]
  },
  "54b0": {
    "id": "54b0",
    "label": "take"
  },
  "aa5d": {
    "id": "aa5d",
    "label": "based on a given amount",
    "options": [
      "54b0"
    ]
  },
  "c694": {
    "id": "c694",
    "label": "takeWhile"
  },
  "e02a": {
    "id": "e02a",
    "label": "based on custom logic",
    "options": [
      "c694"
    ]
  },
  "6cbc": {
    "id": "6cbc",
    "label": "if they are at the start of the Observable",
    "options": [
      "0744",
      "aa5d",
      "e02a"
    ]
  },
  "159f": {
    "id": "159f",
    "label": "elementAt"
  },
  "94e0": {
    "id": "94e0",
    "label": "last"
  },
  "b563": {
    "id": "b563",
    "label": "takeLast"
  },
  "d1a5": {
    "id": "d1a5",
    "label": "based on a given amount",
    "options": [
      "b563"
    ]
  },
  "4d29": {
    "id": "4d29",
    "label": "if they are at the end of the Observable",
    "options": [
      "3237",
      "d1a5"
    ]
  },
  "a568": {
    "id": "a568",
    "label": "takeUntil"
  },
  "8ccb": {
    "id": "8ccb",
    "label": "until another Observable emits a value",
    "options": [
      "a568"
    ]
  },
  "0f6f": {
    "id": "0f6f",
    "label": "I want to allow some values to pass",
    "options": [
      "b291",
      "6cbc",
      "6869",
      "4d29",
      "8ccb"
    ]
  },
  "f153": {
    "id": "f153",
    "label": "ignoreElements"
  },
  "9b42": {
    "id": "9b42",
    "label": "altogether",
    "options": [
      "f153"
    ]
  },
  "5c12": {
    "id": "5c12",
    "label": "skip"
  },
  "6fa3": {
    "id": "6fa3",
    "label": "based on a given amount",
    "options": [
      "5c12"
    ]
  },
  "bffc": {
    "id": "bffc",
    "label": "skipWhile"
  },
  "2f4e": {
    "id": "2f4e",
    "label": "based on custom logic",
    "options": [
      "bffc"
    ]
  },
  "69dd": {
    "id": "69dd",
    "label": "from the start of the Observable",
    "options": [
      "6fa3",
      "2f4e"
    ]
  },
  "f62f": {
    "id": "f62f",
    "label": "skipLast"
  },
  "e76f": {
    "id": "e76f",
    "label": "from the end of the Observable",
    "options": [
      "f62f"
    ]
  },
  "ecb5": {
    "id": "ecb5",
    "label": "skipUntil"
  },
  "6b20": {
    "id": "6b20",
    "label": "until another Observable emits a value",
    "options": [
      "ecb5"
    ]
  },
  "6b48": {
    "id": "6b48",
    "label": "distinctUntilChanged"
  },
  "665c": {
    "id": "665c",
    "label": "emitted just before the current value",
    "options": [
      "6b48"
    ]
  },
  "1abb": {
    "id": "1abb",
    "label": "according to value equality",
    "options": [
      "665c",
      "4734"
    ]
  },
  "43cf": {
    "id": "43cf",
    "label": "distinctUntilKeyChanged"
  },
  "aca8": {
    "id": "aca8",
    "label": "emitted just before the current value",
    "options": [
      "43cf"
    ]
  },
  "cf9b": {
    "id": "cf9b",
    "label": "according to a key or object property",
    "options": [
      "aca8"
    ]
  },
  "cb16": {
    "id": "cb16",
    "label": "that match some previous value",
    "options": [
      "1abb",
      "cf9b"
    ]
  },
  "7c40": {
    "id": "7c40",
    "label": "throttle"
  },
  "73f7": {
    "id": "73f7",
    "label": "throttleTime"
  },
  "97eb": {
    "id": "97eb",
    "label": "where time windows are determined by a time duration",
    "options": [
      "73f7"
    ]
  },
  "efb9": {
    "id": "efb9",
    "label": "audit"
  },
  "1a7e": {
    "id": "1a7e",
    "label": "auditTime"
  },
  "0572": {
    "id": "0572",
    "label": "where time windows are determined by a time duration",
    "options": [
      "1a7e"
    ]
  },
  "c6e1": {
    "id": "c6e1",
    "label": "debounce"
  },
  "6c7a": {
    "id": "6c7a",
    "label": "debounceTime"
  },
  "2f9b": {
    "id": "2f9b",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "6c7a"
    ]
  },
  "f6e0": {
    "id": "f6e0",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "1386",
      "2f9b"
    ]
  },
  "1a52": {
    "id": "1a52",
    "label": "that occur too frequently",
    "options": [
      "9219",
      "6335",
      "f6e0"
    ]
  },
  "0cc8": {
    "id": "0cc8",
    "label": "I want to ignore values",
    "options": [
      "9b42",
      "69dd",
      "e76f",
      "6b20",
      "cb16",
      "1a52"
    ]
  },
  "9fce": {
    "id": "9fce",
    "label": "reduce"
  },
  "ed3f": {
    "id": "ed3f",
    "label": "and only output the final computed value",
    "options": [
      "9fce"
    ]
  },
  "731b": {
    "id": "731b",
    "label": "scan"
  },
  "f781": {
    "id": "f781",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "731b"
    ]
  },
  "3e8c": {
    "id": "3e8c",
    "label": "mergeScan"
  },
  "5a50": {
    "id": "5a50",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "3e8c"
    ]
  },
  "cc5c": {
    "id": "cc5c",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "ed3f",
      "f781",
      "5a50"
    ]
  },
  "3ef9": {
    "id": "3ef9",
    "label": "materialize"
  },
  "960d": {
    "id": "960d",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "3ef9"
    ]
  },
  "df14": {
    "id": "df14",
    "label": "timeInterval"
  },
  "4cf8": {
    "id": "4cf8",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "df14"
    ]
  },
  "e9a6": {
    "id": "e9a6",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "960d",
      "4cf8"
    ]
  },
  "a883": {
    "id": "a883",
    "label": "timeout"
  },
  "dd14": {
    "id": "dd14",
    "label": "timeoutWith"
  },
  "bbd2": {
    "id": "bbd2",
    "label": "I want to switch to another Observable",
    "options": [
      "dd14"
    ]
  },
  "c922": {
    "id": "c922",
    "label": "single"
  },
  "8b7d": {
    "id": "8b7d",
    "label": "I want to ensure there is only one value",
    "options": [
      "c922"
    ]
  },
  "7d56": {
    "id": "7d56",
    "label": "count"
  },
  "5a3d": {
    "id": "5a3d",
    "label": "I want to know how many values it emits",
    "options": [
      "7d56"
    ]
  },
  "6d6b": {
    "id": "6d6b",
    "label": "I want to prepend one value",
    "options": [
      "5631"
    ]
  },
  "bf83": {
    "id": "bf83",
    "label": "delay"
  },
  "b8b0": {
    "id": "b8b0",
    "label": "based on a given amount of time",
    "options": [
      "bf83"
    ]
  },
  "0198": {
    "id": "0198",
    "label": "delayWhen"
  },
  "837e": {
    "id": "837e",
    "label": "based on the emissions of another Observable",
    "options": [
      "0198"
    ]
  },
  "91be": {
    "id": "91be",
    "label": "I want to delay the emissions",
    "options": [
      "b8b0",
      "837e"
    ]
  },
  "88c4": {
    "id": "88c4",
    "label": "toArray"
  },
  "66af": {
    "id": "66af",
    "label": "and convert to an array",
    "options": [
      "88c4"
    ]
  },
  "f748": {
    "id": "f748",
    "label": "Observable",
    "method": "toPromise"
  },
  "27e9": {
    "id": "27e9",
    "label": "and convert to a Promise",
    "options": [
      "f748"
    ]
  },
  "d951": {
    "id": "d951",
    "label": "until the Observable completes",
    "options": [
      "66af",
      "27e9"
    ]
  },
  "d17c": {
    "id": "d17c",
    "label": "pairwise"
  },
  "9e2b": {
    "id": "9e2b",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "d17c"
    ]
  },
  "7ae3": {
    "id": "7ae3",
    "label": "partition"
  },
  "b3ad": {
    "id": "b3ad",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "7ae3"
    ]
  },
  "bb85": {
    "id": "bb85",
    "label": "bufferCount"
  },
  "18c6": {
    "id": "18c6",
    "label": "and emit the group as an array",
    "options": [
      "bb85"
    ]
  },
  "7a4e": {
    "id": "7a4e",
    "label": "when another Observable emits",
    "options": [
      "6e8b"
    ]
  },
  "a12b": {
    "id": "a12b",
    "label": "in batches of a particular size",
    "options": [
      "18c6",
      "7a4e"
    ]
  },
  "38a1": {
    "id": "38a1",
    "label": "bufferTime"
  },
  "635e": {
    "id": "635e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "3967"
    ]
  },
  "bd1c": {
    "id": "bd1c",
    "label": "based on time",
    "options": [
      "8793",
      "635e"
    ]
  },
  "4f2f": {
    "id": "4f2f",
    "label": "buffer"
  },
  "c475": {
    "id": "c475",
    "label": "and emit the group as an array",
    "options": [
      "4f2f"
    ]
  },
  "9a5e": {
    "id": "9a5e",
    "label": "window"
  },
  "0ffb": {
    "id": "0ffb",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9a5e"
    ]
  },
  "599c": {
    "id": "599c",
    "label": "until another Observable emits",
    "options": [
      "c475",
      "0ffb"
    ]
  },
  "39e7": {
    "id": "39e7",
    "label": "and emit the group as an array",
    "options": [
      "4319"
    ]
  },
  "09fd": {
    "id": "09fd",
    "label": "windowWhen"
  },
  "4db6": {
    "id": "4db6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "09fd"
    ]
  },
  "e90e": {
    "id": "e90e",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "39e7",
      "4db6"
    ]
  },
  "0f59": {
    "id": "0f59",
    "label": "bufferToggle"
  },
  "e1cf": {
    "id": "e1cf",
    "label": "and emit the group as an array",
    "options": [
      "0f59"
    ]
  },
  "8eb6": {
    "id": "8eb6",
    "label": "windowToggle"
  },
  "107d": {
    "id": "107d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8eb6"
    ]
  },
  "678e": {
    "id": "678e",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "e1cf",
      "107d"
    ]
  },
  "7c64": {
    "id": "7c64",
    "label": "groupBy"
  },
  "68e7": {
    "id": "68e7",
    "label": "I want to group the values",
    "options": [
      "d951",
      "9e2b",
      "b3ad",
      "a12b",
      "bd1c",
      "599c",
      "e90e",
      "678e",
      "8675"
    ]
  },
  "35a8": {
    "id": "35a8",
    "label": "mergeMapTo"
  },
  "3b99": {
    "id": "3b99",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "35a8"
    ]
  },
  "f75a": {
    "id": "f75a",
    "label": "mergeMap"
  },
  "c3d3": {
    "id": "c3d3",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "f75a"
    ]
  },
  "952b": {
    "id": "952b",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "3b99",
      "c3d3"
    ]
  },
  "c008": {
    "id": "c008",
    "label": "concatMapTo"
  },
  "a7ba": {
    "id": "a7ba",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "c008"
    ]
  },
  "b9ed": {
    "id": "b9ed",
    "label": "concatMap"
  },
  "166d": {
    "id": "166d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b9ed"
    ]
  },
  "7f07": {
    "id": "7f07",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "a7ba",
      "166d"
    ]
  },
  "cbbe": {
    "id": "cbbe",
    "label": "switchMapTo"
  },
  "e6bc": {
    "id": "e6bc",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "cbbe"
    ]
  },
  "08a2": {
    "id": "08a2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "5685"
    ]
  },
  "c9f5": {
    "id": "c9f5",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "e6bc",
      "08a2"
    ]
  },
  "2b23": {
    "id": "2b23",
    "label": "exhaustMap"
  },
  "5a1b": {
    "id": "5a1b",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "2b23"
    ]
  },
  "7b05": {
    "id": "7b05",
    "label": "expand"
  },
  "8bb4": {
    "id": "8bb4",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "7b05"
    ]
  },
  "a531": {
    "id": "a531",
    "label": "I want to start a new Observable for each value",
    "options": [
      "952b",
      "7f07",
      "c9f5",
      "5a1b",
      "8bb4"
    ]
  },
  "50f3": {
    "id": "50f3",
    "label": "pipe"
  },
  "4c55": {
    "id": "4c55",
    "label": "I want to perform custom operations",
    "options": [
      "50f3"
    ]
  },
  "8a22": {
    "id": "8a22",
    "label": "publish"
  },
  "9e0e": {
    "id": "9e0e",
    "label": "and start it manually or imperatively",
    "options": [
      "8a22"
    ]
  },
  "b43b": {
    "id": "b43b",
    "label": "publishBehavior"
  },
  "d41f": {
    "id": "d41f",
    "label": "using a BehaviorSubject",
    "options": [
      "b43b"
    ]
  },
  "cd51": {
    "id": "cd51",
    "label": "publishReplay"
  },
  "13bf": {
    "id": "13bf",
    "label": "using a ReplaySubject",
    "options": [
      "cd51"
    ]
  },
  "d74a": {
    "id": "d74a",
    "label": "publishLast"
  },
  "f66c": {
    "id": "f66c",
    "label": "multicast"
  },
  "4ccd": {
    "id": "4ccd",
    "label": "using a specific subject implementation",
    "options": [
      "f66c"
    ]
  },
  "fd6d": {
    "id": "fd6d",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "7185",
      "d41f",
      "13bf",
      "1977",
      "4ccd"
    ]
  },
  "2e6e": {
    "id": "2e6e",
    "label": "catchError"
  },
  "b850": {
    "id": "b850",
    "label": "I want to start a new Observable",
    "options": [
      "2e6e"
    ]
  },
  "3ed8": {
    "id": "3ed8",
    "label": "retry"
  },
  "3a17": {
    "id": "3a17",
    "label": "immediately",
    "options": [
      "3ed8"
    ]
  },
  "0e3b": {
    "id": "0e3b",
    "label": "retryWhen"
  },
  "46f1": {
    "id": "46f1",
    "label": "when another Observable emits",
    "options": [
      "0e3b"
    ]
  },
  "de24": {
    "id": "de24",
    "label": "I want to re-subscribe",
    "options": [
      "3a17",
      "46f1"
    ]
  },
  "318c": {
    "id": "318c",
    "label": "when an error occurs",
    "options": [
      "b850",
      "de24"
    ]
  },
  "0676": {
    "id": "0676",
    "label": "repeat"
  },
  "afe6": {
    "id": "afe6",
    "label": "immediately",
    "options": [
      "0676"
    ]
  },
  "6e8b": {
    "id": "6e8b",
    "label": "repeatWhen"
  },
  "fe70": {
    "id": "fe70",
    "label": "concat"
  },
  "3ac6": {
    "id": "3ac6",
    "label": "I want to start a new Observable",
    "options": [
      "fe70"
    ]
  },
  "99fd": {
    "id": "99fd",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "6565"
    ]
  },
  "e3dc": {
    "id": "e3dc",
    "label": "subscribeOn"
  },
  "4d31": {
    "id": "4d31",
    "label": "that routes calls to subscribe",
    "options": [
      "e3dc"
    ]
  },
  "d288": {
    "id": "d288",
    "label": "observeOn"
  },
  "6f34": {
    "id": "6f34",
    "label": "that routes values to observers",
    "options": [
      "d288"
    ]
  },
  "f46d": {
    "id": "f46d",
    "label": "I want to change the scheduler",
    "options": [
      "4d31",
      "6f34"
    ]
  },
  "5adf": {
    "id": "5adf",
    "label": "race"
  },
  "48a6": {
    "id": "48a6",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "5adf"
    ]
  },
  "97ef": {
    "id": "97ef",
    "label": "merge"
  },
  "bcf9": {
    "id": "bcf9",
    "label": "I want to output the values from either of them",
    "options": [
      "97ef"
    ]
  },
  "bca8": {
    "id": "bca8",
    "label": "combineLatest"
  },
  "9e1f": {
    "id": "9e1f",
    "label": "withLatestFrom"
  },
  "f85a": {
    "id": "f85a",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "9e1f"
    ]
  },
  "e158": {
    "id": "e158",
    "label": "using each source value only once",
    "options": [
      "9131"
    ]
  },
  "da3c": {
    "id": "da3c",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "6563",
      "f85a",
      "e158"
    ]
  },
  "0338": {
    "id": "0338",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "48a6",
      "bcf9",
      "da3c"
    ]
  },
  "d738": {
    "id": "d738",
    "label": "I have one existing Observable, and",
    "options": [
      "b942",
      "9598",
      "115f",
      "0f6f",
      "0cc8",
      "cc5c",
      "e9a6",
      "4079",
      "8b7d",
      "5a3d",
      "6d6b",
      "91be",
      "68e7",
      "a531",
      "4c55",
      "fd6d",
      "318c",
      "2276",
      "99fd",
      "f46d",
      "0338"
    ]
  },
  "031e": {
    "id": "031e",
    "label": "race"
  },
  "6f23": {
    "id": "6f23",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "031e"
    ]
  },
  "b830": {
    "id": "b830",
    "label": "forkJoin"
  },
  "63c7": {
    "id": "63c7",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "b830"
    ]
  },
  "d906": {
    "id": "d906",
    "label": "merge"
  },
  "5eac": {
    "id": "5eac",
    "label": "I want to output the values from either of them",
    "options": [
      "d906"
    ]
  },
  "0c2f": {
    "id": "0c2f",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "9149"
    ]
  },
  "4b9f": {
    "id": "4b9f",
    "label": "zip"
  },
  "c7ba": {
    "id": "c7ba",
    "label": "using each source value only once",
    "options": [
      "4b9f"
    ]
  },
  "ea58": {
    "id": "ea58",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "0c2f",
      "c7ba"
    ]
  },
  "0465": {
    "id": "0465",
    "label": "concat"
  },
  "a273": {
    "id": "a273",
    "label": "I want to subscribe to each in order",
    "options": [
      "0465"
    ]
  },
  "de77": {
    "id": "de77",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "6f23",
      "63c7",
      "5eac",
      "ea58",
      "a273"
    ]
  },
  "38a4": {
    "id": "38a4",
    "label": "Observable",
    "method": "create"
  },
  "6c01": {
    "id": "6c01",
    "label": "using custom logic",
    "options": [
      "38a4"
    ]
  },
  "376a": {
    "id": "376a",
    "label": "generate"
  },
  "c81c": {
    "id": "c81c",
    "label": "using a state machine similar to a for loop",
    "options": [
      "376a"
    ]
  },
  "e6af": {
    "id": "e6af",
    "label": "throwError"
  },
  "f7c5": {
    "id": "f7c5",
    "label": "that throws an error",
    "options": [
      "e6af"
    ]
  },
  "e13b": {
    "id": "e13b",
    "label": "EMPTY"
  },
  "0575": {
    "id": "0575",
    "label": "that just completes, without emitting values",
    "options": [
      "e13b"
    ]
  },
  "b1e2": {
    "id": "b1e2",
    "label": "NEVER"
  },
  "8b23": {
    "id": "8b23",
    "label": "that never emits anything",
    "options": [
      "b1e2"
    ]
  },
  "547c": {
    "id": "547c",
    "label": "fromEvent"
  },
  "4c41": {
    "id": "4c41",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "547c"
    ]
  },
  "e07f": {
    "id": "e07f",
    "label": "fromEventPattern"
  },
  "e470": {
    "id": "e470",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "e07f"
    ]
  },
  "2bc6": {
    "id": "2bc6",
    "label": "from an existing source of events",
    "options": [
      "4c41",
      "e470"
    ]
  },
  "eb86": {
    "id": "eb86",
    "label": "from"
  },
  "ccb7": {
    "id": "ccb7",
    "label": "from a Promise or an event source",
    "options": [
      "eb86"
    ]
  },
  "a933": {
    "id": "a933",
    "label": "from"
  },
  "3ff3": {
    "id": "3ff3",
    "label": "over the values in an array",
    "options": [
      "a933"
    ]
  },
  "84e2": {
    "id": "84e2",
    "label": "range"
  },
  "2cba": {
    "id": "2cba",
    "label": "over values in a numeric range",
    "options": [
      "84e2"
    ]
  },
  "507a": {
    "id": "507a",
    "label": "of"
  },
  "2fff": {
    "id": "2fff",
    "label": "over prefined values given as arguments",
    "options": [
      "507a"
    ]
  },
  "356a": {
    "id": "356a",
    "label": "that iterates",
    "options": [
      "3ff3",
      "2cba",
      "2fff"
    ]
  },
  "0048": {
    "id": "0048",
    "label": "interval"
  },
  "a749": {
    "id": "a749",
    "label": "regularly",
    "options": [
      "0048"
    ]
  },
  "d27b": {
    "id": "d27b",
    "label": "timer"
  },
  "400c": {
    "id": "400c",
    "label": "with an optional initial delay",
    "options": [
      "d27b"
    ]
  },
  "e493": {
    "id": "e493",
    "label": "that emits values on a timer",
    "options": [
      "a749",
      "400c"
    ]
  },
  "727c": {
    "id": "727c",
    "label": "defer"
  },
  "f8f1": {
    "id": "f8f1",
    "label": "which is built on demand when subscribed",
    "options": [
      "727c"
    ]
  },
  "e18c": {
    "id": "e18c",
    "label": "I want to create a new Observable",
    "options": [
      "6c01",
      "c81c",
      "f7c5",
      "0575",
      "8b23",
      "2bc6",
      "ccb7",
      "356a",
      "e493",
      "f8f1"
    ]
  },
  "0b32": {
    "id": "0b32",
    "label": "bindCallback"
  },
  "a816": {
    "id": "a816",
    "label": "supporting a conventional callback API",
    "options": [
      "0b32"
    ]
  },
  "a83f": {
    "id": "a83f",
    "label": "bindNodeCallback"
  },
  "b697": {
    "id": "b697",
    "label": "supporting Node.js callback style API",
    "options": [
      "a83f"
    ]
  },
  "6ab4": {
    "id": "6ab4",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "a816",
      "b697"
    ]
  },
  "671d": {
    "id": "671d",
    "label": "I have no Observables yet, and",
    "options": [
      "e18c",
      "6ab4"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "d738",
      "de77",
      "671d"
    ]
  }
}