{"version":3,"sources":["webpack:///./node_modules/@angular/cdk/esm5/portal.es5.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.ts","webpack:///./src/app/custom-elements/expandable-section/expandable-section.module.ts","webpack:///./node_modules/@angular/cdk/esm5/accordion.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/esm5/expansion.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm5/collections.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/expansion/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/expansion/typings/index.d.ts.MatExpansionPanel.html","webpack:///./node_modules/@angular/material/expansion/typings/index.d.ts.MatExpansionPanelHeader.html","webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.html","webpack:///./src/app/custom-elements/expandable-section/expandable-section.module.ngfactory.js.pre-build-optimizer.js"],"names":["_angular_core__WEBPACK_IMPORTED_MODULE_1__","__webpack_require__","throwPortalAlreadyAttachedError","Error","Portal","prototype","attach","host","throwNullPortalOutletError","hasAttached","this","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","ComponentPortal","_super","component","viewContainerRef","injector","_this","call","tslib__WEBPACK_IMPORTED_MODULE_0__","TemplatePortal","template","context","templateRef","elementRef","undefined","BasePortalOutlet","_isDisposed","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentRef","componentFactory","resolveComponentFactory","createComponent","length","parentInjector","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","removeChild","CdkPortal","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","PortalModule","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value","ExpandableSectionComponent","expandable_section_module_ExpandableSectionModule","customElementComponent","nextId","accordion_es5_CdkAccordion","CdkAccordion","_openCloseAllActions","Subject","id","_multi","multi","coercion_es5","openAll","_openCloseAll","closeAll","expanded","next","nextId$1","accordion_es5_CdkAccordionItem","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","Subscription","EMPTY","closed","core","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","notify","markForCheck","disabled","complete","unsubscribe","toggle","close","open","subscribe","CdkAccordionModule","expansion_es5_MatAccordion","MatAccordion","apply","arguments","_hideToggle","displayMode","tslib_es6","show","uniqueId","expansion_es5_MatExpansionPanel","MatExpansionPanel","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","hideToggle","_hasSpacing","_getExpandedState","ngAfterContentInit","_lazyContent","pipe","startWith","filter","_portal","take","portal_es5","_template","ngOnChanges","changes","_bodyAnimation","event","classList","element","phaseName","toState","add","expansion_es5_MatExpansionPanelHeader","MatExpansionPanelHeader","panel","_element","_focusMonitor","_parentChangeSubscription","merge","monitor","nativeElement","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","keyCode","keycodes_es5","preventDefault","stopMonitoring","MatExpansionModule","collections_es5_UniqueSelectionDispatcher","UniqueSelectionDispatcher","_listeners","name","_i","_a","listener","push","registered","ngInjectableDef","factory","providedIn","RenderType_MatExpansionPanel","encapsulation","styles","data","animation","type","definitions","height","visibility","offset","options","expr","timings","View_MatExpansionPanel_1","_l","View_MatExpansionPanel_0","_v","en","$event","ad","_co","_ck","RenderType_MatExpansionPanelHeader","transform","params","collapsedHeight","expandedHeight","steps","selector","optional","View_MatExpansionPanelHeader_1","View_MatExpansionPanelHeader_0","common","ngIf","RenderType_ExpandableSectionComponent","View_ExpandableSectionComponent_0","a11y_es5","title","ExpandableSectionComponentNgFactory","d","__webpack_exports__","ExpandableSectionModuleNgFactory"],"mappings":"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","file":"22.855f989cb02caf97fe51.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nvar  /**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nPortal = /** @class */ (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.attach = /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    };\n    /** Detach this portal from its host */\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    Portal.prototype.detach = /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: /**\n         * Whether this portal is attached to a host.\n         * @return {?}\n         */\n        function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.setAttachedHost = /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nvar  /**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nComponentPortal = /** @class */ (function (_super) {\n    __extends(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector) {\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nvar  /**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nTemplatePortal = /** @class */ (function (_super) {\n    __extends(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef, context) {\n        var _this = _super.call(this) || this;\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        _this.context = context;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    TemplatePortal.prototype.attach = /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    function (host, context) {\n        if (context === void 0) { context = this.context; }\n        this.context = context;\n        return _super.prototype.attach.call(this, host);\n    };\n    /**\n     * @return {?}\n     */\n    TemplatePortal.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this.context = undefined;\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nvar  /**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nBasePortalOutlet = /** @class */ (function () {\n    function BasePortalOutlet() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /** Whether this host has an attached portal. */\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.hasAttached = /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    function () {\n        return !!this._attachedPortal;\n    };\n    /** Attaches a portal. */\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attach = /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    };\n    /** Detaches a previously attached portal. */\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.detach = /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /** Permanently dispose of this portal host. */\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.dispose = /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.setDisposeFn = /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._disposeFn = fn;\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalOutlet.prototype._invokeDisposeFn = /**\n     * @return {?}\n     */\n    function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalOutlet;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nvar  /**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nDomPortalOutlet = /** @class */ (function (_super) {\n    __extends(DomPortalOutlet, _super);\n    function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        var _this = _super.call(this) || this;\n        _this.outletElement = outletElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    DomPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        var _this = this;\n        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var /** @type {?} */ componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    DomPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        var /** @type {?} */ viewContainer = portal.viewContainerRef;\n        var /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            var /** @type {?} */ index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    DomPortalOutlet.prototype.dispose = /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    };\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    DomPortalOutlet.prototype._getComponentRootNode = /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    };\n    return DomPortalOutlet;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nvar CdkPortal = /** @class */ (function (_super) {\n    __extends(CdkPortal, _super);\n    function CdkPortal(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    CdkPortal.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-portal], [cdkPortal], [portal]',\n                    exportAs: 'cdkPortal',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortal.ctorParameters = function () { return [\n        { type: TemplateRef, },\n        { type: ViewContainerRef, },\n    ]; };\n    return CdkPortal;\n}(TemplatePortal));\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nvar CdkPortalOutlet = /** @class */ (function (_super) {\n    __extends(CdkPortalOutlet, _super);\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        _this._isInitialized = false;\n        _this.attached = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n        /** Portal associated with the Portal outlet. */\n        get: /**\n         * Portal associated with the Portal outlet.\n         * @return {?}\n         */\n        function () {\n            return this._attachedPortal;\n        },\n        set: /**\n         * @param {?} portal\n         * @return {?}\n         */\n        function (portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._attachedPortal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n        /** Component or view reference that is attached to the portal. */\n        get: /**\n         * Component or view reference that is attached to the portal.\n         * @return {?}\n         */\n        function () {\n            return this._attachedRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    CdkPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        var /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var /** @type {?} */ ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    CdkPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        var /** @type {?} */ viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    };\n    CdkPortalOutlet.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                    inputs: ['portal: cdkPortalOutlet']\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortalOutlet.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver, },\n        { type: ViewContainerRef, },\n    ]; };\n    CdkPortalOutlet.propDecorators = {\n        \"attached\": [{ type: Output },],\n    };\n    return CdkPortalOutlet;\n}(BasePortalOutlet));\nvar PortalModule = /** @class */ (function () {\n    function PortalModule() {\n    }\n    PortalModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkPortal, CdkPortalOutlet],\n                    declarations: [CdkPortal, CdkPortalOutlet],\n                },] },\n    ];\n    return PortalModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nvar  /**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nPortalInjector = /** @class */ (function () {\n    function PortalInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    PortalInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        var /** @type {?} */ value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return PortalInjector;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n//# sourceMappingURL=portal.es5.js.map\n","/* tslint:disable component-selector */\nimport {Component, Input} from '@angular/core';\n\n/** Custom element wrapper for the material expansion panel with a title input. */\n@Component({\n  selector: 'aio-expandable-section',\n  templateUrl: 'expandable-section.component.html',\n})\nexport class ExpandableSectionComponent {\n  @Input() title;\n}\n","import { NgModule, Type } from '@angular/core';\nimport { ExpandableSectionComponent } from './expandable-section.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { MatExpansionModule } from '@angular/material';\n\n@NgModule({\n  imports: [ MatExpansionModule ],\n  declarations: [ ExpandableSectionComponent, ],\n  entryComponents: [ ExpandableSectionComponent ]\n})\nexport class ExpandableSectionModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ExpandableSectionComponent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion.\n */\nvar /** @type {?} */ nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nvar CdkAccordion = /** @class */ (function () {\n    function CdkAccordion() {\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = \"cdk-accordion-\" + nextId++;\n        this._multi = false;\n    }\n    Object.defineProperty(CdkAccordion.prototype, \"multi\", {\n        get: /**\n         * Whether the accordion should allow multiple expanded accordion items simultaneously.\n         * @return {?}\n         */\n        function () { return this._multi; },\n        set: /**\n         * @param {?} multi\n         * @return {?}\n         */\n        function (multi) { this._multi = coerceBooleanProperty(multi); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    CdkAccordion.prototype.openAll = /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    function () {\n        this._openCloseAll(true);\n    };\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    CdkAccordion.prototype.closeAll = /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    function () {\n        this._openCloseAll(false);\n    };\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    CdkAccordion.prototype._openCloseAll = /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    function (expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    };\n    CdkAccordion.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkAccordion.propDecorators = {\n        \"multi\": [{ type: Input },],\n    };\n    return CdkAccordion;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion item.\n */\nvar /** @type {?} */ nextId$1 = 0;\nvar ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nvar CdkAccordionItem = /** @class */ (function () {\n    function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n        var _this = this;\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = \"cdk-accordion-child-\" + nextId$1++;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = function () { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen(function (id, accordionId) {\n                if (_this.accordion && !_this.accordion.multi &&\n                    _this.accordion.id === accordionId && _this.id !== id) {\n                    _this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    Object.defineProperty(CdkAccordionItem.prototype, \"expanded\", {\n        get: /**\n         * Whether the AccordionItem is expanded.\n         * @return {?}\n         */\n        function () { return this._expanded; },\n        set: /**\n         * @param {?} expanded\n         * @return {?}\n         */\n        function (expanded) {\n            expanded = coerceBooleanProperty(expanded);\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                this.expandedChange.emit(expanded);\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                     */\n                    var /** @type {?} */ accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkAccordionItem.prototype, \"disabled\", {\n        get: /**\n         * Whether the AccordionItem is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} disabled\n         * @return {?}\n         */\n        function (disabled) { this._disabled = coerceBooleanProperty(disabled); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Emits an event for the accordion item being destroyed. */\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    CdkAccordionItem.prototype.ngOnDestroy = /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    function () {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    };\n    /** Toggles the expanded state of the accordion item. */\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    CdkAccordionItem.prototype.toggle = /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    function () {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    };\n    /** Sets the expanded state of the accordion item to false. */\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    CdkAccordionItem.prototype.close = /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    function () {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    };\n    /** Sets the expanded state of the accordion item to true. */\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    CdkAccordionItem.prototype.open = /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    function () {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return this.accordion._openCloseAllActions.subscribe(function (expanded) {\n            // Only change expanded state if item is enabled\n            if (!_this.disabled) {\n                _this.expanded = expanded;\n            }\n        });\n    };\n    CdkAccordionItem.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                        // to the same accordion.\n                        { provide: CdkAccordion, useValue: ɵ0 },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    CdkAccordionItem.ctorParameters = function () { return [\n        { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf },] },\n        { type: ChangeDetectorRef, },\n        { type: UniqueSelectionDispatcher, },\n    ]; };\n    CdkAccordionItem.propDecorators = {\n        \"closed\": [{ type: Output },],\n        \"opened\": [{ type: Output },],\n        \"destroyed\": [{ type: Output },],\n        \"expandedChange\": [{ type: Output },],\n        \"expanded\": [{ type: Input },],\n        \"disabled\": [{ type: Input },],\n    };\n    return CdkAccordionItem;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CdkAccordionModule = /** @class */ (function () {\n    function CdkAccordionModule() {\n    }\n    CdkAccordionModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkAccordion, CdkAccordionItem],\n                    declarations: [CdkAccordion, CdkAccordionItem],\n                },] },\n    ];\n    return CdkAccordionModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };\n//# sourceMappingURL=accordion.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { Directive, Input, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Optional, SkipSelf, ViewContainerRef, ViewEncapsulation, ElementRef, Host, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkAccordion, CdkAccordionItem, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, Subscription } from 'rxjs';\nimport { filter, startWith, take } from 'rxjs/operators';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Directive for a Material Design Accordion.\n */\nvar MatAccordion = /** @class */ (function (_super) {\n    __extends(MatAccordion, _super);\n    function MatAccordion() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._hideToggle = false;\n        /**\n         * The display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        _this.displayMode = 'default';\n        return _this;\n    }\n    Object.defineProperty(MatAccordion.prototype, \"hideToggle\", {\n        get: /**\n         * Whether the expansion indicator should be hidden.\n         * @return {?}\n         */\n        function () { return this._hideToggle; },\n        set: /**\n         * @param {?} show\n         * @return {?}\n         */\n        function (show) { this._hideToggle = coerceBooleanProperty(show); },\n        enumerable: true,\n        configurable: true\n    });\n    MatAccordion.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    host: {\n                        class: 'mat-accordion'\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    MatAccordion.propDecorators = {\n        \"hideToggle\": [{ type: Input },],\n        \"displayMode\": [{ type: Input },],\n    };\n    return MatAccordion;\n}(CdkAccordion));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Time and timing curve for expansion panel animations.\n */\nvar /** @type {?} */ EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n */\nvar /** @type {?} */ matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel header height. */\n    expansionHeaderHeight: trigger('expansionHeight', [\n        state('collapsed', style({\n            height: '{{collapsedHeight}}',\n        }), {\n            params: { collapsedHeight: '48px' },\n        }),\n        state('expanded', style({\n            height: '{{expandedHeight}}'\n        }), {\n            params: { expandedHeight: '64px' }\n        }),\n        transition('expanded <=> collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nvar MatExpansionPanelContent = /** @class */ (function () {\n    function MatExpansionPanelContent(_template) {\n        this._template = _template;\n    }\n    MatExpansionPanelContent.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[matExpansionPanelContent]'\n                },] },\n    ];\n    /** @nocollapse */\n    MatExpansionPanelContent.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return MatExpansionPanelContent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Counter for generating unique element ids.\n */\nvar /** @type {?} */ uniqueId = 0;\nvar ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nvar MatExpansionPanel = /** @class */ (function (_super) {\n    __extends(MatExpansionPanel, _super);\n    function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {\n        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n        _this._viewContainerRef = _viewContainerRef;\n        _this._hideToggle = false;\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        _this._inputChanges = new Subject();\n        /**\n         * ID for the associated header element. Used for a11y labelling.\n         */\n        _this._headerId = \"mat-expansion-panel-header-\" + uniqueId++;\n        _this.accordion = accordion;\n        return _this;\n    }\n    Object.defineProperty(MatExpansionPanel.prototype, \"hideToggle\", {\n        get: /**\n         * Whether the toggle indicator should be hidden.\n         * @return {?}\n         */\n        function () { return this._hideToggle; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._hideToggle = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Whether the expansion indicator should be hidden. */\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getHideToggle = /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    function () {\n        if (this.accordion) {\n            return this.accordion.hideToggle;\n        }\n        return this.hideToggle;\n    };\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._hasSpacing = /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    function () {\n        if (this.accordion) {\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    };\n    /** Gets the expanded state string. */\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getExpandedState = /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    function () {\n        return this.expanded ? 'expanded' : 'collapsed';\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith(/** @type {?} */ ((null))), filter(function () { return _this.expanded && !_this._portal; }), take(1)).subscribe(function () {\n                _this._portal = new TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);\n            });\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._inputChanges.next(changes);\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.ngOnDestroy.call(this);\n        this._inputChanges.complete();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._bodyAnimation = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ classList = event.element.classList;\n        var /** @type {?} */ cssClass = 'mat-expanded';\n        var phaseName = event.phaseName, toState = event.toState;\n        // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n        // order to prevent the cases where switching too early would cause the animation to jump.\n        // Note that we do it directly on the DOM element to avoid the slight delay that comes\n        // with doing it via change detection.\n        if (phaseName === 'done' && toState === 'expanded') {\n            classList.add(cssClass);\n        }\n        else if (phaseName === 'start' && toState === 'collapsed') {\n            classList.remove(cssClass);\n        }\n    };\n    MatExpansionPanel.decorators = [\n        { type: Component, args: [{styles: [\".mat-expansion-panel{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);box-sizing:content-box;display:block;margin:0;transition:margin 225ms cubic-bezier(.4,0,.2,1)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel-content{overflow:hidden}.mat-expansion-panel-content.mat-expanded{overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n                    selector: 'mat-expansion-panel',\n                    exportAs: 'matExpansionPanel',\n                    template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div class=\\\"mat-expansion-panel-content\\\" role=\\\"region\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" (@bodyExpansion.done)=\\\"_bodyAnimation($event)\\\" (@bodyExpansion.start)=\\\"_bodyAnimation($event)\\\" [attr.aria-labelledby]=\\\"_headerId\\\" [id]=\\\"id\\\" #body><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    inputs: ['disabled', 'expanded'],\n                    outputs: ['opened', 'closed', 'expandedChange'],\n                    animations: [matExpansionAnimations.bodyExpansion],\n                    providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MatAccordion, useValue: ɵ0 },\n                    ],\n                    host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    MatExpansionPanel.ctorParameters = function () { return [\n        { type: MatAccordion, decorators: [{ type: Optional }, { type: SkipSelf },] },\n        { type: ChangeDetectorRef, },\n        { type: UniqueSelectionDispatcher, },\n        { type: ViewContainerRef, },\n    ]; };\n    MatExpansionPanel.propDecorators = {\n        \"hideToggle\": [{ type: Input },],\n        \"_lazyContent\": [{ type: ContentChild, args: [MatExpansionPanelContent,] },],\n    };\n    return MatExpansionPanel;\n}(CdkAccordionItem));\nvar MatExpansionPanelActionRow = /** @class */ (function () {\n    function MatExpansionPanelActionRow() {\n    }\n    MatExpansionPanelActionRow.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row'\n                    }\n                },] },\n    ];\n    return MatExpansionPanelActionRow;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nvar MatExpansionPanelHeader = /** @class */ (function () {\n    function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef) {\n        var _this = this;\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to  subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter(function (changes) { return !!(changes[\"hideToggle\"] || changes[\"disabled\"]); })))\n            .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        _focusMonitor.monitor(_element.nativeElement);\n    }\n    /** Toggles the expanded state of the panel. */\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._toggle = /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    function () {\n        this.panel.toggle();\n    };\n    /** Gets whether the panel is expanded. */\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._isExpanded = /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    function () {\n        return this.panel.expanded;\n    };\n    /** Gets the expanded state string of the panel. */\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getExpandedState = /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    function () {\n        return this.panel._getExpandedState();\n    };\n    /** Gets the panel id. */\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getPanelId = /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    function () {\n        return this.panel.id;\n    };\n    /** Gets whether the expand indicator should be shown. */\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._showToggle = /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    function () {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    };\n    /** Handle keydown event calling to toggle() if appropriate. */\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._keydown = /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this._toggle();\n                break;\n            default:\n                return;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element.nativeElement);\n    };\n    MatExpansionPanelHeader.decorators = [\n        { type: Component, args: [{selector: 'mat-expansion-panel-header',\n                    styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n                    template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        matExpansionAnimations.indicatorRotate,\n                        matExpansionAnimations.expansionHeaderHeight\n                    ],\n                    host: {\n                        'class': 'mat-expansion-panel-header',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                        '[@expansionHeight]': \"{\\n        value: _getExpandedState(),\\n        params: {\\n          collapsedHeight: collapsedHeight,\\n          expandedHeight: expandedHeight\\n        }\\n    }\",\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatExpansionPanelHeader.ctorParameters = function () { return [\n        { type: MatExpansionPanel, decorators: [{ type: Host },] },\n        { type: ElementRef, },\n        { type: FocusMonitor, },\n        { type: ChangeDetectorRef, },\n    ]; };\n    MatExpansionPanelHeader.propDecorators = {\n        \"expandedHeight\": [{ type: Input },],\n        \"collapsedHeight\": [{ type: Input },],\n    };\n    return MatExpansionPanelHeader;\n}());\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelDescription = /** @class */ (function () {\n    function MatExpansionPanelDescription() {\n    }\n    MatExpansionPanelDescription.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description'\n                    }\n                },] },\n    ];\n    return MatExpansionPanelDescription;\n}());\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelTitle = /** @class */ (function () {\n    function MatExpansionPanelTitle() {\n    }\n    MatExpansionPanelTitle.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title'\n                    }\n                },] },\n    ];\n    return MatExpansionPanelTitle;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatExpansionModule = /** @class */ (function () {\n    function MatExpansionModule() {\n    }\n    MatExpansionModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule, CdkAccordionModule, PortalModule],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    declarations: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                },] },\n    ];\n    return MatExpansionModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatExpansionModule, MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };\n//# sourceMappingURL=expansion.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { Observable, of, Subject } from 'rxjs';\nimport { Injectable, defineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\nvar  /**\n * @abstract\n * @template T\n */\nDataSource = /** @class */ (function () {\n    function DataSource() {\n    }\n    return DataSource;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nvar  /**\n * DataSource wrapper for a native array.\n * @template T\n */\nArrayDataSource = /** @class */ (function (_super) {\n    __extends(ArrayDataSource, _super);\n    function ArrayDataSource(_data) {\n        var _this = _super.call(this) || this;\n        _this._data = _data;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ArrayDataSource.prototype.connect = /**\n     * @return {?}\n     */\n    function () {\n        return this._data instanceof Observable ? this._data : of(this._data);\n    };\n    /**\n     * @return {?}\n     */\n    ArrayDataSource.prototype.disconnect = /**\n     * @return {?}\n     */\n    function () { };\n    return ArrayDataSource;\n}(DataSource));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nvar  /**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nSelectionModel = /** @class */ (function () {\n    function SelectionModel(_multiple, initiallySelectedValues, _emitChanges) {\n        if (_multiple === void 0) { _multiple = false; }\n        if (_emitChanges === void 0) { _emitChanges = true; }\n        var _this = this;\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.onChange = this._emitChanges ? new Subject() : null;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(function (value) { return _this._markSelected(value); });\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    Object.defineProperty(SelectionModel.prototype, \"selected\", {\n        /** Selected values. */\n        get: /**\n         * Selected values.\n         * @return {?}\n         */\n        function () {\n            if (!this._selected) {\n                this._selected = Array.from(this._selection.values());\n            }\n            return this._selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects a value or an array of values.\n     */\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    SelectionModel.prototype.select = /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        this._verifyValueAssignment(values);\n        values.forEach(function (value) { return _this._markSelected(value); });\n        this._emitChangeEvent();\n    };\n    /**\n     * Deselects a value or an array of values.\n     */\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    SelectionModel.prototype.deselect = /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        this._verifyValueAssignment(values);\n        values.forEach(function (value) { return _this._unmarkSelected(value); });\n        this._emitChangeEvent();\n    };\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.toggle = /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    };\n    /**\n     * Clears all of the selected values.\n     */\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype.clear = /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    function () {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    };\n    /**\n     * Determines whether a value is selected.\n     */\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.isSelected = /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return this._selection.has(value);\n    };\n    /**\n     * Determines whether the model does not have a value.\n     */\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.isEmpty = /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    function () {\n        return this._selection.size === 0;\n    };\n    /**\n     * Determines whether the model has a value.\n     */\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.hasValue = /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    function () {\n        return !this.isEmpty();\n    };\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    SelectionModel.prototype.sort = /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        if (this._multiple && this.selected) {\n            /** @type {?} */ ((this._selected)).sort(predicate);\n        }\n    };\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    SelectionModel.prototype.isMultipleSelection = /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    function () {\n        return this._multiple;\n    };\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._emitChangeEvent = /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n    function () {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            if (this.onChange) {\n                this.onChange.next({\n                    source: this,\n                    added: this._selectedToEmit,\n                    removed: this._deselectedToEmit\n                });\n            }\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    };\n    /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._markSelected = /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    };\n    /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkSelected = /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    };\n    /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkAll = /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.isEmpty()) {\n            this._selection.forEach(function (value) { return _this._unmarkSelected(value); });\n        }\n    };\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @param {?} values\n     * @return {?}\n     */\n    SelectionModel.prototype._verifyValueAssignment = /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @param {?} values\n     * @return {?}\n     */\n    function (values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    };\n    return SelectionModel;\n}());\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nvar UniqueSelectionDispatcher = /** @class */ (function () {\n    function UniqueSelectionDispatcher() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.notify = /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    function (id, name) {\n        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            listener(id, name);\n        }\n    };\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    UniqueSelectionDispatcher.prototype.listen = /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    function (listener) {\n        var _this = this;\n        this._listeners.push(listener);\n        return function () {\n            _this._listeners = _this._listeners.filter(function (registered) {\n                return listener !== registered;\n            });\n        };\n    };\n    /**\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._listeners = [];\n    };\n    UniqueSelectionDispatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = defineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n    return UniqueSelectionDispatcher;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { UniqueSelectionDispatcher, ArrayDataSource, DataSource, SelectionModel, getMultipleValuesInSingleSelectionError };\n//# sourceMappingURL=collections.es5.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/expansion\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/cdk/accordion\";\nimport * as i4 from \"@angular/cdk/portal\";\nimport * as i5 from \"@angular/cdk/collections\";\nimport * as i6 from \"@angular/cdk/a11y\";\nvar MatExpansionModuleNgFactory = i0.ɵcmf(i1.MatExpansionModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i3.CdkAccordionModule, i3.CdkAccordionModule, []), i0.ɵmpd(1073742336, i4.PortalModule, i4.PortalModule, []), i0.ɵmpd(1073742336, i1.MatExpansionModule, i1.MatExpansionModule, [])]); });\nexport { MatExpansionModuleNgFactory as MatExpansionModuleNgFactory };\nvar styles_MatExpansionPanel = [\".mat-expansion-panel{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);box-sizing:content-box;display:block;margin:0;transition:margin 225ms cubic-bezier(.4,0,.2,1)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel-content{overflow:hidden}.mat-expansion-panel-content.mat-expanded{overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"];\nvar RenderType_MatExpansionPanel = i0.ɵcrt({ encapsulation: 2, styles: styles_MatExpansionPanel, data: { \"animation\": [{ type: 7, name: \"bodyExpansion\", definitions: [{ type: 0, name: \"collapsed\", styles: { type: 6, styles: { height: \"0px\", visibility: \"hidden\" }, offset: null }, options: undefined }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { height: \"*\", visibility: \"visible\" }, offset: null }, options: undefined }, { type: 1, expr: \"expanded <=> collapsed\", animation: { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }, options: null }], options: {} }] } });\nexport { RenderType_MatExpansionPanel as RenderType_MatExpansionPanel };\nfunction View_MatExpansionPanel_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nexport function View_MatExpansionPanel_0(_l) { return i0.ɵvid(2, [i0.ɵncd(null, 0), (_l()(), i0.ɵeld(1, 0, [[\"body\", 1]], null, 5, \"div\", [[\"class\", \"mat-expansion-panel-content\"], [\"role\", \"region\"]], [[24, \"@bodyExpansion\", 0], [1, \"aria-labelledby\", 0], [8, \"id\", 0]], [[null, \"@bodyExpansion.done\"], [null, \"@bodyExpansion.start\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"@bodyExpansion.done\" === en)) {\n        var pd_0 = (_co._bodyAnimation($event) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"@bodyExpansion.start\" === en)) {\n        var pd_1 = (_co._bodyAnimation($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵeld(2, 0, null, null, 3, \"div\", [[\"class\", \"mat-expansion-panel-body\"]], null, null, null, null, null)), i0.ɵncd(null, 1), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatExpansionPanel_1)), i0.ɵdid(5, 212992, null, 0, i4.CdkPortalOutlet, [i0.ComponentFactoryResolver, i0.ViewContainerRef], { portal: [0, \"portal\"] }, null), i0.ɵncd(null, 2)], function (_ck, _v) { var _co = _v.component; var currVal_3 = _co._portal; _ck(_v, 5, 0, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._getExpandedState(); var currVal_1 = _co._headerId; var currVal_2 = _co.id; _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); }); }\nexport function View_MatExpansionPanel_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 16777216, null, null, 3, \"mat-expansion-panel\", [[\"class\", \"mat-expansion-panel\"]], [[2, \"mat-expanded\", null], [2, \"mat-expansion-panel-spacing\", null]], null, null, View_MatExpansionPanel_0, RenderType_MatExpansionPanel)), i0.ɵdid(1, 1753088, null, 1, i1.MatExpansionPanel, [[3, i1.MatAccordion], i0.ChangeDetectorRef, i5.UniqueSelectionDispatcher, i0.ViewContainerRef], null, null), i0.ɵqud(335544320, 1, { _lazyContent: 0 }), i0.ɵprd(256, null, i1.MatAccordion, undefined, [])], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1).expanded; var currVal_1 = i0.ɵnov(_v, 1)._hasSpacing(); _ck(_v, 0, 0, currVal_0, currVal_1); }); }\nvar MatExpansionPanelNgFactory = i0.ɵccf(\"mat-expansion-panel\", i1.MatExpansionPanel, View_MatExpansionPanel_Host_0, { expanded: \"expanded\", disabled: \"disabled\", hideToggle: \"hideToggle\" }, { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"]);\nexport { MatExpansionPanelNgFactory as MatExpansionPanelNgFactory };\nvar styles_MatExpansionPanelHeader = [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"];\nvar RenderType_MatExpansionPanelHeader = i0.ɵcrt({ encapsulation: 2, styles: styles_MatExpansionPanelHeader, data: { \"animation\": [{ type: 7, name: \"indicatorRotate\", definitions: [{ type: 0, name: \"collapsed\", styles: { type: 6, styles: { transform: \"rotate(0deg)\" }, offset: null }, options: undefined }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { transform: \"rotate(180deg)\" }, offset: null }, options: undefined }, { type: 1, expr: \"expanded <=> collapsed\", animation: { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }, options: null }], options: {} }, { type: 7, name: \"expansionHeight\", definitions: [{ type: 0, name: \"collapsed\", styles: { type: 6, styles: { height: \"{{collapsedHeight}}\" }, offset: null }, options: { params: { collapsedHeight: \"48px\" } } }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { height: \"{{expandedHeight}}\" }, offset: null }, options: { params: { expandedHeight: \"64px\" } } }, { type: 1, expr: \"expanded <=> collapsed\", animation: { type: 3, steps: [{ type: 11, selector: \"@indicatorRotate\", animation: { type: 9, options: null }, options: { optional: true } }, { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }], options: null }, options: null }], options: {} }] } });\nexport { RenderType_MatExpansionPanelHeader as RenderType_MatExpansionPanelHeader };\nfunction View_MatExpansionPanelHeader_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 0, \"span\", [[\"class\", \"mat-expansion-indicator\"]], [[24, \"@indicatorRotate\", 0]], null, null, null, null))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._getExpandedState(); _ck(_v, 0, 0, currVal_0); }); }\nexport function View_MatExpansionPanelHeader_0(_l) { return i0.ɵvid(2, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"span\", [[\"class\", \"mat-content\"]], null, null, null, null, null)), i0.ɵncd(null, 0), i0.ɵncd(null, 1), i0.ɵncd(null, 2), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatExpansionPanelHeader_1)), i0.ɵdid(5, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._showToggle(); _ck(_v, 5, 0, currVal_0); }, null); }\nexport function View_MatExpansionPanelHeader_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"mat-expansion-panel-header\", [[\"class\", \"mat-expansion-panel-header\"], [\"role\", \"button\"]], [[1, \"id\", 0], [1, \"tabindex\", 0], [1, \"aria-controls\", 0], [1, \"aria-expanded\", 0], [1, \"aria-disabled\", 0], [2, \"mat-expanded\", null], [40, \"@expansionHeight\", 0]], [[null, \"click\"], [null, \"keydown\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 1)._toggle() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"keydown\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 1)._keydown($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, View_MatExpansionPanelHeader_0, RenderType_MatExpansionPanelHeader)), i0.ɵdid(1, 180224, null, 0, i1.MatExpansionPanelHeader, [i1.MatExpansionPanel, i0.ElementRef, i6.FocusMonitor, i0.ChangeDetectorRef], null, null), i0.ɵpod(2, { collapsedHeight: 0, expandedHeight: 1 }), i0.ɵpod(3, { value: 0, params: 1 })], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1).panel._headerId; var currVal_1 = (i0.ɵnov(_v, 1).panel.disabled ? (0 - 1) : 0); var currVal_2 = i0.ɵnov(_v, 1)._getPanelId(); var currVal_3 = i0.ɵnov(_v, 1)._isExpanded(); var currVal_4 = i0.ɵnov(_v, 1).panel.disabled; var currVal_5 = i0.ɵnov(_v, 1)._isExpanded(); var currVal_6 = _ck(_v, 3, 0, i0.ɵnov(_v, 1)._getExpandedState(), _ck(_v, 2, 0, i0.ɵnov(_v, 1).collapsedHeight, i0.ɵnov(_v, 1).expandedHeight)); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6); }); }\nvar MatExpansionPanelHeaderNgFactory = i0.ɵccf(\"mat-expansion-panel-header\", i1.MatExpansionPanelHeader, View_MatExpansionPanelHeader_Host_0, { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, {}, [\"mat-panel-title\", \"mat-panel-description\", \"*\"]);\nexport { MatExpansionPanelHeaderNgFactory as MatExpansionPanelHeaderNgFactory };\n","<ng-content select=\"mat-expansion-panel-header\"></ng-content><div class=\"mat-expansion-panel-content\" role=\"region\" [@bodyExpansion]=\"_getExpandedState()\" (@bodyExpansion.done)=\"_bodyAnimation($event)\" (@bodyExpansion.start)=\"_bodyAnimation($event)\" [attr.aria-labelledby]=\"_headerId\" [id]=\"id\" #body><div class=\"mat-expansion-panel-body\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\"_portal\"></ng-template></div><ng-content select=\"mat-action-row\"></ng-content></div>","<span class=\"mat-content\"><ng-content select=\"mat-panel-title\"></ng-content><ng-content select=\"mat-panel-description\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\" class=\"mat-expansion-indicator\"></span>","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../node_modules/@angular/material/expansion/typings/index.ngfactory\";\nimport * as i2 from \"@angular/material/expansion\";\nimport * as i3 from \"@angular/cdk/collections\";\nimport * as i4 from \"@angular/cdk/a11y\";\nimport * as i5 from \"./expandable-section.component\";\nvar styles_ExpandableSectionComponent = [];\nvar RenderType_ExpandableSectionComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_ExpandableSectionComponent, data: {} });\nexport { RenderType_ExpandableSectionComponent as RenderType_ExpandableSectionComponent };\nexport function View_ExpandableSectionComponent_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 16777216, null, null, 9, \"mat-expansion-panel\", [[\"class\", \"mat-expansion-panel\"], [\"style\", \"background: inherit\"]], [[2, \"mat-expanded\", null], [2, \"mat-expansion-panel-spacing\", null]], null, null, i1.View_MatExpansionPanel_0, i1.RenderType_MatExpansionPanel)), i0.ɵdid(1, 1753088, null, 1, i2.MatExpansionPanel, [[3, i2.MatAccordion], i0.ChangeDetectorRef, i3.UniqueSelectionDispatcher, i0.ViewContainerRef], null, null), i0.ɵqud(335544320, 1, { _lazyContent: 0 }), i0.ɵprd(256, null, i2.MatAccordion, undefined, []), (_l()(), i0.ɵeld(4, 0, null, 0, 4, \"mat-expansion-panel-header\", [[\"class\", \"mat-expansion-panel-header\"], [\"role\", \"button\"]], [[1, \"id\", 0], [1, \"tabindex\", 0], [1, \"aria-controls\", 0], [1, \"aria-expanded\", 0], [1, \"aria-disabled\", 0], [2, \"mat-expanded\", null], [40, \"@expansionHeight\", 0]], [[null, \"click\"], [null, \"keydown\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 5)._toggle() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"keydown\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 5)._keydown($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, i1.View_MatExpansionPanelHeader_0, i1.RenderType_MatExpansionPanelHeader)), i0.ɵdid(5, 180224, null, 0, i2.MatExpansionPanelHeader, [i2.MatExpansionPanel, i0.ElementRef, i4.FocusMonitor, i0.ChangeDetectorRef], null, null), i0.ɵpod(6, { collapsedHeight: 0, expandedHeight: 1 }), i0.ɵpod(7, { value: 0, params: 1 }), (_l()(), i0.ɵted(8, 2, [\" \", \" \"])), i0.ɵncd(1, 0)], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = i0.ɵnov(_v, 1).expanded; var currVal_1 = i0.ɵnov(_v, 1)._hasSpacing(); _ck(_v, 0, 0, currVal_0, currVal_1); var currVal_2 = i0.ɵnov(_v, 5).panel._headerId; var currVal_3 = (i0.ɵnov(_v, 5).panel.disabled ? (0 - 1) : 0); var currVal_4 = i0.ɵnov(_v, 5)._getPanelId(); var currVal_5 = i0.ɵnov(_v, 5)._isExpanded(); var currVal_6 = i0.ɵnov(_v, 5).panel.disabled; var currVal_7 = i0.ɵnov(_v, 5)._isExpanded(); var currVal_8 = _ck(_v, 7, 0, i0.ɵnov(_v, 5)._getExpandedState(), _ck(_v, 6, 0, i0.ɵnov(_v, 5).collapsedHeight, i0.ɵnov(_v, 5).expandedHeight)); _ck(_v, 4, 0, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8); var currVal_9 = _co.title; _ck(_v, 8, 0, currVal_9); }); }\nexport function View_ExpandableSectionComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"aio-expandable-section\", [], null, null, null, View_ExpandableSectionComponent_0, RenderType_ExpandableSectionComponent)), i0.ɵdid(1, 49152, null, 0, i5.ExpandableSectionComponent, [], null, null)], null, null); }\nvar ExpandableSectionComponentNgFactory = i0.ɵccf(\"aio-expandable-section\", i5.ExpandableSectionComponent, View_ExpandableSectionComponent_Host_0, { title: \"title\" }, {}, [\"*\"]);\nexport { ExpandableSectionComponentNgFactory as ExpandableSectionComponentNgFactory };\n","<mat-expansion-panel style=\"background: inherit\">\n  <mat-expansion-panel-header>\n    {{title}}\n  </mat-expansion-panel-header>\n\n  <ng-content></ng-content>\n</mat-expansion-panel>\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./expandable-section.module\";\nimport * as i2 from \"./expandable-section.component.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/cdk/accordion\";\nimport * as i5 from \"@angular/cdk/portal\";\nimport * as i6 from \"@angular/material/expansion\";\nvar ExpandableSectionModuleNgFactory = i0.ɵcmf(i1.ExpandableSectionModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.ExpandableSectionComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i4.CdkAccordionModule, i4.CdkAccordionModule, []), i0.ɵmpd(1073742336, i5.PortalModule, i5.PortalModule, []), i0.ɵmpd(1073742336, i6.MatExpansionModule, i6.MatExpansionModule, []), i0.ɵmpd(1073742336, i1.ExpandableSectionModule, i1.ExpandableSectionModule, [])]); });\nexport { ExpandableSectionModuleNgFactory as ExpandableSectionModuleNgFactory };\n"],"sourceRoot":""}