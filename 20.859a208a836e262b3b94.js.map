{"version":3,"sources":["webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree.component.ts","webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree.module.ts","webpack:///./node_modules/rxjs/_esm5/internal/operators/mapTo.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/operator-decision-tree/utils.ts","webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree.service.ts","webpack:///./node_modules/rxjs/_esm5/internal/operators/shareReplay.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree.service.ts.pre-build-optimizer.js","webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree.component.scss.shim.ngstyle.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree.component.html","webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree-data.service.ts","webpack:///./src/app/custom-elements/operator-decision-tree/operator-decision-tree.module.ngfactory.js.pre-build-optimizer.js"],"names":["OperatorDecisionTreeComponent","operatorDecisionTreeService","scrollService","this","currentSentence$","options$","isBeyondInitialQuestion$","hasError$","prototype","selectOption","optionId","scrollToTop","back","startOver","ngOnDestroy","operator_decision_tree_module_OperatorDecisionTreeModule","customElementComponent","MapToOperator","value","call","subscriber","source","subscribe","mapTo_MapToSubscriber","_super","MapToSubscriber","destination","_this","tslib_es6","_next","x","next","Subscriber","treeIsErrorFree","tree","error","operator_decision_tree_service_OperatorDecisionTreeService","OperatorDecisionTreeService","dataService","initialState","previousBranchIds","currentBranchId","state$","BehaviorSubject","tree$","getDecisionTree$","pipe","Object","catchError","of","lift","refCount","hasError","isComplete","subject","ReplaySubject","bufferSize","windowTime","scheduler","subscription","err","complete","innerSub","unsubscribe","combineLatest","filter","_a","map","includes","length","isInitialDecision","entityId","label","join","trim","state","options","node","nodeHasOptions","option","defineProperty","get","getValue","enumerable","configurable","snapShot","concat","previousOptionId","slice","RenderType_OperatorDecisionTreeComponent","core","encapsulation","styles","data","animation","type","name","definitions","transform","offset","undefined","expr","timings","View_OperatorDecisionTreeComponent_2","_l","_v","en","$event","ad","component","index_ngfactory","button_es5","platform_es5","a11y_es5","animations","color","_ck","disabled","_animationMode","View_OperatorDecisionTreeComponent_4","parent","context","$implicit","id","typings_index_ngfactory","card_es5","core_es5","unbounded","View_OperatorDecisionTreeComponent_6","method","docType","path","View_OperatorDecisionTreeComponent_7","View_OperatorDecisionTreeComponent_5","common","ngIf","View_OperatorDecisionTreeComponent_3","ngIfElse","View_OperatorDecisionTreeComponent_1","ngForOf","_co","View_OperatorDecisionTreeComponent_8","View_OperatorDecisionTreeComponent_0","OperatorDecisionTreeComponentNgFactory","scroll_service","OperatorDecisionTreeDataService","http","__webpack_require__","d","__webpack_exports__","OperatorDecisionTreeModuleNgFactory","platform_browser","bidi_es5"],"mappings":"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","file":"20.859a208a836e262b3b94.js","sourcesContent":["import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport { Component, OnDestroy } from '@angular/core';\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { Observable } from 'rxjs';\nimport { OperatorTreeNode } from './interfaces';\nimport { OperatorDecisionTreeService } from './operator-decision-tree.service';\n\n@Component({\n  selector: 'aio-operator-decision-tree',\n  templateUrl: './operator-decision-tree.component.html',\n  styleUrls: ['./operator-decision-tree.component.scss'],\n  animations: [\n    trigger('flyIn', [\n      state('in', style({ transform: 'translateX(0)' })),\n      transition(':enter', [\n        style({ transform: 'translateX(-100%)' }),\n        animate(250)\n      ])\n    ])\n  ]\n})\nexport class OperatorDecisionTreeComponent implements OnDestroy {\n  currentSentence$: Observable<string> = this.operatorDecisionTreeService.currentSentence$;\n  options$: Observable<OperatorTreeNode[]> = this.operatorDecisionTreeService.options$;\n  isBeyondInitialQuestion$: Observable<boolean> = this.operatorDecisionTreeService.isBeyondInitialQuestion$;\n  hasError$: Observable<boolean> = this.operatorDecisionTreeService.hasError$;\n\n  constructor(\n    private operatorDecisionTreeService: OperatorDecisionTreeService,\n    private scrollService: ScrollService\n  ) {}\n\n  selectOption(optionId: string): void {\n    this.operatorDecisionTreeService.selectOption(optionId);\n    this.scrollService.scrollToTop();\n  }\n\n  back(): void {\n    this.operatorDecisionTreeService.back();\n  }\n\n  startOver(): void {\n    this.operatorDecisionTreeService.startOver();\n  }\n\n  ngOnDestroy(): void {\n    this.startOver();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatRippleModule\n} from '@angular/material';\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\nimport { OperatorDecisionTreeComponent } from './operator-decision-tree.component';\nimport { OperatorDecisionTreeService } from './operator-decision-tree.service';\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule, MatCardModule, MatRippleModule],\n  declarations: [OperatorDecisionTreeComponent],\n  entryComponents: [OperatorDecisionTreeComponent],\n  providers: [\n    OperatorDecisionTreeDataService,\n    OperatorDecisionTreeService,\n    ScrollService\n  ]\n})\nexport class OperatorDecisionTreeModule implements WithCustomElementComponent {\n  customElementComponent: Type<\n    OperatorDecisionTreeComponent\n  > = OperatorDecisionTreeComponent;\n}\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\nvar MapToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        var _this = _super.call(this, destination) || this;\n        _this.value = value;\n        return _this;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map\n","import { OperatorTreeNodeWithOptions } from './interfaces';\n\nexport function isInitialDecision(previousBranchIds: string[]): boolean {\n  return (\n    previousBranchIds.includes('initial') && previousBranchIds.length === 1\n  );\n}\n\nexport function treeIsErrorFree(tree): boolean {\n  return !tree.error;\n}\n\nexport function nodeHasOptions(node): node is OperatorTreeNodeWithOptions {\n  return !!node.options;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { catchError, filter, map, mapTo, shareReplay } from 'rxjs/operators';\nimport { OperatorDecisionTree, OperatorTreeNode, State } from './interfaces';\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\nimport { isInitialDecision, nodeHasOptions, treeIsErrorFree } from './utils';\n\n@Injectable()\nexport class OperatorDecisionTreeService {\n  private initialState: State = {\n    previousBranchIds: ['initial'],\n    currentBranchId: 'initial'\n  };\n  private state$ = new BehaviorSubject<State>(this.initialState);\n  private tree$: Observable<\n    OperatorDecisionTree\n  > = this.dataService.getDecisionTree$().pipe(\n    catchError(error => of({ error })), // This helps if the JSON for some reason fails to get fetched\n    shareReplay()\n  );\n\n  currentSentence$: Observable<string> = combineLatest(\n    this.tree$,\n    this.state$\n  ).pipe(\n    filter(([tree]) => treeIsErrorFree(tree)),\n    map(([tree, { previousBranchIds }]) =>\n      isInitialDecision(previousBranchIds)\n        ? 'Start by choosing an option from the list below.'\n        : `${previousBranchIds\n            .map(entityId => {\n              return tree[entityId].label;\n            })\n            .join(' ')}...`.trim()\n    )\n  );\n\n  options$: Observable<(OperatorTreeNode)[]> = combineLatest(\n    this.tree$,\n    this.state$\n  ).pipe(\n    filter(([tree, state]) => {\n      return (\n        treeIsErrorFree(tree) &&\n        !!tree[state.currentBranchId] &&\n        !!tree[state.currentBranchId].options\n      );\n    }),\n    map(([tree, state]) => {\n      // Project is currently using TypeScript 2.9.2\n      // With TS 3.1+ this can be done better if we map to [tree, node] and typeguard with a tuple in a filter\n      // filter((a): a is [OperatorDecisionTree, OperatorTreeNodeWithOptions] => !a[0].error && !!a[1].options)\n      const node = tree[state.currentBranchId];\n      return nodeHasOptions(node)\n        ? node.options.map(option => tree[option])\n        : tree['initial'].options.map(option => tree[option]);\n    })\n  );\n\n  isBeyondInitialQuestion$: Observable<boolean> = this.state$.pipe(\n    map(({ currentBranchId }) => currentBranchId !== 'initial')\n  );\n\n  // This helps if the JSON for some reason fails to get fetched\n  hasError$ = this.tree$.pipe(\n    filter(tree => !!tree.error),\n    mapTo(true)\n  );\n\n  constructor(private dataService: OperatorDecisionTreeDataService) {}\n\n  private get snapShot(): State {\n    return this.state$.getValue();\n  }\n\n  selectOption(optionId: string): void {\n    this.state$.next({\n      previousBranchIds: [...this.snapShot.previousBranchIds, optionId],\n      currentBranchId: optionId\n    });\n  }\n\n  back(): void {\n    const previousOptionId = this.snapShot.previousBranchIds[\n      this.snapShot.previousBranchIds.length - 2\n    ];\n\n    if (previousOptionId) {\n      this.state$.next({\n        previousBranchIds: [\n          ...this.snapShot.previousBranchIds.slice(\n            0,\n            this.snapShot.previousBranchIds.length - 1\n          )\n        ],\n        currentBranchId: previousOptionId\n      });\n    }\n  }\n\n  startOver(): void {\n    this.state$.next(this.initialState);\n  }\n}\n","/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n//# sourceMappingURL=shareReplay.js.map\n","import { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { catchError, filter, map, mapTo, shareReplay } from 'rxjs/operators';\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\nimport { isInitialDecision, nodeHasOptions, treeIsErrorFree } from './utils';\nvar OperatorDecisionTreeService = /** @class */ (function () {\n    function OperatorDecisionTreeService(dataService) {\n        this.dataService = dataService;\n        this.initialState = {\n            previousBranchIds: ['initial'],\n            currentBranchId: 'initial'\n        };\n        this.state$ = new BehaviorSubject(this.initialState);\n        this.tree$ = this.dataService.getDecisionTree$().pipe(catchError(function (error) { return of({ error: error }); }), // This helps if the JSON for some reason fails to get fetched\n        shareReplay());\n        this.currentSentence$ = combineLatest(this.tree$, this.state$).pipe(filter(function (_a) {\n            var tree = _a[0];\n            return treeIsErrorFree(tree);\n        }), map(function (_a) {\n            var tree = _a[0], previousBranchIds = _a[1].previousBranchIds;\n            return isInitialDecision(previousBranchIds)\n                ? 'Start by choosing an option from the list below.'\n                : (previousBranchIds\n                    .map(function (entityId) {\n                    return tree[entityId].label;\n                })\n                    .join(' ') + \"...\").trim();\n        }));\n        this.options$ = combineLatest(this.tree$, this.state$).pipe(filter(function (_a) {\n            var tree = _a[0], state = _a[1];\n            return (treeIsErrorFree(tree) &&\n                !!tree[state.currentBranchId] &&\n                !!tree[state.currentBranchId].options);\n        }), map(function (_a) {\n            var tree = _a[0], state = _a[1];\n            // Project is currently using TypeScript 2.9.2\n            // With TS 3.1+ this can be done better if we map to [tree, node] and typeguard with a tuple in a filter\n            // filter((a): a is [OperatorDecisionTree, OperatorTreeNodeWithOptions] => !a[0].error && !!a[1].options)\n            var node = tree[state.currentBranchId];\n            return nodeHasOptions(node)\n                ? node.options.map(function (option) { return tree[option]; })\n                : tree['initial'].options.map(function (option) { return tree[option]; });\n        }));\n        this.isBeyondInitialQuestion$ = this.state$.pipe(map(function (_a) {\n            var currentBranchId = _a.currentBranchId;\n            return currentBranchId !== 'initial';\n        }));\n        // This helps if the JSON for some reason fails to get fetched\n        this.hasError$ = this.tree$.pipe(filter(function (tree) { return !!tree.error; }), mapTo(true));\n    }\n    Object.defineProperty(OperatorDecisionTreeService.prototype, \"snapShot\", {\n        get: function () {\n            return this.state$.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OperatorDecisionTreeService.prototype.selectOption = function (optionId) {\n        this.state$.next({\n            previousBranchIds: this.snapShot.previousBranchIds.concat([optionId]),\n            currentBranchId: optionId\n        });\n    };\n    OperatorDecisionTreeService.prototype.back = function () {\n        var previousOptionId = this.snapShot.previousBranchIds[this.snapShot.previousBranchIds.length - 2];\n        if (previousOptionId) {\n            this.state$.next({\n                previousBranchIds: this.snapShot.previousBranchIds.slice(0, this.snapShot.previousBranchIds.length - 1).slice(),\n                currentBranchId: previousOptionId\n            });\n        }\n    };\n    OperatorDecisionTreeService.prototype.startOver = function () {\n        this.state$.next(this.initialState);\n    };\n    return OperatorDecisionTreeService;\n}());\nexport { OperatorDecisionTreeService };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./operator-decision-tree.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"../../../../node_modules/@angular/material/button/typings/index.ngfactory\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/cdk/platform\";\nimport * as i5 from \"@angular/cdk/a11y\";\nimport * as i6 from \"@angular/platform-browser/animations\";\nimport * as i7 from \"../../../../node_modules/@angular/material/card/typings/index.ngfactory\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"./operator-decision-tree.component\";\nimport * as i12 from \"./operator-decision-tree.service\";\nimport * as i13 from \"../../shared/scroll.service\";\nvar styles_OperatorDecisionTreeComponent = [i0.styles];\nvar RenderType_OperatorDecisionTreeComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_OperatorDecisionTreeComponent, data: { \"animation\": [{ type: 7, name: \"flyIn\", definitions: [{ type: 0, name: \"in\", styles: { type: 6, styles: { transform: \"translateX(0)\" }, offset: null }, options: undefined }, { type: 1, expr: \":enter\", animation: [{ type: 6, styles: { transform: \"translateX(-100%)\" }, offset: null }, { type: 4, styles: null, timings: 250 }], options: null }], options: {} }] } });\nexport { RenderType_OperatorDecisionTreeComponent as RenderType_OperatorDecisionTreeComponent };\nfunction View_OperatorDecisionTreeComponent_2(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 7, null, null, null, null, null, null, null)), (_l()(), i1.ɵeld(1, 0, null, null, 6, \"section\", [], null, null, null, null, null)), (_l()(), i1.ɵeld(2, 0, null, null, 2, \"button\", [[\"class\", \"back\"], [\"mat-button\", \"\"]], [[8, \"disabled\", 0], [2, \"_mat-animation-noopable\", null]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.back() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, i2.View_MatButton_0, i2.RenderType_MatButton)), i1.ɵdid(3, 180224, null, 0, i3.MatButton, [i1.ElementRef, i4.Platform, i5.FocusMonitor, [2, i6.ANIMATION_MODULE_TYPE]], null, null), (_l()(), i1.ɵted(-1, 0, [\"Back\"])), (_l()(), i1.ɵeld(5, 0, null, null, 2, \"button\", [[\"class\", \"start-over\"], [\"color\", \"warn\"], [\"mat-button\", \"\"]], [[8, \"disabled\", 0], [2, \"_mat-animation-noopable\", null]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.startOver() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, i2.View_MatButton_0, i2.RenderType_MatButton)), i1.ɵdid(6, 180224, null, 0, i3.MatButton, [i1.ElementRef, i4.Platform, i5.FocusMonitor, [2, i6.ANIMATION_MODULE_TYPE]], { color: [0, \"color\"] }, null), (_l()(), i1.ɵted(-1, 0, [\"Start Over\"]))], function (_ck, _v) { var currVal_4 = \"warn\"; _ck(_v, 6, 0, currVal_4); }, function (_ck, _v) { var currVal_0 = (i1.ɵnov(_v, 3).disabled || null); var currVal_1 = (i1.ɵnov(_v, 3)._animationMode === \"NoopAnimations\"); _ck(_v, 2, 0, currVal_0, currVal_1); var currVal_2 = (i1.ɵnov(_v, 6).disabled || null); var currVal_3 = (i1.ɵnov(_v, 6)._animationMode === \"NoopAnimations\"); _ck(_v, 5, 0, currVal_2, currVal_3); }); }\nfunction View_OperatorDecisionTreeComponent_4(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 5, null, null, null, null, null, null, null)), (_l()(), i1.ɵeld(1, 0, null, null, 4, \"button\", [[\"class\", \"option mat-body-1\"]], [[24, \"@flyIn\", 0]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.selectOption(_v.parent.context.$implicit.id, $event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i1.ɵeld(2, 0, null, null, 3, \"mat-card\", [[\"class\", \"mat-card mat-ripple\"], [\"matRipple\", \"\"]], [[2, \"mat-ripple-unbounded\", null]], null, null, i7.View_MatCard_0, i7.RenderType_MatCard)), i1.ɵdid(3, 49152, null, 0, i8.MatCard, [], null, null), i1.ɵdid(4, 212992, null, 0, i9.MatRipple, [i1.ElementRef, i1.NgZone, i4.Platform, [2, i9.MAT_RIPPLE_GLOBAL_OPTIONS], [2, i6.ANIMATION_MODULE_TYPE]], null, null), (_l()(), i1.ɵted(5, 0, [\" \", \" \"]))], function (_ck, _v) { _ck(_v, 4, 0); }, function (_ck, _v) { var currVal_0 = undefined; _ck(_v, 1, 0, currVal_0); var currVal_1 = i1.ɵnov(_v, 4).unbounded; _ck(_v, 2, 0, currVal_1); var currVal_2 = _v.parent.context.$implicit.label; _ck(_v, 5, 0, currVal_2); }); }\nfunction View_OperatorDecisionTreeComponent_6(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 4, \"p\", [[\"class\", \"mat-body-1\"]], null, null, null, null, null)), (_l()(), i1.ɵted(1, null, [\" You want the \", \" of the \", \" \"])), (_l()(), i1.ɵeld(2, 0, null, null, 1, \"a\", [], [[8, \"href\", 4]], null, null, null, null)), (_l()(), i1.ɵted(3, null, [\"\", \"\"])), (_l()(), i1.ɵted(-1, null, [\". \"]))], null, function (_ck, _v) { var currVal_0 = _v.parent.parent.context.$implicit.method; var currVal_1 = _v.parent.parent.context.$implicit.docType; _ck(_v, 1, 0, currVal_0, currVal_1); var currVal_2 = i1.ɵinlineInterpolate(2, \"\", _v.parent.parent.context.$implicit.path, \"#\", _v.parent.parent.context.$implicit.method, \"\"); _ck(_v, 2, 0, currVal_2); var currVal_3 = _v.parent.parent.context.$implicit.label; _ck(_v, 3, 0, currVal_3); }); }\nfunction View_OperatorDecisionTreeComponent_7(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 4, \"p\", [[\"class\", \"mat-body-1\"]], null, null, null, null, null)), (_l()(), i1.ɵted(1, null, [\" You want the \", \" \"])), (_l()(), i1.ɵeld(2, 0, null, null, 1, \"a\", [], [[8, \"href\", 4]], null, null, null, null)), (_l()(), i1.ɵted(3, null, [\"\", \"\"])), (_l()(), i1.ɵted(-1, null, [\". \"]))], null, function (_ck, _v) { var currVal_0 = _v.parent.parent.context.$implicit.docType; _ck(_v, 1, 0, currVal_0); var currVal_1 = i1.ɵinlineInterpolate(1, \"\", _v.parent.parent.context.$implicit.path, \"\"); _ck(_v, 2, 0, currVal_1); var currVal_2 = _v.parent.parent.context.$implicit.label; _ck(_v, 3, 0, currVal_2); }); }\nfunction View_OperatorDecisionTreeComponent_5(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵand(16777216, null, null, 1, null, View_OperatorDecisionTreeComponent_6)), i1.ɵdid(1, 16384, null, 0, i10.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_OperatorDecisionTreeComponent_7)), i1.ɵdid(3, 16384, null, 0, i10.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i1.ɵand(0, null, null, 0))], function (_ck, _v) { var currVal_0 = _v.parent.context.$implicit.method; _ck(_v, 1, 0, currVal_0); var currVal_1 = !_v.parent.context.$implicit.method; _ck(_v, 3, 0, currVal_1); }, null); }\nfunction View_OperatorDecisionTreeComponent_3(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 3, null, null, null, null, null, null, null)), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_OperatorDecisionTreeComponent_4)), i1.ɵdid(2, 16384, null, 0, i10.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, \"ngIf\"], ngIfElse: [1, \"ngIfElse\"] }, null), (_l()(), i1.ɵand(0, [[\"operatorTempalte\", 2]], null, 0, null, View_OperatorDecisionTreeComponent_5))], function (_ck, _v) { var currVal_0 = _v.context.$implicit.options; var currVal_1 = i1.ɵnov(_v, 3); _ck(_v, 2, 0, currVal_0, currVal_1); }, null); }\nfunction View_OperatorDecisionTreeComponent_1(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 10, null, null, null, null, null, null, null)), (_l()(), i1.ɵeld(1, 0, null, null, 2, \"h2\", [[\"class\", \"mat-subheading-2\"], [\"tabindex\", \"0\"]], null, null, null, null, null)), (_l()(), i1.ɵted(2, null, [\" \", \" \"])), i1.ɵpid(131072, i10.AsyncPipe, [i1.ChangeDetectorRef]), (_l()(), i1.ɵand(16777216, null, null, 2, null, View_OperatorDecisionTreeComponent_2)), i1.ɵdid(5, 16384, null, 0, i10.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), i1.ɵpid(131072, i10.AsyncPipe, [i1.ChangeDetectorRef]), (_l()(), i1.ɵeld(7, 0, null, null, 3, \"div\", [], null, null, null, null, null)), (_l()(), i1.ɵand(16777216, null, null, 2, null, View_OperatorDecisionTreeComponent_3)), i1.ɵdid(9, 278528, null, 0, i10.NgForOf, [i1.ViewContainerRef, i1.TemplateRef, i1.IterableDiffers], { ngForOf: [0, \"ngForOf\"] }, null), i1.ɵpid(131072, i10.AsyncPipe, [i1.ChangeDetectorRef])], function (_ck, _v) { var _co = _v.component; var currVal_1 = i1.ɵunv(_v, 5, 0, i1.ɵnov(_v, 6).transform(_co.isBeyondInitialQuestion$)); _ck(_v, 5, 0, currVal_1); var currVal_2 = i1.ɵunv(_v, 9, 0, i1.ɵnov(_v, 10).transform(_co.options$)); _ck(_v, 9, 0, currVal_2); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = i1.ɵunv(_v, 2, 0, i1.ɵnov(_v, 3).transform(_co.currentSentence$)); _ck(_v, 2, 0, currVal_0); }); }\nfunction View_OperatorDecisionTreeComponent_8(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 7, \"div\", [[\"class\", \"mat-body-1 error\"]], null, null, null, null, null)), (_l()(), i1.ɵeld(1, 0, null, null, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, [\"Oops! There was an issue loading the decision tree.. we're real sorry about that. Please try reloading the page.\"])), (_l()(), i1.ɵeld(3, 0, null, null, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, [\"You can also try \"])), (_l()(), i1.ɵeld(5, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/ReactiveX/rxjs/issues/new?template=documentation.md\"], [\"target\", \"_blank\"]], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, [\"submitting an issue on Github\"])), (_l()(), i1.ɵted(-1, null, [\".\"]))], null, null); }\nexport function View_OperatorDecisionTreeComponent_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"h1\", [[\"class\", \"mat-heading\"], [\"tabindex\", \"0\"]], null, null, null, null, null)), (_l()(), i1.ɵted(-1, null, [\" Operator Decision Tree\\n\"])), (_l()(), i1.ɵand(16777216, null, null, 2, null, View_OperatorDecisionTreeComponent_1)), i1.ɵdid(3, 16384, null, 0, i10.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, \"ngIf\"], ngIfElse: [1, \"ngIfElse\"] }, null), i1.ɵpid(131072, i10.AsyncPipe, [i1.ChangeDetectorRef]), (_l()(), i1.ɵand(0, [[\"hasErrorTemplate\", 2]], null, 0, null, View_OperatorDecisionTreeComponent_8))], function (_ck, _v) { var _co = _v.component; var currVal_0 = !i1.ɵunv(_v, 3, 0, i1.ɵnov(_v, 4).transform(_co.hasError$)); var currVal_1 = i1.ɵnov(_v, 5); _ck(_v, 3, 0, currVal_0, currVal_1); }, null); }\nexport function View_OperatorDecisionTreeComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"aio-operator-decision-tree\", [], null, null, null, View_OperatorDecisionTreeComponent_0, RenderType_OperatorDecisionTreeComponent)), i1.ɵdid(1, 180224, null, 0, i11.OperatorDecisionTreeComponent, [i12.OperatorDecisionTreeService, i13.ScrollService], null, null)], null, null); }\nvar OperatorDecisionTreeComponentNgFactory = i1.ɵccf(\"aio-operator-decision-tree\", i11.OperatorDecisionTreeComponent, View_OperatorDecisionTreeComponent_Host_0, {}, {}, []);\nexport { OperatorDecisionTreeComponentNgFactory as OperatorDecisionTreeComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"h2[_ngcontent-%COMP%]{max-width:700px}button.option[_ngcontent-%COMP%]{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);border-radius:34px;border:0;cursor:pointer;display:block;margin-bottom:12px;padding:0;text-align:left}button.option[_ngcontent-%COMP%]:active, button.option[_ngcontent-%COMP%]:focus, button.option[_ngcontent-%COMP%]:hover{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}button.option[_ngcontent-%COMP%]:active   mat-card[_ngcontent-%COMP%], button.option[_ngcontent-%COMP%]:focus   mat-card[_ngcontent-%COMP%], button.option[_ngcontent-%COMP%]:hover   mat-card[_ngcontent-%COMP%]{background-color:#303f9f;color:#fff}mat-card[_ngcontent-%COMP%]{border-radius:34px;padding:12px 24px;transition:250ms}section[_ngcontent-%COMP%]{margin-bottom:16px}\"];\nexport { styles as styles };\n","<h1 class=\"mat-heading\" tabindex=\"0\">\n  Operator Decision Tree\n</h1>\n<ng-container *ngIf=\"!(hasError$ | async); else hasErrorTemplate\">\n  <h2 class=\"mat-subheading-2\" tabindex=\"0\">\n    {{currentSentence$ | async}}\n  </h2>\n  <ng-container *ngIf=\"isBeyondInitialQuestion$ | async\">\n    <section>\n      <button \n        (click)=\"back()\"\n        mat-button\n        class=\"back\"\n      >Back</button>\n      <button \n        (click)=\"startOver()\"\n        mat-button\n        color=\"warn\"\n        class=\"start-over\"\n      >Start Over</button>\n    </section>\n  </ng-container>\n  <div>\n    <ng-container *ngFor=\"let option of options$ | async\">\n      <ng-container *ngIf=\"option.options; else operatorTempalte\">\n        <button \n          class=\"option mat-body-1\"\n          (click)=\"selectOption(option.id, $event)\"\n          [@flyIn]\n        >\n          <mat-card matRipple>\n            {{option.label}}\n          </mat-card>\n        </button>\n      </ng-container>\n      <ng-template #operatorTempalte>\n        <p *ngIf=\"option.method\" class=\"mat-body-1\">\n          You want the {{option.method}} of the {{option.docType}} \n          <a href=\"{{option.path}}#{{option.method}}\">{{option.label}}</a>.\n        </p>\n        <p *ngIf=\"!option.method\" class=\"mat-body-1\">\n          You want the {{option.docType}} \n          <a href=\"{{option.path}}\">{{option.label}}</a>.\n        </p>\n      </ng-template>\n    </ng-container>\n  </div>\n</ng-container>\n\n<ng-template #hasErrorTemplate>\n  <div class=\"mat-body-1 error\">\n    <p>Oops! There was an issue loading the decision tree.. we're real sorry about that. Please try reloading the page.</p>\n    <p>You can also try <a href=\"https://github.com/ReactiveX/rxjs/issues/new?template=documentation.md\" target=\"_blank\">submitting an issue on Github</a>.</p>\n  </div>\n</ng-template>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OperatorDecisionTree } from './interfaces';\n\n@Injectable()\nexport class OperatorDecisionTreeDataService {\n  constructor(private http: HttpClient) {}\n\n  getDecisionTree$(): Observable<OperatorDecisionTree> {\n    return this.http.get<OperatorDecisionTree>(\n      '/generated/docs/app/decision-tree-data.json'\n    );\n  }\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./operator-decision-tree.module\";\nimport * as i2 from \"./operator-decision-tree.component.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"./operator-decision-tree-data.service\";\nimport * as i5 from \"@angular/common/http\";\nimport * as i6 from \"./operator-decision-tree.service\";\nimport * as i7 from \"../../shared/scroll.service\";\nimport * as i8 from \"@angular/platform-browser\";\nimport * as i9 from \"@angular/cdk/bidi\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"@angular/cdk/platform\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"@angular/material/card\";\nvar OperatorDecisionTreeModuleNgFactory = i0.ɵcmf(i1.OperatorDecisionTreeModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.OperatorDecisionTreeComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i4.OperatorDecisionTreeDataService, i4.OperatorDecisionTreeDataService, [i5.HttpClient]), i0.ɵmpd(4608, i6.OperatorDecisionTreeService, i6.OperatorDecisionTreeService, [i4.OperatorDecisionTreeDataService]), i0.ɵmpd(4608, i7.ScrollService, i7.ScrollService, [i8.DOCUMENT, i3.PlatformLocation]), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i9.BidiModule, i9.BidiModule, []), i0.ɵmpd(1073742336, i10.MatCommonModule, i10.MatCommonModule, [[2, i10.MATERIAL_SANITY_CHECKS]]), i0.ɵmpd(1073742336, i11.PlatformModule, i11.PlatformModule, []), i0.ɵmpd(1073742336, i10.MatRippleModule, i10.MatRippleModule, []), i0.ɵmpd(1073742336, i12.MatButtonModule, i12.MatButtonModule, []), i0.ɵmpd(1073742336, i13.MatCardModule, i13.MatCardModule, []), i0.ɵmpd(1073742336, i1.OperatorDecisionTreeModule, i1.OperatorDecisionTreeModule, [])]); });\nexport { OperatorDecisionTreeModuleNgFactory as OperatorDecisionTreeModuleNgFactory };\n"],"sourceRoot":""}