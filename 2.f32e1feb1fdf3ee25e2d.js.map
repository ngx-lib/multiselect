{"version":3,"sources":["webpack:///./src/app/shared/copier.service.ts","webpack:///./src/app/custom-elements/code/code.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.component.ts.CodeComponent.html","webpack:///./node_modules/@angular/cdk/esm5/portal.es5.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.component.ts","webpack:///./src/app/custom-elements/code/code.component.ts.pre-build-optimizer.js","webpack:///./node_modules/@stackblitz/sdk/bundles/sdk.m.js.pre-build-optimizer.js","webpack:///./src/app/shared/stackblitz.service.ts","webpack:///./src/app/shared/stackblitz.service.ts.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.module.ts","webpack:///./node_modules/@angular/cdk/esm5/overlay.es5.js.pre-build-optimizer.js","webpack:///./tools/stackblitz/rxjs.version.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm5/layout.es5.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/esm5/snack-bar.es5.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/pretty-printer.service.ts","webpack:///./node_modules/@angular/material/snack-bar/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/snack-bar/typings/index.d.ts.MatSnackBarContainer.html","webpack:///./node_modules/@angular/material/snack-bar/typings/index.d.ts.SimpleSnackBar.html"],"names":["__webpack_require__","d","__webpack_exports__","CopierService","prototype","createFake","text","isRTL","document","documentElement","getAttribute","this","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","window","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","length","removeFake","removeChild","copyText","execCommand","err","_shared_stackblitz_service__WEBPACK_IMPORTED_MODULE_7__","RenderType_CodeComponent","_angular_core__WEBPACK_IMPORTED_MODULE_0__","encapsulation","styles","data","View_CodeComponent_1","_l","_v","en","$event","ad","component","doCopy","_ck","ariaLabelCopy","View_CodeComponent_0","codeContainer","_angular_common__WEBPACK_IMPORTED_MODULE_1__","ngIf","hideCopy","language","CodeComponentNgFactory","_code_component__WEBPACK_IMPORTED_MODULE_2__","_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_3__","_pretty_printer_service__WEBPACK_IMPORTED_MODULE_4__","_shared_copier_service__WEBPACK_IMPORTED_MODULE_5__","_shared_logger_service__WEBPACK_IMPORTED_MODULE_6__","linenums","path","region","title","codeFormatted","_angular_core__WEBPACK_IMPORTED_MODULE_1__","throwPortalAlreadyAttachedError","Error","Portal","attach","host","throwNullPortalOutletError","hasAttached","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","ComponentPortal","_super","viewContainerRef","injector","_this","call","tslib__WEBPACK_IMPORTED_MODULE_0__","TemplatePortal","template","context","templateRef","elementRef","undefined","BasePortalOutlet","_isDisposed","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentRef","componentFactory","resolveComponentFactory","createComponent","parentInjector","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","CdkPortal","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","PortalModule","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","CodeComponent","snackbar","pretty","copier","logger","stackblitz","ariaLabelEdit","_code","code","trim","formatDisplayedCode","showMissingCodeMessage","_title","ngOnChanges","indent","lines","leftAlignedCode","Number","MAX_VALUE","split","line","lineIndent","search","Math","min","map","substr","join","setCodeHtml","codeText","getCodeText","formatCode","getLinenums","pipe","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","subscribe","c","src","formattedCode","nativeElement","innerHTML","textContent","getHtmlFromCode","pattern","RegExp","matches","match","log","open","duration","error","editInStackBlitz","openProject","dependencies","rxjs","_tools_stackblitz_rxjs_version__WEBPACK_IMPORTED_MODULE_2___default","a","html","parseInt","isNaN","e","t","random","toString","substring","n","forceEmbedLayout","clickToLoad","openFile","view","hideExplorer","hideNavigation","hideDevTools","devToolsHeight","i","id","hasOwnProperty","height","width","replaceChild","o","getElementById","HTMLElement","r","newWindow","pending","port","onmessage","payload","__reqid","__success","keys","constructor","resolve","reject","type","request","Promise","postMessage","rdc","preview","previewOrigin","writable","editor","applyFsDiff","getFsSnapshot","getDependencies","s","p","l","name","u","method","description","tags","JSON","stringify","settings","files","h","connect","contentWindow","Element","find","element","action","vm","ports","clearInterval","removeEventListener","addEventListener","setInterval","splice","push","openGithubProject","target","submit","openProjectId","embedGithubProject","embedProject","outerHTML","contentDocument","write","embedProjectId","sdk_m","stackblitz_service_StackblitzService","StackblitzService","config","_a","codeExtension","ts","typescript","index.html","compile","trigger","clearConsole","ngInjectableDef","core","factory","providedIn","CodeModule","NoopScrollStrategy","enable","disable","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","filter","key","validateVerticalPosition","property","validateHorizontalPosition","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__","classList","add","previousHtmlScrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","scrollWidth","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","isElementScrolledOutsideView","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","noop","close","block","reposition","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__","_angular_common__WEBPACK_IMPORTED_MODULE_3__","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","OverlayContainer","_containerElement","getContainerElement","_createContainer","container","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_backdropElement","_backdropClick","rxjs__WEBPACK_IMPORTED_MODULE_5__","_attachments","_detachments","_keydownEventsObservable","rxjs__WEBPACK_IMPORTED_MODULE_6__","observer","subscription","attachResult","positionStrategy","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","rxjs__WEBPACK_IMPORTED_MODULE_7__","children","isAttached","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","apply","updateSize","sizeConfig","tslib__WEBPACK_IMPORTED_MODULE_4__","setDirection","dir","direction","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId_1","finishDetach_1","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","rxjs__WEBPACK_IMPORTED_MODULE_8__","EMPTY","_offsetX","_offsetY","_positionChangeSubscriptions","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","change","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","origin","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit_1","score","weight","lastPosition","withScrollableContainers","withPositions","positions","withViewportMargin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","originX","startX","_isRtl","endX","y","originY","overlayStartX","overlayX","overlayY","point","overlay","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","fit","availableHeight","availableWidth","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","changeEvent","connectionPair","scrollableViewProperties","_getScrollVisibility","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","alignItems","justifyContent","extendStyles","_getExactOverlayY","_getExactOverlayX","transformString","transform","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","arguments","reduce","currentValue","currentOverflow","axis","pair","dest","source","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","OverlayPositionBuilder","global","flexibleConnectedTo","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_11__","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_12__","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","module","exports","version","mediaQueryStyleNode","mediaQueriesForWebkitCompatibility","Set","layout_es5_MediaMatcher","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","head","sheet","insertRule","console","createEmptyStyleRule","platform_es5","media","addListener","removeListener","layout_es5_BreakpointObserver","BreakpointObserver","mediaMatcher","zone","_queries","Map","_destroySubject","Subject","isMatched","splitQueries","coercion_es5","mediaQuery","_registerQuery","mql","observe","observables","observable","combineLatest","breakpointStates","response","breakpoints","state","output","fromEventPattern","addHandler","removeHandler","resultSelector","args","isArray","Observable","subscriber","retValue","handler","isFunction","listener","takeUntil","startWith","nextMql","queries","a1","a2","concat","snack_bar_es5_MatSnackBarRef","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","snack_bar_es5_MatSnackBarContainer","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","tslib_es6","_assertNotAttached","_applySnackBarClasses","onAnimationEnd","toState","fromState","startsWith","_completeExit","onEnter_1","enter","onMicrotaskEmpty","take","panelClasses","Array","portal_es5","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","snack_bar_es5_MatSnackBar","MatSnackBar","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","message","_attachSnackBarContainer","WeakMap","containerPortal","containerRef","instance","content","userConfig","_createOverlay","$implicit","_createInjector","contentRef","state$$1","_animateSnackBar","announce","overlay_es5","isLeft","isRight","a11y_es5","PrettyPrinter","prettyPrintOne","rxjs__WEBPACK_IMPORTED_MODULE_0__","getPrettyPrintOne","ppo","then","__esModule","assign","default","msg","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_12__","RenderType_MatSnackBarContainer","animation","definitions","options","expr","timings","View_MatSnackBarContainer_1","View_MatSnackBarContainer_0","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__","MatSnackBarContainerNgFactory","_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_1__","RenderType_SimpleSnackBar","opacity","View_SimpleSnackBar_1","_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_10__","_angular_material_button__WEBPACK_IMPORTED_MODULE_9__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_11__","_co","disabled","_animationMode","View_SimpleSnackBar_0","hasAction","SimpleSnackBarNgFactory"],"mappings":"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","file":"2.f32e1feb1fdf3ee25e2d.js","sourcesContent":["/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const isRTL = document.documentElement.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || document.documentElement.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./code.component\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"./pretty-printer.service\";\nimport * as i5 from \"../../shared/copier.service\";\nimport * as i6 from \"../../shared/logger.service\";\nimport * as i7 from \"../../shared/stackblitz.service\";\nvar styles_CodeComponent = [];\nvar RenderType_CodeComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_CodeComponent, data: {} });\nexport { RenderType_CodeComponent as RenderType_CodeComponent };\nfunction View_CodeComponent_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 4, \"button\", [[\"class\", \"material-icons copy-button no-print\"], [\"title\", \"Copy code snippet\"]], [[1, \"aria-label\", 0]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.doCopy() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(2, 0, null, null, 1, \"span\", [[\"aria-hidden\", \"true\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"content_copy\"])), (_l()(), i0.ɵted(-1, null, [\"\\n      \"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.ariaLabelCopy; _ck(_v, 0, 0, currVal_0); }); }\nexport function View_CodeComponent_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { codeContainer: 0 }), (_l()(), i0.ɵeld(1, 0, null, null, 6, \"pre\", [], [[8, \"className\", 0]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"      \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_CodeComponent_1)), i0.ɵdid(4, 16384, null, 0, i1.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(6, 0, [[1, 0], [\"codeContainer\", 1]], null, 0, \"code\", [[\"class\", \"animated fadeIn\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_1 = !_co.hideCopy; _ck(_v, 4, 0, currVal_1); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = i0.ɵinlineInterpolate(1, \"prettyprint lang-\", _co.language, \"\"); _ck(_v, 1, 0, currVal_0); }); }\nexport function View_CodeComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"aio-code\", [], null, null, null, View_CodeComponent_0, RenderType_CodeComponent)), i0.ɵdid(1, 573440, null, 0, i2.CodeComponent, [i3.MatSnackBar, i4.PrettyPrinter, i5.CopierService, i6.Logger, i7.StackblitzService], null, null)], null, null); }\nvar CodeComponentNgFactory = i0.ɵccf(\"aio-code\", i2.CodeComponent, View_CodeComponent_Host_0, { hideCopy: \"hideCopy\", language: \"language\", linenums: \"linenums\", path: \"path\", region: \"region\", title: \"title\" }, { codeFormatted: \"codeFormatted\" }, []);\nexport { CodeComponentNgFactory as CodeComponentNgFactory };\n","\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabelCopy\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    ","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nvar  /**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nPortal = /** @class */ (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.attach = /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    };\n    /** Detach this portal from its host */\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    Portal.prototype.detach = /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: /**\n         * Whether this portal is attached to a host.\n         * @return {?}\n         */\n        function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.setAttachedHost = /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nvar  /**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nComponentPortal = /** @class */ (function (_super) {\n    __extends(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector) {\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nvar  /**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nTemplatePortal = /** @class */ (function (_super) {\n    __extends(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef, context) {\n        var _this = _super.call(this) || this;\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        _this.context = context;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    TemplatePortal.prototype.attach = /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    function (host, context) {\n        if (context === void 0) { context = this.context; }\n        this.context = context;\n        return _super.prototype.attach.call(this, host);\n    };\n    /**\n     * @return {?}\n     */\n    TemplatePortal.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this.context = undefined;\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nvar  /**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nBasePortalOutlet = /** @class */ (function () {\n    function BasePortalOutlet() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /** Whether this host has an attached portal. */\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.hasAttached = /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    function () {\n        return !!this._attachedPortal;\n    };\n    /** Attaches a portal. */\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attach = /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    };\n    /** Detaches a previously attached portal. */\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.detach = /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /** Permanently dispose of this portal host. */\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.dispose = /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.setDisposeFn = /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._disposeFn = fn;\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalOutlet.prototype._invokeDisposeFn = /**\n     * @return {?}\n     */\n    function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalOutlet;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nvar  /**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nDomPortalOutlet = /** @class */ (function (_super) {\n    __extends(DomPortalOutlet, _super);\n    function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        var _this = _super.call(this) || this;\n        _this.outletElement = outletElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    DomPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        var _this = this;\n        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var /** @type {?} */ componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    DomPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        var /** @type {?} */ viewContainer = portal.viewContainerRef;\n        var /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            var /** @type {?} */ index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    DomPortalOutlet.prototype.dispose = /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    };\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    DomPortalOutlet.prototype._getComponentRootNode = /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    };\n    return DomPortalOutlet;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nvar CdkPortal = /** @class */ (function (_super) {\n    __extends(CdkPortal, _super);\n    function CdkPortal(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    CdkPortal.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-portal], [cdkPortal], [portal]',\n                    exportAs: 'cdkPortal',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortal.ctorParameters = function () { return [\n        { type: TemplateRef, },\n        { type: ViewContainerRef, },\n    ]; };\n    return CdkPortal;\n}(TemplatePortal));\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nvar CdkPortalOutlet = /** @class */ (function (_super) {\n    __extends(CdkPortalOutlet, _super);\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        _this._isInitialized = false;\n        _this.attached = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n        /** Portal associated with the Portal outlet. */\n        get: /**\n         * Portal associated with the Portal outlet.\n         * @return {?}\n         */\n        function () {\n            return this._attachedPortal;\n        },\n        set: /**\n         * @param {?} portal\n         * @return {?}\n         */\n        function (portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._attachedPortal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n        /** Component or view reference that is attached to the portal. */\n        get: /**\n         * Component or view reference that is attached to the portal.\n         * @return {?}\n         */\n        function () {\n            return this._attachedRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    CdkPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        var /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var /** @type {?} */ ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    CdkPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        var /** @type {?} */ viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    };\n    CdkPortalOutlet.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                    inputs: ['portal: cdkPortalOutlet']\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortalOutlet.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver, },\n        { type: ViewContainerRef, },\n    ]; };\n    CdkPortalOutlet.propDecorators = {\n        \"attached\": [{ type: Output },],\n    };\n    return CdkPortalOutlet;\n}(BasePortalOutlet));\nvar PortalModule = /** @class */ (function () {\n    function PortalModule() {\n    }\n    PortalModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkPortal, CdkPortalOutlet],\n                    declarations: [CdkPortal, CdkPortalOutlet],\n                },] },\n    ];\n    return PortalModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nvar  /**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nPortalInjector = /** @class */ (function () {\n    function PortalInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    PortalInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        var /** @type {?} */ value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return PortalInjector;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n//# sourceMappingURL=portal.es5.js.map\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\nimport { StackblitzService } from 'app/shared/stackblitz.service';\nimport version from '../../../../tools/stackblitz/rxjs.version';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n// <button *ngIf=\"!hideCopy\" class=\"material-icons edit-button no-print\"\n//   title=\"Edit in StackBlitz\"\n//   [attr.aria-label]=\"ariaLabelEdit\"\n//   (click)=\"editInStackBlitz()\">\n//   <span aria-hidden=\"true\">open_in_new</span>\n// </button>\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabelCopy\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabelCopy = '';\n  ariaLabelEdit = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string { return this._code; }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional title to be displayed above the code. */\n  @Input()\n  set title(title: string) {\n    this._title = title;\n    this.ariaLabelCopy = this.title ? `Copy code snippet from ${this.title}` : '';\n    this.ariaLabelEdit = this.title ? `Edit code snippet from ${this.title} in StackBlitz` : '';\n  }\n  get title(): string { return this._title; }\n  private _title: string;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer') codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger,\n    private stackblitz: StackblitzService) { }\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n        .formatCode(leftAlignedCode, this.language, this.getLinenums(leftAlignedCode))\n        .pipe(tap(() => this.codeFormatted.emit()))\n        .subscribe(c => this.setCodeHtml(c), err => { /* ignore failure to format */ }\n    );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Extracts html placed in the `// html: ` comment in the code.  */\n  private getHtmlFromCode(code: string): string {\n    const pattern = new RegExp('// html: (.*)');\n    const matches = code.match(pattern);\n\n    return matches\n      ? matches[1]\n      : '';\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  editInStackBlitz() {\n    this.stackblitz.openProject({\n      code: this.codeText,\n      language: this.language,\n      dependencies: {\n        rxjs: version\n      },\n      html: this.getHtmlFromCode(this.codeText)\n    });\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number) ?\n        (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { ElementRef, EventEmitter, OnChanges } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\nimport { StackblitzService } from 'app/shared/stackblitz.service';\nimport version from '../../../../tools/stackblitz/rxjs.version';\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nvar DEFAULT_LINE_NUMS_COUNT = 10;\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n// <button *ngIf=\"!hideCopy\" class=\"material-icons edit-button no-print\"\n//   title=\"Edit in StackBlitz\"\n//   [attr.aria-label]=\"ariaLabelEdit\"\n//   (click)=\"editInStackBlitz()\">\n//   <span aria-hidden=\"true\">open_in_new</span>\n// </button>\nvar CodeComponent = /** @class */ (function () {\n    function CodeComponent(snackbar, pretty, copier, logger, stackblitz) {\n        this.snackbar = snackbar;\n        this.pretty = pretty;\n        this.copier = copier;\n        this.logger = logger;\n        this.stackblitz = stackblitz;\n        this.ariaLabelCopy = '';\n        this.ariaLabelEdit = '';\n        this.codeFormatted = new EventEmitter();\n    }\n    Object.defineProperty(CodeComponent.prototype, \"code\", {\n        get: function () { return this._code; },\n        /** Code that should be formatted with current inputs and displayed in the view. */\n        set: function (code) {\n            this._code = code;\n            if (!this._code || !this._code.trim()) {\n                this.showMissingCodeMessage();\n            }\n            else {\n                this.formatDisplayedCode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CodeComponent.prototype, \"title\", {\n        get: function () { return this._title; },\n        /** Optional title to be displayed above the code. */\n        set: function (title) {\n            this._title = title;\n            this.ariaLabelCopy = this.title ? \"Copy code snippet from \" + this.title : '';\n            this.ariaLabelEdit = this.title ? \"Edit code snippet from \" + this.title + \" in StackBlitz\" : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CodeComponent.prototype.ngOnChanges = function () {\n        // If some inputs have changed and there is code displayed, update the view with the latest\n        // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    };\n    CodeComponent.prototype.formatDisplayedCode = function () {\n        var _this = this;\n        var leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n        this.pretty\n            .formatCode(leftAlignedCode, this.language, this.getLinenums(leftAlignedCode))\n            .pipe(tap(function () { return _this.codeFormatted.emit(); }))\n            .subscribe(function (c) { return _this.setCodeHtml(c); }, function (err) { });\n    };\n    /** Sets the message showing that the code could not be found. */\n    CodeComponent.prototype.showMissingCodeMessage = function () {\n        var src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n        var srcMsg = src ? \" for\\n\" + src : '.';\n        this.setCodeHtml(\"<p class=\\\"code-missing\\\">The code sample is missing\" + srcMsg + \"</p>\");\n    };\n    /** Sets the innerHTML of the code container to the provided code string. */\n    CodeComponent.prototype.setCodeHtml = function (formattedCode) {\n        // **Security:** Code example content is provided by docs authors and as such its considered to\n        // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    };\n    /** Gets the textContent of the displayed code element. */\n    CodeComponent.prototype.getCodeText = function () {\n        // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n        // container as text, before prettifying it.\n        // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    };\n    /** Extracts html placed in the `// html: ` comment in the code.  */\n    CodeComponent.prototype.getHtmlFromCode = function (code) {\n        var pattern = new RegExp('// html: (.*)');\n        var matches = code.match(pattern);\n        return matches\n            ? matches[1]\n            : '';\n    };\n    /** Copies the code snippet to the user's clipboard. */\n    CodeComponent.prototype.doCopy = function () {\n        var code = this.codeText;\n        var successfullyCopied = this.copier.copyText(code);\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        }\n        else {\n            this.logger.error(new Error(\"ERROR copying code to clipboard: \\\"\" + code + \"\\\"\"));\n            this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n        }\n    };\n    CodeComponent.prototype.editInStackBlitz = function () {\n        this.stackblitz.openProject({\n            code: this.codeText,\n            language: this.language,\n            dependencies: {\n                rxjs: version\n            },\n            html: this.getHtmlFromCode(this.codeText)\n        });\n    };\n    /** Gets the calculated value of linenums (boolean/number). */\n    CodeComponent.prototype.getLinenums = function (code) {\n        var linenums = typeof this.linenums === 'boolean' ? this.linenums :\n            this.linenums === 'true' ? true :\n                this.linenums === 'false' ? false :\n                    typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n                        this.linenums;\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums) ?\n            (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n    };\n    return CodeComponent;\n}());\nexport { CodeComponent };\nfunction leftAlign(text) {\n    var indent = Number.MAX_VALUE;\n    var lines = text.split('\\n');\n    lines.forEach(function (line) {\n        var lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n    return lines.map(function (line) { return line.substr(indent); }).join('\\n').trim();\n}\n","var e=\"300\";function t(){return Math.random().toString(36).substring(7)}function n(e){var t=\"\";return e?(e.forceEmbedLayout&&(t+=\"embed=1\"),e.clickToLoad&&(t+=(t.length?\"&\":\"\")+\"ctl=1\"),e.openFile&&(t+=(t.length?\"&\":\"\")+\"file=\"+e.openFile),!e.view||\"preview\"!==e.view&&\"editor\"!==e.view||(t+=(t.length?\"&\":\"\")+\"view=\"+e.view),e.hideExplorer&&(t+=(t.length?\"&\":\"\")+\"hideExplorer=1\"),e.hideNavigation&&(t+=(t.length?\"&\":\"\")+\"hideNavigation=1;\"),e.hideDevTools&&(t+=(t.length?\"&\":\"\")+\"hidedevtools=1\"),\"number\"==typeof e.devToolsHeight&&e.devToolsHeight>0&&e.devToolsHeight<100&&(t+=(t.length?\"&\":\"\")+\"devtoolsheight=\"+e.devToolsHeight),t.length?\"?\"+t:t):t}function i(t,n,i){if(null===t.parentNode)throw new Error(\"Invalid Element\");n.id=t.id,function(t,n){n&&(n.hasOwnProperty(\"height\")&&(t.height=\"\"+n.height),n.hasOwnProperty(\"width\")&&(t.width=\"\"+n.width));t.height||(t.height=e);t.width||t.setAttribute(\"style\",\"width:100%;\")}(n,i),t.parentNode.replaceChild(n,t)}function o(e){if(\"string\"==typeof e){var t=document.getElementById(e);if(null!==t)return t}else if(e instanceof HTMLElement)return e;throw new Error(\"Invalid Element\")}function r(e){return e&&!1===e.newWindow?\"_self\":\"_blank\"}var a=function(e){var t=this;this.pending={},this.port=e,this.port.onmessage=function(e){if(e.data.payload.__reqid){var n=e.data.payload.__reqid,i=e.data.payload.__success;if(t.pending[n]){if(delete e.data.payload.__reqid,delete e.data.payload.__success,i){var o=0===Object.keys(e.data.payload).length&&e.data.payload.constructor===Object?null:e.data.payload;t.pending[n].resolve(o)}else{t.pending[n].reject(e.data.payload.error?e.data.type+\": \"+e.data.payload.error:e.data.type)}delete t.pending[n]}}}};a.prototype.request=function(e){var n=this,i=t();return new Promise(function(t,o){n.pending[i]={resolve:t,reject:o},e.payload.__reqid=i,n.port.postMessage(e)})};var d=function(e,t){var n=this;this.rdc=new a(e),this.preview={},Object.defineProperty(this.preview,\"origin\",{value:t.previewOrigin,writable:!1}),this.editor={openFile:function(e){return n.rdc.request({type:\"SDK_OPEN_FILE\",payload:{path:e}})}}};d.prototype.applyFsDiff=function(e){return this.rdc.request({type:\"SDK_APPLY_FS_DIFF\",payload:e})},d.prototype.getFsSnapshot=function(){return this.rdc.request({type:\"SDK_GET_FS_SNAPSHOT\",payload:{}})},d.prototype.getDependencies=function(){return this.rdc.request({type:\"SDK_GET_DEPS_SNAPSHOT\",payload:{}})};var c=[],s=[\"typescript\",\"create-react-app\",\"angular-cli\",\"javascript\"],p=\"https://stackblitz.com/run\";function l(e,t){var n=document.createElement(\"input\");return n.type=\"hidden\",n.name=e,n.value=t,n}function u(e){if(-1===s.indexOf(e.template))throw new Error(\"Unsupported project template, must be one of: \"+s.join(\", \"));var t=document.createElement(\"form\");return t.method=\"POST\",t.setAttribute(\"style\",\"display:none;\"),t.appendChild(l(\"project[title]\",e.title)),t.appendChild(l(\"project[description]\",e.description)),t.appendChild(l(\"project[template]\",e.template)),e.tags&&e.tags.forEach(function(e){t.appendChild(l(\"project[tags][]\",e))}),e.dependencies&&t.appendChild(l(\"project[dependencies]\",JSON.stringify(e.dependencies))),e.settings&&t.appendChild(l(\"project[settings]\",JSON.stringify(e.settings))),Object.keys(e.files).forEach(function(n){t.appendChild(l(\"project[files][\"+n+\"]\",e.files[n]))}),t}var h={connect:function(e){if(!e||!e.contentWindow)return Promise.reject(\"Provided element is not an iframe.\");var n,i,o=(i=(n=e)instanceof Element?\"element\":\"id\",c.find(function(e){return e[i]===n})||null);return o?o.pending:new function(e){var n=this;this.id=t(),this.element=e,this.pending=new Promise(function(e,t){var i=function(t){t.data.action&&\"SDK_INIT_SUCCESS\"===t.data.action&&t.data.id===n.id&&(n.vm=new d(t.ports[0],t.data.payload),e(n.vm),r())},o=function(){n.element.contentWindow&&n.element.contentWindow.postMessage({action:\"SDK_INIT\",id:n.id},\"*\")};function r(){window.clearInterval(s),window.removeEventListener(\"message\",i)}window.addEventListener(\"message\",i),o();var a=0,s=window.setInterval(function(){if(n.vm)r();else{if(a>=20)return r(),t(\"Timeout: Unable to establish a connection with the StackBlitz VM\"),void c.forEach(function(e,t){e.id===n.id&&c.splice(t,1)});a++,o()}},500)}),c.push(this)}(e).pending},openGithubProject:function(e,t){window.open(\"https://stackblitz.com/github/\"+e+n(t),r(t))},openProject:function(e,t){!function(e,t){var i=u(e);i.action=p+n(t),i.target=r(t),document.body.appendChild(i),i.submit(),document.body.removeChild(i)}(e,t)},openProjectId:function(e,t){window.open(\"https://stackblitz.com/edit/\"+e+n(t),r(t))},embedGithubProject:function(e,t,r){var a=o(e),d=document.createElement(\"iframe\");return d.src=\"https://stackblitz.com/github/\"+t+n(r),i(a,d,r),h.connect(d)},embedProject:function(e,t,r){var a=o(e),d=function(e,t){var i=u(e);return i.action=p+n(t),i.id=\"sb\",\"<html><head><title></title></head><body>\"+i.outerHTML+\"<script>document.getElementById('sb').submit();<\\/script></body></html>\"}(t,r),c=document.createElement(\"iframe\");return i(a,c,r),c.contentDocument&&c.contentDocument.write(d),h.connect(c)},embedProjectId:function(e,t,r){var a=o(e),d=document.createElement(\"iframe\");return d.src=\"https://stackblitz.com/edit/\"+t+n(r),i(a,d,r),h.connect(d)}};export default h;\n//# sourceMappingURL=sdk.m.js.map\n","import StackBlitzkSDK from '@stackblitz/sdk';\nimport { Injectable } from '@angular/core';\nimport { Project } from '@stackblitz/sdk/typings/interfaces';\n\ninterface StackBlitzExampleConfig {\n  code: string;\n  language: string;\n  html?: string;\n  dependencies: {\n    [name: string]: string;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StackblitzService {\n  openProject(config: StackBlitzExampleConfig) {\n    const codeExtension: 'js' | 'ts' = {\n      'ts': 'ts',\n      'typescript': 'ts'\n    }[config.language] || 'js';\n\n    const template: Project['template'] = codeExtension === 'ts'\n      ? 'typescript'\n      : 'javascript';\n\n    StackBlitzkSDK.openProject({\n      files: {\n        'index.html': config.html || '',\n        [`index.${codeExtension}`]: config.code\n      },\n      title: 'RxJS example',\n      description: 'RxJS example',\n      template,\n      tags: ['rxjs', 'demo'],\n      dependencies: config.dependencies,\n      settings: {\n        compile: {\n          trigger: 'auto',\n          action: 'refresh',\n          clearConsole: true,\n        },\n      }\n    }, {\n        devToolsHeight: 50\n    });\n  }\n}\n","import StackBlitzkSDK from '@stackblitz/sdk';\nimport * as i0 from \"@angular/core\";\nvar StackblitzService = /** @class */ (function () {\n    function StackblitzService() {\n    }\n    StackblitzService.prototype.openProject = function (config) {\n        var _a;\n        var codeExtension = {\n            'ts': 'ts',\n            'typescript': 'ts'\n        }[config.language] || 'js';\n        var template = codeExtension === 'ts'\n            ? 'typescript'\n            : 'javascript';\n        StackBlitzkSDK.openProject({\n            files: (_a = {\n                    'index.html': config.html || ''\n                },\n                _a[\"index.\" + codeExtension] = config.code,\n                _a),\n            title: 'RxJS example',\n            description: 'RxJS example',\n            template: template,\n            tags: ['rxjs', 'demo'],\n            dependencies: config.dependencies,\n            settings: {\n                compile: {\n                    trigger: 'auto',\n                    action: 'refresh',\n                    clearConsole: true,\n                },\n            }\n        }, {\n            devToolsHeight: 50\n        });\n    };\n    StackblitzService.ngInjectableDef = i0.defineInjectable({ factory: function StackblitzService_Factory() { return new StackblitzService(); }, token: StackblitzService, providedIn: \"root\" });\n    return StackblitzService;\n}());\nexport { StackblitzService };\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, Inject, Injectable, NgZone, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { __assign, __extends } from 'tslib';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nvar  /**\n * Scroll strategy that doesn't do anything.\n */\nNoopScrollStrategy = /** @class */ (function () {\n    function NoopScrollStrategy() {\n    }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.enable = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.disable = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.attach = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    return NoopScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nvar  /**\n * Initial configuration used when creating an overlay.\n */\nOverlayConfig = /** @class */ (function () {\n    function OverlayConfig(config) {\n        var _this = this;\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        if (config) {\n            Object.keys(config)\n                .filter(function (key) { return typeof config[key] !== 'undefined'; })\n                .forEach(function (key) { return _this[key] = config[key]; });\n        }\n    }\n    return OverlayConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nvar  /**\n * The points of the origin element and the overlay element to connect.\n */\nConnectionPositionPair = /** @class */ (function () {\n    function ConnectionPositionPair(origin, overlay, offsetX, offsetY) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  \\@docs-private\n */\nvar  /**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  \\@docs-private\n */\nScrollingVisibility = /** @class */ (function () {\n    function ScrollingVisibility() {\n    }\n    return ScrollingVisibility;\n}());\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nvar ConnectedOverlayPositionChange = /** @class */ (function () {\n    function ConnectedOverlayPositionChange(connectionPair, /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n    /** @nocollapse */\n    ConnectedOverlayPositionChange.ctorParameters = function () { return [\n        { type: ConnectionPositionPair, },\n        { type: ScrollingVisibility, decorators: [{ type: Optional },] },\n    ]; };\n    return ConnectedOverlayPositionChange;\n}());\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nvar  /**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nBlockScrollStrategy = /** @class */ (function () {\n    function BlockScrollStrategy(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    function () { };\n    /** Blocks page-level scroll while the attached overlay is open. */\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.enable = /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    function () {\n        if (this._canBeEnabled()) {\n            var /** @type {?} */ root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    };\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.disable = /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    function () {\n        if (this._isEnabled) {\n            var /** @type {?} */ html = this._document.documentElement;\n            var /** @type {?} */ body = this._document.body;\n            var /** @type {?} */ previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\n            var /** @type {?} */ previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\n            this._isEnabled = false;\n            html.style.left = this._previousHTMLStyles.left;\n            html.style.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            html.style['scrollBehavior'] = previousHtmlScrollBehavior;\n            body.style['scrollBehavior'] = previousBodyScrollBehavior;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype._canBeEnabled = /**\n     * @return {?}\n     */\n    function () {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        var /** @type {?} */ html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        var /** @type {?} */ body = this._document.body;\n        var /** @type {?} */ viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    };\n    return BlockScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(\"Scroll strategy has already been attached.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nvar  /**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nCloseScrollStrategy = /** @class */ (function () {\n    function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = function () {\n            _this.disable();\n            if (_this._overlayRef.hasAttached()) {\n                _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables the closing of the attached overlay on scroll. */\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.enable = /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._scrollSubscription) {\n            return;\n        }\n        var /** @type {?} */ stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(function () {\n                var /** @type {?} */ scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - _this._initialScrollPosition) > /** @type {?} */ ((/** @type {?} */ ((_this._config)).threshold))) {\n                    _this._detach();\n                }\n                else {\n                    _this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    };\n    /** Disables the closing the attached overlay on scroll. */\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.disable = /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    return CloseScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(function (containerBounds) {\n        var /** @type {?} */ outsideAbove = element.bottom < containerBounds.top;\n        var /** @type {?} */ outsideBelow = element.top > containerBounds.bottom;\n        var /** @type {?} */ outsideLeft = element.right < containerBounds.left;\n        var /** @type {?} */ outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(function (scrollContainerRect) {\n        var /** @type {?} */ clippedAbove = element.top < scrollContainerRect.top;\n        var /** @type {?} */ clippedBelow = element.bottom > scrollContainerRect.bottom;\n        var /** @type {?} */ clippedLeft = element.left < scrollContainerRect.left;\n        var /** @type {?} */ clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nvar  /**\n * Strategy that will update the element position as the user is scrolling.\n */\nRepositionScrollStrategy = /** @class */ (function () {\n    function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables repositioning of the attached overlay on scroll. */\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.enable = /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._scrollSubscription) {\n            var /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n                _this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (_this._config && _this._config.autoClose) {\n                    var /** @type {?} */ overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                    var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    var /** @type {?} */ parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        _this.disable();\n                        _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                    }\n                }\n            });\n        }\n    };\n    /** Disables repositioning of the attached overlay on scroll. */\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.disable = /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    return RepositionScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nvar ScrollStrategyOptions = /** @class */ (function () {\n    function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = function () { return new NoopScrollStrategy(); };\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = function (config) {\n            return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config);\n        };\n        /**\n         * Block scrolling.\n         */\n        this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = function (config) {\n            return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config);\n        };\n        this._document = document;\n    }\n    ScrollStrategyOptions.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    ScrollStrategyOptions.ctorParameters = function () { return [\n        { type: ScrollDispatcher, },\n        { type: ViewportRuler, },\n        { type: NgZone, },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    /** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n    return ScrollStrategyOptions;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nvar OverlayKeyboardDispatcher = /** @class */ (function () {\n    function OverlayKeyboardDispatcher(document) {\n        var _this = this;\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = function (event) {\n            var /** @type {?} */ overlays = _this._attachedOverlays;\n            for (var /** @type {?} */ i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._detach();\n    };\n    /** Add a new overlay to the list of attached overlay refs. */\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.add = /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    };\n    /** Remove an overlay from the list of attached overlay refs. */\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.remove = /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        var /** @type {?} */ index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    };\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype._detach = /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    function () {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    };\n    OverlayKeyboardDispatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayKeyboardDispatcher.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    /** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(inject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n    return OverlayKeyboardDispatcher;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\nvar /** @type {?} */ OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        /** @type {?} */ (\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT)\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nvar OverlayContainer = /** @class */ (function () {\n    function OverlayContainer(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    OverlayContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    };\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    OverlayContainer.prototype.getContainerElement = /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    OverlayContainer.prototype._createContainer = /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    OverlayContainer.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    /** @nocollapse */ OverlayContainer.ngInjectableDef = defineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(inject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n    return OverlayContainer;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\nvar /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        /** @type {?} */ (DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ) // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar  /**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nOverlayRef = /** @class */ (function () {\n    function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document) {\n        var _this = this;\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._keydownEventsObservable = Observable.create(function (observer) {\n            var /** @type {?} */ subscription = _this._keydownEvents.subscribe(observer);\n            _this._keydownEventSubscriptions++;\n            return function () {\n                subscription.unsubscribe();\n                _this._keydownEventSubscriptions--;\n            };\n        });\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n    }\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n        /** The overlay's HTML element */\n        get: /**\n         * The overlay's HTML element\n         * @return {?}\n         */\n        function () {\n            return this._pane;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n        /** The overlay's backdrop HTML element. */\n        get: /**\n         * The overlay's backdrop HTML element.\n         * @return {?}\n         */\n        function () {\n            return this._backdropElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n        /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         */\n        get: /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         * @return {?}\n         */\n        function () {\n            return this._host;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    OverlayRef.prototype.attach = /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    function (portal) {\n        var _this = this;\n        var /** @type {?} */ attachResult = this._portalOutlet.attach(portal);\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(function () {\n            // The overlay could've been detached before the zone has stabilized.\n            if (_this.hasAttached()) {\n                _this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        return attachResult;\n    };\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    OverlayRef.prototype.detach = /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    function () {\n        var _this = this;\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n            this._config.positionStrategy.detach();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n        }\n        var /** @type {?} */ detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets rendered,\n        // even though it's transparent and unclickable. We can't remove the host here immediately,\n        // because the overlay pane's content might still be animating. This stream helps us avoid\n        // interrupting the animation by waiting for the pane to become empty.\n        var /** @type {?} */ subscription = this._ngZone.onStable\n            .asObservable()\n            .pipe(takeUntil(merge(this._attachments, this._detachments)))\n            .subscribe(function () {\n            // Needs a couple of checks for the pane and host, because\n            // they may have been removed by the time the zone stabilizes.\n            if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                if (_this._host && _this._host.parentElement) {\n                    _this._previousHostParent = _this._host.parentElement;\n                    _this._previousHostParent.removeChild(_this._host);\n                }\n                subscription.unsubscribe();\n            }\n        });\n        return detachmentResult;\n    };\n    /** Cleans up the overlay from the DOM. */\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    OverlayRef.prototype.dispose = /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ isAttached = this.hasAttached();\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.dispose();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = /** @type {?} */ ((null));\n        }\n        this._previousHostParent = this._pane = /** @type {?} */ ((null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    };\n    /** Whether the overlay has attached content. */\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    OverlayRef.prototype.hasAttached = /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    function () {\n        return this._portalOutlet.hasAttached();\n    };\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    OverlayRef.prototype.backdropClick = /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    function () {\n        return this._backdropClick.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been attached. */\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    OverlayRef.prototype.attachments = /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    function () {\n        return this._attachments.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been detached. */\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachments = /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    function () {\n        return this._detachments.asObservable();\n    };\n    /** Gets an observable of keydown events targeted to this overlay. */\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.keydownEvents = /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    function () {\n        return this._keydownEventsObservable;\n    };\n    /** Gets the the current overlay configuration, which is immutable. */\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    OverlayRef.prototype.getConfig = /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    function () {\n        return this._config;\n    };\n    /** Updates the position of the overlay based on the position strategy. */\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePosition = /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    function () {\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.apply();\n        }\n    };\n    /** Update the size properties of the overlay. */\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    OverlayRef.prototype.updateSize = /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    function (sizeConfig) {\n        this._config = __assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    };\n    /** Sets the LTR/RTL direction for the overlay. */\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    OverlayRef.prototype.setDirection = /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        this._config = __assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    };\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    OverlayRef.prototype.getDirection = /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    };\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateElementDirection = /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    function () {\n        this._host.setAttribute('dir', this.getDirection());\n    };\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateElementSize = /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    };\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    OverlayRef.prototype._togglePointerEvents = /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    function (enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    };\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype._attachBackdrop = /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        } /** @type {?} */\n        ((\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', function (event) { return _this._backdropClick.next(event); });\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(function () {\n                requestAnimationFrame(function () {\n                    if (_this._backdropElement) {\n                        _this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    };\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateStackingOrder = /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    function () {\n        if (this._host.nextSibling) {\n            /** @type {?} */ ((this._host.parentNode)).appendChild(this._host);\n        }\n    };\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachBackdrop = /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            var /** @type {?} */ timeoutId_1;\n            var /** @type {?} */ finishDetach_1 = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n                clearTimeout(timeoutId_1);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            this._ngZone.runOutsideAngular(function () {\n                /** @type {?} */ ((backdropToDetach)).addEventListener('transitionend', finishDetach_1);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId_1 = this._ngZone.runOutsideAngular(function () { return setTimeout(finishDetach_1, 500); });\n        }\n    };\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    OverlayRef.prototype._toggleClasses = /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (element, cssClasses, isAdd) {\n        var /** @type {?} */ classList = element.classList;\n        coerceArray(cssClasses).forEach(function (cssClass) {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    };\n    return OverlayRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nFlexibleConnectedPositionStrategy = /** @class */ (function () {\n    function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        var _this = this;\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Whether we're performing the very first positioning of the overlay.\n         */\n        this._isInitialRender = true;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = Observable.create(function (observer) {\n            var /** @type {?} */ subscription = _this._positionChanges.subscribe(observer);\n            _this._positionChangeSubscriptions++;\n            return function () {\n                subscription.unsubscribe();\n                _this._positionChangeSubscriptions--;\n            };\n        });\n        this.setOrigin(connectedTo);\n    }\n    Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attaches this position strategy to an overlay. */\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.attach = /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        var _this = this;\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(function () { return _this.apply(); });\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.apply = /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        // @breaking-change 7.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        var /** @type {?} */ originRect = this._originRect;\n        var /** @type {?} */ overlayRect = this._overlayRect;\n        var /** @type {?} */ viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        var /** @type {?} */ flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        var /** @type {?} */ fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            var /** @type {?} */ originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            var /** @type {?} */ overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect: overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            var /** @type {?} */ bestFit = null;\n            var /** @type {?} */ bestScore = -1;\n            for (var _b = 0, flexibleFits_1 = flexibleFits; _b < flexibleFits_1.length; _b++) {\n                var fit_1 = flexibleFits_1[_b];\n                var /** @type {?} */ score = fit_1.boundingBoxRect.width * fit_1.boundingBoxRect.height * (fit_1.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit_1;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(/** @type {?} */ ((bestFit)).position, /** @type {?} */ ((bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n    };\n    /**\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this._resizeSubscription.unsubscribe();\n    };\n    /** Cleanup after the element gets destroyed. */\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.dispose = /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    function () {\n        if (!this._isDisposed) {\n            this.detach();\n            this._boundingBox = null;\n            this._positionChanges.complete();\n            this._isDisposed = true;\n        }\n    };\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    function () {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            var /** @type {?} */ lastPosition = this._lastPosition || this._preferredPositions[0];\n            var /** @type {?} */ originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    function (scrollables) {\n        this.scrollables = scrollables;\n    };\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPositions = /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    function (positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(/** @type {?} */ ((this._lastPosition))) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    };\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withViewportMargin = /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    function (margin) {\n        this._viewportMargin = margin;\n        return this;\n    };\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    function (flexibleDimensions) {\n        if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    };\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    function (growAfterOpen) {\n        if (growAfterOpen === void 0) { growAfterOpen = true; }\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    };\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPush = /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    function (canPush) {\n        if (canPush === void 0) { canPush = true; }\n        this._canPush = canPush;\n        return this;\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withLockedPosition = /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    function (isLocked) {\n        if (isLocked === void 0) { isLocked = true; }\n        this._positionLocked = isLocked;\n        return this;\n    };\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.setOrigin = /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    function (origin) {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n        return this;\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._offsetX = offset;\n        return this;\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._offsetY = offset;\n        return this;\n    };\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    function (selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOriginPoint = /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    function (originRect, pos) {\n        var /** @type {?} */ x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            var /** @type {?} */ startX = this._isRtl() ? originRect.right : originRect.left;\n            var /** @type {?} */ endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        var /** @type {?} */ y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    function (originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        var /** @type {?} */ overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        var /** @type {?} */ overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    };\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayFit = /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    function (point, overlay, viewport, position) {\n        var x = point.x, y = point.y;\n        var /** @type {?} */ offsetX = this._getOffset(position, 'x');\n        var /** @type {?} */ offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        var /** @type {?} */ leftOverflow = 0 - x;\n        var /** @type {?} */ rightOverflow = (x + overlay.width) - viewport.width;\n        var /** @type {?} */ topOverflow = 0 - y;\n        var /** @type {?} */ bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        var /** @type {?} */ visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        var /** @type {?} */ visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        var /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea: visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    };\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    function (fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            var /** @type {?} */ availableHeight = viewport.bottom - point.y;\n            var /** @type {?} */ availableWidth = viewport.right - point.x;\n            var /** @type {?} */ minHeight = this._overlayRef.getConfig().minHeight;\n            var /** @type {?} */ minWidth = this._overlayRef.getConfig().minWidth;\n            var /** @type {?} */ verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            var /** @type {?} */ horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    };\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start The starting point from which the overlay is pushed.\n     * @param {?} overlay The overlay dimensions.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start The starting point from which the overlay is pushed.\n     * @param {?} overlay The overlay dimensions.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    function (start, overlay) {\n        var /** @type {?} */ viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n        // decide which direction to push it.\n        var /** @type {?} */ overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        var /** @type {?} */ overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        var /** @type {?} */ overflowTop = Math.max(viewport.top - start.y, 0);\n        var /** @type {?} */ overflowLeft = Math.max(viewport.left - start.x, 0);\n        // Amount by which to push the overlay in each direction such that it remains on-screen.\n        var /** @type {?} */ pushX, /** @type {?} */ pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = viewport.left - start.x;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = viewport.top - start.y;\n        }\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    };\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._applyPosition = /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    function (position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            var /** @type {?} */ scrollableViewProperties = this._getScrollVisibility();\n            var /** @type {?} */ changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    };\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    function (position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        var /** @type {?} */ elements = /** @type {?} */ ((this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        var /** @type {?} */ xOrigin;\n        var /** @type {?} */ yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (var /** @type {?} */ i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n        }\n    };\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    function (origin, position) {\n        var /** @type {?} */ viewport = this._viewportRect;\n        var /** @type {?} */ isRtl = this._isRtl();\n        var /** @type {?} */ height, /** @type {?} */ top, /** @type {?} */ bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay\n            // is vertically centered on the origin point.\n            var /** @type {?} */ smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n            var /** @type {?} */ previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        var /** @type {?} */ isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        var /** @type {?} */ isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        var /** @type {?} */ width, /** @type {?} */ left, /** @type {?} */ right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay\n            // is horizontally centered on the origin point.\n            var /** @type {?} */ smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x, origin.x - viewport.top);\n            var /** @type {?} */ previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width: width, height: height };\n    };\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    function (origin, position) {\n        var /** @type {?} */ boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        var /** @type {?} */ styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            var /** @type {?} */ maxHeight = this._overlayRef.getConfig().maxHeight;\n            var /** @type {?} */ maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, styles);\n    };\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    function () {\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, /** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        }));\n    };\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    function () {\n        extendStyles(this._pane.style, /** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n        }));\n    };\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    function (originPoint, position) {\n        var /** @type {?} */ styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            extendStyles(styles, this._getExactOverlayY(position, originPoint));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        var /** @type {?} */ transformString = '';\n        var /** @type {?} */ offsetX = this._getOffset(position, 'x');\n        var /** @type {?} */ offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += \"translateX(\" + offsetX + \"px) \";\n        }\n        if (offsetY) {\n            transformString += \"translateY(\" + offsetY + \"px)\";\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    };\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @return {?}\n     */\n    function (position, originPoint) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        var /** @type {?} */ styles = /** @type {?} */ ({ top: null, bottom: null });\n        var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n        // @breaking-change 7.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n        // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n        // a required parameter.\n        var /** @type {?} */ virtualKeyboardOffset = this._overlayContainer ?\n            this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            var /** @type {?} */ documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    };\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @return {?}\n     */\n    function (position, originPoint) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        var /** @type {?} */ styles = /** @type {?} */ ({ left: null, right: null });\n        var /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        var /** @type {?} */ horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            var /** @type {?} */ documentWidth = this._document.documentElement.clientWidth;\n            styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    };\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    function () {\n        // Note: needs fresh rects since the position could've changed.\n        var /** @type {?} */ originBounds = this._origin.getBoundingClientRect();\n        var /** @type {?} */ overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        var /** @type {?} */ scrollContainerBounds = this.scrollables.map(function (scrollable) {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    };\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._subtractOverflows = /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    function (length) {\n        var overflows = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            overflows[_i - 1] = arguments[_i];\n        }\n        return overflows.reduce(function (currentValue, currentOverflow) {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    };\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    function () {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        var /** @type {?} */ width = this._document.documentElement.clientWidth;\n        var /** @type {?} */ height = this._document.documentElement.clientHeight;\n        var /** @type {?} */ scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    };\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._isRtl = /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    function () {\n        return this._overlayRef.getDirection() === 'rtl';\n    };\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._hasExactPosition = /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    function () {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    };\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOffset = /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    function (position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    };\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._validatePositions = /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    function () {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(function (pair) {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    };\n    return FlexibleConnectedPositionStrategy;\n}());\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (var /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 7.0.0\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 7.0.0\n */\nConnectedPositionStrategy = /** @class */ (function () {\n    function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, \n    // @breaking-change 7.0.0 `platform` parameter to be made required.\n    // @breaking-change 7.0.0 `platform` parameter to be made required.\n    platform) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n        /** Whether the we're dealing with an RTL context */\n        get: /**\n         * Whether the we're dealing with an RTL context\n         * @return {?}\n         */\n        function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n        /** Emits an event when the connection point changes. */\n        get: /**\n         * Emits an event when the connection point changes.\n         * @return {?}\n         */\n        function () {\n            return this._positionStrategy.positionChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attach this position strategy to an overlay. */\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.attach = /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    };\n    /** Disposes all resources used by the position strategy. */\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.dispose = /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.dispose();\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.detach = /**\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.detach();\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.apply = /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.apply();\n    };\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.reapplyLastPosition();\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withScrollableContainers = /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    function (scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    };\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withFallbackPosition = /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    function (originPos, overlayPos, offsetX, offsetY) {\n        var /** @type {?} */ position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    };\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withDirection = /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    function (dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetX = /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetY = /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withLockedPosition = /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    function (isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    };\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withPositions = /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    function (positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    };\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.setOrigin = /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    function (origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    };\n    return ConnectedPositionStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nGlobalPositionStrategy = /** @class */ (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.attach = /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        var /** @type {?} */ config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n    };\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.top = /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.left = /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.bottom = /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.right = /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 7.0.0\n     */\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 7.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.width = /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 7.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    };\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 7.0.0\n     */\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 7.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.height = /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 7.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerVertically = /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    };\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.apply = /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef.hasAttached()) {\n            return;\n        }\n        var /** @type {?} */ styles = this._overlayRef.overlayElement.style;\n        var /** @type {?} */ parentStyles = this._overlayRef.hostElement.style;\n        var /** @type {?} */ config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    };\n    /**\n     * Noop implemented as a part of the PositionStrategy interface.\n     * @docs-private\n     */\n    /**\n     * Noop implemented as a part of the PositionStrategy interface.\n     * \\@docs-private\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.dispose = /**\n     * Noop implemented as a part of the PositionStrategy interface.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () { };\n    return GlobalPositionStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nvar OverlayPositionBuilder = /** @class */ (function () {\n    function OverlayPositionBuilder(_viewportRuler, _document, \n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.global = /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    function () {\n        return new GlobalPositionStrategy();\n    };\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 7.0.0\n     */\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 7.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.connectedTo = /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 7.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    };\n    /**\n     * Creates a flexible position strategy.\n     * @param elementRef\n     */\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.flexibleConnectedTo = /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    function (elementRef) {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    };\n    OverlayPositionBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayPositionBuilder.ctorParameters = function () { return [\n        { type: ViewportRuler, },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n        { type: Platform, decorators: [{ type: Optional },] },\n        { type: OverlayContainer, decorators: [{ type: Optional },] },\n    ]; };\n    /** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = defineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n    return OverlayPositionBuilder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Next overlay unique ID.\n */\nvar /** @type {?} */ nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nvar Overlay = /** @class */ (function () {\n    function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    Overlay.prototype.create = /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    function (config) {\n        var /** @type {?} */ host = this._createHostElement();\n        var /** @type {?} */ pane = this._createPaneElement(host);\n        var /** @type {?} */ portalOutlet = this._createPortalOutlet(pane);\n        var /** @type {?} */ overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document);\n    };\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    Overlay.prototype.position = /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    Overlay.prototype._createPaneElement = /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    function (host) {\n        var /** @type {?} */ pane = this._document.createElement('div');\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    };\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    Overlay.prototype._createHostElement = /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    function () {\n        var /** @type {?} */ host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    };\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    Overlay.prototype._createPortalOutlet = /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    function (pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    };\n    Overlay.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Overlay.ctorParameters = function () { return [\n        { type: ScrollStrategyOptions, },\n        { type: OverlayContainer, },\n        { type: ComponentFactoryResolver, },\n        { type: OverlayPositionBuilder, },\n        { type: OverlayKeyboardDispatcher, },\n        { type: Injector, },\n        { type: NgZone, },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n        { type: Directionality, },\n    ]; };\n    return Overlay;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nvar /** @type {?} */ defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n */\nvar /** @type {?} */ CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar CdkOverlayOrigin = /** @class */ (function () {\n    function CdkOverlayOrigin(elementRef) {\n        this.elementRef = elementRef;\n    }\n    CdkOverlayOrigin.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkOverlayOrigin.ctorParameters = function () { return [\n        { type: ElementRef, },\n    ]; };\n    return CdkOverlayOrigin;\n}());\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nvar CdkConnectedOverlay = /** @class */ (function () {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, _scrollStrategy, _dir) {\n        this._overlay = _overlay;\n        this._scrollStrategy = _scrollStrategy;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = this._scrollStrategy();\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\n        get: /**\n         * The offset in pixels for the overlay connection point on the x-axis\n         * @return {?}\n         */\n        function () { return this._offsetX; },\n        set: /**\n         * @param {?} offsetX\n         * @return {?}\n         */\n        function (offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._setPositions(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\n        get: /**\n         * The offset in pixels for the overlay connection point on the y-axis\n         * @return {?}\n         */\n        function () { return this._offsetY; },\n        set: /**\n         * @param {?} offsetY\n         * @return {?}\n         */\n        function (offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._setPositions(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\n        get: /**\n         * Whether or not the overlay should attach a backdrop.\n         * @return {?}\n         */\n        function () { return this._hasBackdrop; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._hasBackdrop = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\n        get: /**\n         * Whether or not the overlay should be locked when scrolling.\n         * @return {?}\n         */\n        function () { return this._lockPosition; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._lockPosition = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDiemsions\", {\n        get: /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         * @return {?}\n         */\n        function () { return this._flexibleDimensions; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._flexibleDimensions = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\n        get: /**\n         * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n         * @return {?}\n         */\n        function () { return this._growAfterOpen; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._growAfterOpen = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\n        get: /**\n         * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n         * @return {?}\n         */\n        function () { return this._push; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._push = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\n        /** The associated overlay reference. */\n        get: /**\n         * The associated overlay reference.\n         * @return {?}\n         */\n        function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\n        /** The element's layout direction. */\n        get: /**\n         * The element's layout direction.\n         * @return {?}\n         */\n        function () {\n            return this._dir ? this._dir.value : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyOverlay();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this._position) {\n            if (changes['positions']) {\n                this._position.withPositions(this.positions);\n            }\n            if (changes['lockPosition']) {\n                this._position.withLockedPosition(this.lockPosition);\n            }\n            if (changes['origin']) {\n                this._position.setOrigin(this.origin.elementRef);\n                if (this.open) {\n                    this._position.apply();\n                }\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    };\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._createOverlay = /**\n     * Creates an overlay\n     * @return {?}\n     */\n    function () {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    };\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._buildConfig = /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ positionStrategy = this._position = this._createPositionStrategy();\n        var /** @type {?} */ overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy: positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        return overlayConfig;\n    };\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._createPositionStrategy = /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ strategy = this._overlay.position()\n            .flexibleConnectedTo(this.origin.elementRef)\n            .withFlexibleDimensions(this.flexibleDiemsions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n        this._setPositions(strategy);\n        strategy.positionChanges.subscribe(function (p) { return _this.positionChange.emit(p); });\n        return strategy;\n    };\n    /**\n     * Sets the primary and fallback positions of a positions strategy,\n     * based on the current directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._setPositions = /**\n     * Sets the primary and fallback positions of a positions strategy,\n     * based on the current directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    function (positionStrategy) {\n        var _this = this;\n        var /** @type {?} */ positions = this.positions.map(function (pos) {\n            return ({\n                originX: pos.originX,\n                originY: pos.originY,\n                overlayX: pos.overlayX,\n                overlayY: pos.overlayY,\n                offsetX: pos.offsetX || _this.offsetX,\n                offsetY: pos.offsetY || _this.offsetY\n            });\n        });\n        positionStrategy.withPositions(positions);\n    };\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._attachOverlay = /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._overlayRef) {\n            this._createOverlay(); /** @type {?} */\n            ((this._overlayRef)).keydownEvents().subscribe(function (event) {\n                _this.overlayKeydown.next(event);\n                if (event.keyCode === ESCAPE) {\n                    _this._detachOverlay();\n                }\n            });\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n                _this.backdropClick.emit(event);\n            });\n        }\n    };\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._detachOverlay = /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._destroyOverlay = /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    CdkConnectedOverlay.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkConnectedOverlay.ctorParameters = function () { return [\n        { type: Overlay, },\n        { type: TemplateRef, },\n        { type: ViewContainerRef, },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] },] },\n        { type: Directionality, decorators: [{ type: Optional },] },\n    ]; };\n    CdkConnectedOverlay.propDecorators = {\n        \"origin\": [{ type: Input, args: ['cdkConnectedOverlayOrigin',] },],\n        \"positions\": [{ type: Input, args: ['cdkConnectedOverlayPositions',] },],\n        \"offsetX\": [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] },],\n        \"offsetY\": [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] },],\n        \"width\": [{ type: Input, args: ['cdkConnectedOverlayWidth',] },],\n        \"height\": [{ type: Input, args: ['cdkConnectedOverlayHeight',] },],\n        \"minWidth\": [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] },],\n        \"minHeight\": [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] },],\n        \"backdropClass\": [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] },],\n        \"viewportMargin\": [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] },],\n        \"scrollStrategy\": [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] },],\n        \"open\": [{ type: Input, args: ['cdkConnectedOverlayOpen',] },],\n        \"hasBackdrop\": [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] },],\n        \"lockPosition\": [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] },],\n        \"flexibleDiemsions\": [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] },],\n        \"growAfterOpen\": [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] },],\n        \"push\": [{ type: Input, args: ['cdkConnectedOverlayPush',] },],\n        \"backdropClick\": [{ type: Output },],\n        \"positionChange\": [{ type: Output },],\n        \"attach\": [{ type: Output },],\n        \"detach\": [{ type: Output },],\n        \"overlayKeydown\": [{ type: Output },],\n    };\n    return CdkConnectedOverlay;\n}());\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/**\n * \\@docs-private\n */\nvar /** @type {?} */ CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar OverlayModule = /** @class */ (function () {\n    function OverlayModule() {\n    }\n    OverlayModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [BidiModule, PortalModule, ScrollDispatchModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [\n                        Overlay,\n                        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                    ],\n                },] },\n    ];\n    return OverlayModule;\n}());\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 7.0.0\n */\nvar /** @type {?} */ OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nvar FullscreenOverlayContainer = /** @class */ (function (_super) {\n    __extends(FullscreenOverlayContainer, _super);\n    function FullscreenOverlayContainer(_document) {\n        return _super.call(this, _document) || this;\n    }\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.ngOnDestroy.call(this);\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._createContainer = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        _super.prototype._createContainer.call(this);\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._containerElement) {\n            return;\n        }\n        var /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n        var /** @type {?} */ parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._getEventName = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    };\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.getFullscreenElement = /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    function () {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (/** @type {?} */ (this._document)).mozFullScreenElement ||\n            (/** @type {?} */ (this._document)).msFullscreenElement ||\n            null;\n    };\n    FullscreenOverlayContainer.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    FullscreenOverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    return FullscreenOverlayContainer;\n}(OverlayContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, validateVerticalPosition, validateHorizontalPosition, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n//# sourceMappingURL=overlay.es5.js.map\n","// Exposes the current RxJS version number from the library's package.json\n// for usage in TypeScript files.\n// (Since said package.json is outside of this TypeScript project, it's not\n// available for a direct TypeScript import).\n\nmodule.exports = require('../../../package.json').version;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LayoutModule = /** @class */ (function () {\n    function LayoutModule() {\n    }\n    LayoutModule.decorators = [\n        { type: NgModule },\n    ];\n    return LayoutModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Global registry for all dynamically-created, injected media queries.\n */\nvar /** @type {?} */ mediaQueriesForWebkitCompatibility = new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n */\nvar /** @type {?} */ mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nvar MediaMatcher = /** @class */ (function () {\n    function MediaMatcher(platform) {\n        this.platform = platform;\n        this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    MediaMatcher.prototype.matchMedia = /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) {\n        if (this.platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    };\n    MediaMatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    MediaMatcher.ctorParameters = function () { return [\n        { type: Platform, },\n    ]; };\n    /** @nocollapse */ MediaMatcher.ngInjectableDef = defineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(inject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n    return MediaMatcher;\n}());\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            (/** @type {?} */ (mediaQueryStyleNode.sheet))\n                .insertRule(\"@media \" + query + \" {.fx-query-test{ }}\", 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (/** @type {?} */ e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: function () { },\n        removeListener: function () { }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nvar BreakpointObserver = /** @class */ (function () {\n    function BreakpointObserver(mediaMatcher, zone) {\n        this.mediaMatcher = mediaMatcher;\n        this.zone = zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    BreakpointObserver.prototype.ngOnDestroy = /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    function () {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    };\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    BreakpointObserver.prototype.isMatched = /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    function (value) {\n        var _this = this;\n        var /** @type {?} */ queries = splitQueries(coerceArray(value));\n        return queries.some(function (mediaQuery) { return _this._registerQuery(mediaQuery).mql.matches; });\n    };\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    BreakpointObserver.prototype.observe = /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    function (value) {\n        var _this = this;\n        var /** @type {?} */ queries = splitQueries(coerceArray(value));\n        var /** @type {?} */ observables = queries.map(function (query) { return _this._registerQuery(query).observable; });\n        return combineLatest(observables).pipe(map(function (breakpointStates) {\n            var /** @type {?} */ response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(function (state) {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            });\n            return response;\n        }));\n    };\n    /**\n     * Registers a specific query to be listened for.\n     * @param {?} query\n     * @return {?}\n     */\n    BreakpointObserver.prototype._registerQuery = /**\n     * Registers a specific query to be listened for.\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) {\n        var _this = this;\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return /** @type {?} */ ((this._queries.get(query)));\n        }\n        var /** @type {?} */ mql = this.mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        var /** @type {?} */ queryObservable = fromEventPattern(\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        function (listener) {\n            mql.addListener(function (e) { return _this.zone.run(function () { return listener(e); }); });\n        }, function (listener) {\n            mql.removeListener(function (e) { return _this.zone.run(function () { return listener(e); }); });\n        })\n            .pipe(takeUntil(this._destroySubject), startWith(mql), map(function (nextMql) { return ({ query: query, matches: nextMql.matches }); }));\n        // Add the MediaQueryList to the set of queries.\n        var /** @type {?} */ output = { observable: queryObservable, mql: mql };\n        this._queries.set(query, output);\n        return output;\n    };\n    BreakpointObserver.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    BreakpointObserver.ctorParameters = function () { return [\n        { type: MediaMatcher, },\n        { type: NgZone, },\n    ]; };\n    /** @nocollapse */ BreakpointObserver.ngInjectableDef = defineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(inject(MediaMatcher), inject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n    return BreakpointObserver;\n}());\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map(function (query) { return query.split(','); })\n        .reduce(function (a1, a2) { return a1.concat(a2); })\n        .map(function (query) { return query.trim(); });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar /** @type {?} */ Breakpoints = {\n    XSmall: '(max-width: 599px)',\n    Small: '(min-width: 600px) and (max-width: 959px)',\n    Medium: '(min-width: 960px) and (max-width: 1279px)',\n    Large: '(min-width: 1280px) and (max-width: 1919px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599px) and (orientation: portrait), ' +\n        '(max-width: 959px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };\n//# sourceMappingURL=layout.es5.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\n    }\n    return new Observable(function (subscriber) {\n        var handler = function () {\n            var e = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                e[_i] = arguments[_i];\n            }\n            return subscriber.next(e.length === 1 ? e[0] : e);\n        };\n        var retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return function () { return removeHandler(handler, retValue); };\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves, AnimationDurations, MatCommonModule } from '@angular/material/core';\nimport { __extends, __assign } from 'tslib';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nvar  /**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nMatSnackBarRef = /** @class */ (function () {\n    function MatSnackBarRef(containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(function () { return _this.dismiss(); });\n        containerInstance._onExit.subscribe(function () { return _this._finishDismiss(); });\n    }\n    /** Dismisses the snack bar. */\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.dismiss = /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    function () {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    };\n    /** Marks the snackbar action clicked. */\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.dismissWithAction = /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    function () {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    };\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 7.0.0\n     */\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 7.0.0\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.closeWithAction = /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 7.0.0\n     * @return {?}\n     */\n    function () {\n        this.dismissWithAction();\n    };\n    /** Dismisses the snack bar after some duration */\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._dismissAfter = /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    function (duration) {\n        var _this = this;\n        this._durationTimeoutId = setTimeout(function () { return _this.dismiss(); }, duration);\n    };\n    /** Marks the snackbar as opened */\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._open = /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    function () {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    };\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._finishDismiss = /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    function () {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    };\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.afterDismissed = /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    function () {\n        return this._afterDismissed.asObservable();\n    };\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.afterOpened = /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    function () {\n        return this.containerInstance._onEnter;\n    };\n    /** Gets an observable that is notified when the snack bar action is called. */\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.onAction = /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    function () {\n        return this._onAction.asObservable();\n    };\n    return MatSnackBarRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n */\nvar /** @type {?} */ MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nvar  /**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nMatSnackBarConfig = /** @class */ (function () {\n    function MatSnackBarConfig() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n    return MatSnackBarConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n */\nvar /** @type {?} */ matSnackBarAnimations = {\n    /** Animation that slides the dialog in and out of view and fades the opacity. */\n    contentFade: trigger('contentFade', [\n        transition(':enter', [\n            style({ opacity: '0' }),\n            animate(AnimationDurations.COMPLEX + \" \" + AnimationCurves.STANDARD_CURVE)\n        ])\n    ]),\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('visible-top, visible-bottom', style({ transform: 'translateY(0%)' })),\n        transition('visible-top => hidden-top, visible-bottom => hidden-bottom', animate(AnimationDurations.EXITING + \" \" + AnimationCurves.ACCELERATION_CURVE)),\n        transition('void => visible-top, void => visible-bottom', animate(AnimationDurations.ENTERING + \" \" + AnimationCurves.DECELERATION_CURVE)),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nvar SimpleSnackBar = /** @class */ (function () {\n    function SimpleSnackBar(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    SimpleSnackBar.prototype.action = /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    function () {\n        this.snackBarRef.dismissWithAction();\n    };\n    Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n        /** If the action button should be shown. */\n        get: /**\n         * If the action button should be shown.\n         * @return {?}\n         */\n        function () {\n            return !!this.data.action;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SimpleSnackBar.decorators = [\n        { type: Component, args: [{selector: 'simple-snack-bar',\n                    template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                    styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;line-height:20px;opacity:1}.mat-simple-snackbar-action{display:flex;flex-direction:column;flex-shrink:0;justify-content:space-around;margin:-8px 0 -8px 8px}.mat-simple-snackbar-action button{flex:1;max-height:36px}[dir=rtl] .mat-simple-snackbar-action{margin-left:0;margin-right:8px}\"],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [matSnackBarAnimations.contentFade],\n                    host: {\n                        '[@contentFade]': '',\n                        'class': 'mat-simple-snackbar',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    SimpleSnackBar.ctorParameters = function () { return [\n        { type: MatSnackBarRef, },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] },] },\n    ]; };\n    return SimpleSnackBar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nvar MatSnackBarContainer = /** @class */ (function (_super) {\n    __extends(MatSnackBarContainer, _super);\n    function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        _this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        _this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        _this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        _this._animationState = 'void';\n        return _this;\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.attachComponentPortal = /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    };\n    /** Attach a template portal as content to this snack bar container. */\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.attachTemplatePortal = /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    };\n    /** Handle end of animations, updating the state of the snackbar. */\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.onAnimationEnd = /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var fromState = event.fromState, toState = event.toState;\n        if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n            this._completeExit();\n        }\n        if (toState.startsWith('visible')) {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            var /** @type {?} */ onEnter_1 = this._onEnter;\n            this._ngZone.run(function () {\n                onEnter_1.next();\n                onEnter_1.complete();\n            });\n        }\n    };\n    /** Begin animation of snack bar entrance into view. */\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.enter = /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    function () {\n        if (!this._destroyed) {\n            this._animationState = \"visible-\" + this.snackBarConfig.verticalPosition;\n            this._changeDetectorRef.detectChanges();\n        }\n    };\n    /** Begin animation of the snack bar exiting from view. */\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.exit = /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    function () {\n        this._animationState = \"hidden-\" + this.snackBarConfig.verticalPosition;\n        return this._onExit;\n    };\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.ngOnDestroy = /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    function () {\n        this._destroyed = true;\n        this._completeExit();\n    };\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._completeExit = /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n            _this._onExit.next();\n            _this._onExit.complete();\n        });\n    };\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._applySnackBarClasses = /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ element = this._elementRef.nativeElement;\n        var /** @type {?} */ panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(function (cssClass) { return element.classList.add(cssClass); });\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    };\n    /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._assertNotAttached = /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    function () {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    };\n    MatSnackBarContainer.decorators = [\n        { type: Component, args: [{selector: 'snack-bar-container',\n                    template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                    styles: [\".mat-snack-bar-container{border-radius:2px;box-sizing:border-box;display:block;margin:24px;max-width:568px;min-width:288px;padding:14px 24px;transform:translateY(100%) translateY(24px)}.mat-snack-bar-container.mat-snack-bar-center{margin:0;transform:translateY(100%)}.mat-snack-bar-container.mat-snack-bar-top{transform:translateY(-100%) translateY(-24px)}.mat-snack-bar-container.mat-snack-bar-top.mat-snack-bar-center{transform:translateY(-100%)}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:0;max-width:inherit;width:100%}\"],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    animations: [matSnackBarAnimations.snackBarState],\n                    host: {\n                        'role': 'alert',\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)'\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatSnackBarContainer.ctorParameters = function () { return [\n        { type: NgZone, },\n        { type: ElementRef, },\n        { type: ChangeDetectorRef, },\n        { type: MatSnackBarConfig, },\n    ]; };\n    MatSnackBarContainer.propDecorators = {\n        \"_portalOutlet\": [{ type: ViewChild, args: [CdkPortalOutlet,] },],\n    };\n    return MatSnackBarContainer;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatSnackBarModule = /** @class */ (function () {\n    function MatSnackBarModule() {\n    }\n    MatSnackBarModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        OverlayModule,\n                        PortalModule,\n                        CommonModule,\n                        MatButtonModule,\n                        MatCommonModule,\n                    ],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                    entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n                },] },\n    ];\n    return MatSnackBarModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n */\nvar /** @type {?} */ MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nvar MatSnackBar = /** @class */ (function () {\n    function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    Object.defineProperty(MatSnackBar.prototype, \"_openedSnackBarRef\", {\n        /** Reference to the currently opened snackbar at *any* level. */\n        get: /**\n         * Reference to the currently opened snackbar at *any* level.\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ parent = this._parentSnackBar;\n            return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.openFromComponent = /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    function (component, config) {\n        return /** @type {?} */ (this._attach(component, config));\n    };\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.openFromTemplate = /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    function (template, config) {\n        return this._attach(template, config);\n    };\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.open = /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    function (message, action, config) {\n        if (action === void 0) { action = ''; }\n        var /** @type {?} */ _config = __assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message: message, action: action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    };\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.dismiss = /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    function () {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    };\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatSnackBar.prototype._attachSnackBarContainer = /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    function (overlayRef, config) {\n        var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var /** @type {?} */ injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        var /** @type {?} */ containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        var /** @type {?} */ containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    };\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    MatSnackBar.prototype._attach = /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    function (content, userConfig) {\n        var /** @type {?} */ config = __assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        var /** @type {?} */ overlayRef = this._createOverlay(config);\n        var /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n        var /** @type {?} */ snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            var /** @type {?} */ portal = new TemplatePortal(content, /** @type {?} */ ((null)), /** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef: snackBarRef\n            }));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            var /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n            var /** @type {?} */ portal = new ComponentPortal(content, undefined, injector);\n            var /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(function (state$$1) {\n            if (state$$1.matches) {\n                overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n            }\n            else {\n                overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n            }\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    };\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatSnackBar.prototype._animateSnackBar = /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    function (snackBarRef, config) {\n        var _this = this;\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(function () {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (_this._openedSnackBarRef == snackBarRef) {\n                _this._openedSnackBarRef = null;\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(function () { return snackBarRef._dismissAfter(/** @type {?} */ ((config.duration))); });\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    MatSnackBar.prototype._createOverlay = /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    function (config) {\n        var /** @type {?} */ overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        var /** @type {?} */ positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        var /** @type {?} */ isRtl = config.direction === 'rtl';\n        var /** @type {?} */ isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        var /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    };\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype._createInjector = /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    function (config, snackBarRef) {\n        var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    };\n    MatSnackBar.decorators = [\n        { type: Injectable, args: [{ providedIn: MatSnackBarModule },] },\n    ];\n    /** @nocollapse */\n    MatSnackBar.ctorParameters = function () { return [\n        { type: Overlay, },\n        { type: LiveAnnouncer, },\n        { type: Injector, },\n        { type: BreakpointObserver, },\n        { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf },] },\n        { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] },] },\n    ]; };\n    /** @nocollapse */ MatSnackBar.ngInjectableDef = defineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n    return MatSnackBar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.es5.js.map\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n  import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // prettify.js is not in window global; load it with webpack loader\n      System.import('assets/js/prettify.js')\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/cdk/overlay\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/cdk/bidi\";\nimport * as i5 from \"@angular/cdk/portal\";\nimport * as i6 from \"@angular/cdk/platform\";\nimport * as i7 from \"@angular/cdk/scrolling\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"../../button/typings/index.ngfactory\";\nimport * as i11 from \"@angular/cdk/a11y\";\nimport * as i12 from \"@angular/platform-browser/animations\";\nvar MatSnackBarModuleNgFactory = i0.ɵcmf(i1.MatSnackBarModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [MatSnackBarContainerNgFactory, SimpleSnackBarNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.Overlay, i2.Overlay, [i2.ScrollStrategyOptions, i2.OverlayContainer, i0.ComponentFactoryResolver, i2.OverlayPositionBuilder, i2.OverlayKeyboardDispatcher, i0.Injector, i0.NgZone, i3.DOCUMENT, i4.Directionality]), i0.ɵmpd(5120, i2.ɵc, i2.ɵd, [i2.Overlay]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i4.BidiModule, i4.BidiModule, []), i0.ɵmpd(1073742336, i5.PortalModule, i5.PortalModule, []), i0.ɵmpd(1073742336, i6.PlatformModule, i6.PlatformModule, []), i0.ɵmpd(1073742336, i7.ScrollDispatchModule, i7.ScrollDispatchModule, []), i0.ɵmpd(1073742336, i2.OverlayModule, i2.OverlayModule, []), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i8.MatCommonModule, i8.MatCommonModule, [[2, i8.MATERIAL_SANITY_CHECKS]]), i0.ɵmpd(1073742336, i8.MatRippleModule, i8.MatRippleModule, []), i0.ɵmpd(1073742336, i9.MatButtonModule, i9.MatButtonModule, []), i0.ɵmpd(1073742336, i1.MatSnackBarModule, i1.MatSnackBarModule, [])]); });\nexport { MatSnackBarModuleNgFactory as MatSnackBarModuleNgFactory };\nvar styles_MatSnackBarContainer = [\".mat-snack-bar-container{border-radius:2px;box-sizing:border-box;display:block;margin:24px;max-width:568px;min-width:288px;padding:14px 24px;transform:translateY(100%) translateY(24px)}.mat-snack-bar-container.mat-snack-bar-center{margin:0;transform:translateY(100%)}.mat-snack-bar-container.mat-snack-bar-top{transform:translateY(-100%) translateY(-24px)}.mat-snack-bar-container.mat-snack-bar-top.mat-snack-bar-center{transform:translateY(-100%)}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:0;max-width:inherit;width:100%}\"];\nvar RenderType_MatSnackBarContainer = i0.ɵcrt({ encapsulation: 2, styles: styles_MatSnackBarContainer, data: { \"animation\": [{ type: 7, name: \"state\", definitions: [{ type: 0, name: \"visible-top, visible-bottom\", styles: { type: 6, styles: { transform: \"translateY(0%)\" }, offset: null }, options: undefined }, { type: 1, expr: \"visible-top => hidden-top, visible-bottom => hidden-bottom\", animation: { type: 4, styles: null, timings: \"195ms cubic-bezier(0.4,0.0,1,1)\" }, options: null }, { type: 1, expr: \"void => visible-top, void => visible-bottom\", animation: { type: 4, styles: null, timings: \"225ms cubic-bezier(0.0,0.0,0.2,1)\" }, options: null }], options: {} }] } });\nexport { RenderType_MatSnackBarContainer as RenderType_MatSnackBarContainer };\nfunction View_MatSnackBarContainer_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nexport function View_MatSnackBarContainer_0(_l) { return i0.ɵvid(2, [i0.ɵqud(402653184, 1, { _portalOutlet: 0 }), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSnackBarContainer_1)), i0.ɵdid(2, 212992, [[1, 4]], 0, i5.CdkPortalOutlet, [i0.ComponentFactoryResolver, i0.ViewContainerRef], { portal: [0, \"portal\"] }, null)], function (_ck, _v) { var currVal_0 = \"\"; _ck(_v, 2, 0, currVal_0); }, null); }\nexport function View_MatSnackBarContainer_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"snack-bar-container\", [[\"class\", \"mat-snack-bar-container\"], [\"role\", \"alert\"]], [[40, \"@state\", 0]], [[\"component\", \"@state.done\"]], function (_v, en, $event) { var ad = true; if ((\"component:@state.done\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 1).onAnimationEnd($event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, View_MatSnackBarContainer_0, RenderType_MatSnackBarContainer)), i0.ɵdid(1, 180224, null, 0, i1.MatSnackBarContainer, [i0.NgZone, i0.ElementRef, i0.ChangeDetectorRef, i1.MatSnackBarConfig], null, null)], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1)._animationState; _ck(_v, 0, 0, currVal_0); }); }\nvar MatSnackBarContainerNgFactory = i0.ɵccf(\"snack-bar-container\", i1.MatSnackBarContainer, View_MatSnackBarContainer_Host_0, {}, {}, []);\nexport { MatSnackBarContainerNgFactory as MatSnackBarContainerNgFactory };\nvar styles_SimpleSnackBar = [\".mat-simple-snackbar{display:flex;justify-content:space-between;line-height:20px;opacity:1}.mat-simple-snackbar-action{display:flex;flex-direction:column;flex-shrink:0;justify-content:space-around;margin:-8px 0 -8px 8px}.mat-simple-snackbar-action button{flex:1;max-height:36px}[dir=rtl] .mat-simple-snackbar-action{margin-left:0;margin-right:8px}\"];\nvar RenderType_SimpleSnackBar = i0.ɵcrt({ encapsulation: 2, styles: styles_SimpleSnackBar, data: { \"animation\": [{ type: 7, name: \"contentFade\", definitions: [{ type: 1, expr: \":enter\", animation: [{ type: 6, styles: { opacity: \"0\" }, offset: null }, { type: 4, styles: null, timings: \"375ms cubic-bezier(0.4,0.0,0.2,1)\" }], options: null }], options: {} }] } });\nexport { RenderType_SimpleSnackBar as RenderType_SimpleSnackBar };\nfunction View_SimpleSnackBar_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"div\", [[\"class\", \"mat-simple-snackbar-action\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 2, \"button\", [[\"mat-button\", \"\"]], [[8, \"disabled\", 0], [2, \"_mat-animation-noopable\", null]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.action() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, i10.View_MatButton_0, i10.RenderType_MatButton)), i0.ɵdid(2, 180224, null, 0, i9.MatButton, [i0.ElementRef, i6.Platform, i11.FocusMonitor, [2, i12.ANIMATION_MODULE_TYPE]], null, null), (_l()(), i0.ɵted(3, 0, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (i0.ɵnov(_v, 2).disabled || null); var currVal_1 = (i0.ɵnov(_v, 2)._animationMode === \"NoopAnimations\"); _ck(_v, 1, 0, currVal_0, currVal_1); var currVal_2 = _co.data.action; _ck(_v, 3, 0, currVal_2); }); }\nexport function View_SimpleSnackBar_0(_l) { return i0.ɵvid(2, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"span\", [], null, null, null, null, null)), (_l()(), i0.ɵted(1, null, [\"\", \"\"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_SimpleSnackBar_1)), i0.ɵdid(3, 16384, null, 0, i3.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_1 = _co.hasAction; _ck(_v, 3, 0, currVal_1); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.data.message; _ck(_v, 1, 0, currVal_0); }); }\nexport function View_SimpleSnackBar_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"simple-snack-bar\", [[\"class\", \"mat-simple-snackbar\"]], [[40, \"@contentFade\", 0]], null, null, View_SimpleSnackBar_0, RenderType_SimpleSnackBar)), i0.ɵdid(1, 49152, null, 0, i1.SimpleSnackBar, [i1.MatSnackBarRef, i1.MAT_SNACK_BAR_DATA], null, null)], null, function (_ck, _v) { var currVal_0 = undefined; _ck(_v, 0, 0, currVal_0); }); }\nvar SimpleSnackBarNgFactory = i0.ɵccf(\"simple-snack-bar\", i1.SimpleSnackBar, View_SimpleSnackBar_Host_0, {}, {}, []);\nexport { SimpleSnackBarNgFactory as SimpleSnackBarNgFactory };\n","<ng-template cdkPortalOutlet></ng-template>","<span>{{data.message}}</span><div class=\"mat-simple-snackbar-action\" *ngIf=\"hasAction\"><button mat-button (click)=\"action()\">{{data.action}}</button></div>"],"sourceRoot":""}